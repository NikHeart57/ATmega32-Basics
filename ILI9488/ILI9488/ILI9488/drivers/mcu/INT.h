/**
 * @note        Комментарий сгенерирован нейросетью deepseek 19.08.25
 *
 * @file        INT.h
 * @brief       Драйвер внешних прерываний для AVR ATmega32
 * @details     Предоставляет унифицированный интерфейс для работы с внешними прерываниями
 *              INT0, INT1, INT2 с поддержкой callback-функций.
 * 
 * @note        Особенности:
 *              - Поддержка всех трех внешних прерываний (INT0, INT1, INT2)
 *              - Настройка различных режимов триггеров
 *              - Callback-механизм для обработки прерываний
 *              - Автоматическая настройка пинов
 * 
 * @warning     Ограничения:
 *              - INT2 имеет ограниченные режимы триггеров
 *              - Callback-функции выполняются в контексте прерывания
 * 
 * @attention   Для работы необходимо:
 *              - Подключение <avr/io.h> и <avr/interrupt.h>
 *              - Включенные глобальные прерывания (sei())
 * 
 * @todo        Планируемые улучшения:
 *              - Поддержка прерываний от pin change
 *              - Расширенная система приоритетов
 *              - Защита от дребезга контактов
 * 
 * @bug         Известные проблемы:
 *              - 
 * 
 * @author      Николай Куркин, deepseek
 * @date        2025-08-19
 * @version     1.0
 * 
 * @copyright   MIT License
 */
#pragma once

#include <avr/io.h>
#include <avr/interrupt.h>
#include <stddef.h>

/**
 * @brief Режимы работы прерываний (включено/выключено)
 */
typedef enum {
    INT_DISABLED = 0,   ///< Прерывание отключено
    INT_ENABLED,        ///< Прерывание включено
} Int_State;

/**
 * @brief Типы триггеров (условий срабатывания) прерываний
 */
typedef enum {
    INT_TRIGGER_LOW_LEVEL = 0,  ///< Низкий уровень
    INT_TRIGGER_FALLING_EDGE,    ///< Спадающий фронт
    INT_TRIGGER_RISING_EDGE,     ///< Нарастающий фронт
    INT_TRIGGER_ANY_EDGE         ///< Любое изменение (только INT0/INT1)
} Int_TriggerMode;

/**
 * @brief Callback-функция для обработки прерывания
 * @note Функция вызывается при срабатывании прерывания
 * @warning Должна быть максимально краткой (не блокировать прерывания)
 */
typedef void (*Int_Callback)(void);

//////////////////////////////////////////////////////////////////////////
//  CALLBACK-ФУНКЦИИ
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Установка callback-функции для прерывания INT0
 * @param[in] callback Функция обратного вызова (NULL для отключения)
 */
void INT0_SetCallback(Int_Callback callback);

/**
 * @brief Установка callback-функции для прерывания INT1
 * @param[in] callback Функция обратного вызова (NULL для отключения)
 */
void INT1_SetCallback(Int_Callback callback);

/**
 * @brief Установка callback-функции для прерывания INT2
 * @param[in] callback Функция обратного вызова (NULL для отключения)
 */
void INT2_SetCallback(Int_Callback callback);

//////////////////////////////////////////////////////////////////////////
//  ФУНКЦИИ ИНИЦИАЛИЗАЦИИ INT0
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Базовая инициализация прерывания INT0
 * @param[in] state Состояние прерывания (вкл/выкл)
 * @note Использует режим по умолчанию (любое изменение)
 */
void INT0_Init(Int_State state);

/**
 * @brief Расширенная инициализация прерывания INT0
 * @param[in] state Состояние прерывания (вкл/выкл)
 * @param[in] mode Режим триггера (условие срабатывания)
 */
void INT0_Init(Int_State state, Int_TriggerMode mode);

//////////////////////////////////////////////////////////////////////////
//  ФУНКЦИИ ИНИЦИАЛИЗАЦИИ INT1
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Базовая инициализация прерывания INT1
 * @param[in] state Состояние прерывания (вкл/выкл)
 * @note Использует режим по умолчанию (любое изменение)
 */
void INT1_Init(Int_State state);

/**
 * @brief Расширенная инициализация прерывания INT1
 * @param[in] state Состояние прерывания (вкл/выкл)
 * @param[in] mode Режим триггера (условие срабатывания)
 */
void INT1_Init(Int_State state, Int_TriggerMode mode);

//////////////////////////////////////////////////////////////////////////
//  ФУНКЦИИ ИНИЦИАЛИЗАЦИИ INT2
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Базовая инициализация прерывания INT2
 * @param[in] state Состояние прерывания (вкл/выкл)
 * @note Использует режим по умолчанию (спадающий фронт)
 */
void INT2_Init(Int_State state);

/**
 * @brief Расширенная инициализация прерывания INT2
 * @param[in] state Состояние прерывания (вкл/выкл)
 * @param[in] mode Режим триггера (условие срабатывания)
 * @note INT2 поддерживает только 2 режима: низкий уровень и спадающий фронт
 */
void INT2_Init(Int_State state, Int_TriggerMode mode);

