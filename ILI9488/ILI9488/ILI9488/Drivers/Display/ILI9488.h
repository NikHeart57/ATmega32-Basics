#ifndef ILI9488_H_
#define ILI9488_H_

#ifndef F_CPU
#define F_CPU			1000000
#endif

#include <stdlib.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#define SCREEN_WIDTH	480
#define SCREEN_HEIGHT	320
#define FONT			2
#define FONT_COLOR		WHITE
#define FONT_BACKGROUND	BLACK

extern uint16_t Xcursor;
extern uint16_t Ycursor;
extern uint16_t font_size;
extern uint16_t font_color;
extern uint16_t font_background;

// Определение порта данных
#define LCD_DATA_DDR	DDRA
#define LCD_DATA_PORT	PORTA
#define LCD_DATA_DB0	PA0
#define LCD_DATA_DB1	PA1
#define LCD_DATA_DB2	PA2
#define LCD_DATA_DB3	PA3
#define LCD_DATA_DB4	PA4
#define LCD_DATA_DB5	PA5
#define LCD_DATA_DB6	PA6
#define LCD_DATA_DB7	PA7

// Определение порта команд
#define LCD_CMD_DDR		DDRC
#define LCD_CMD_PORT	PORTC
#define LCD_CMD_RS		PC7			// LCD_RS(DC)	- Данные / команда			(данные - 1 / команда - 0)
#define LCD_CMD_WR		PC6			// LCD_WR		- Строб						(строб по спадающему фронту)
#define LCD_CMD_CS		PC5			// LCD_CS		- Чип селект				(селект - лог. ноль)
#define LCD_CMD_RST		PC4			// LCD_RST		- Ресет						(ресет по низкому уровню)
#define LCD_CMD_RD		PC3			// LCD_RD		- Чтение даных с экрана


// Константы основных цветов
// Формат RGB565: RRRRR GGGGGG BBBBB
const uint16_t RED     = 0xF800;	// 11111 000000 00000 (RGB)
const uint16_t GREEN   = 0x07E0;	// 00000 111111 00000 (RGB)
const uint16_t BLUE    = 0x001F;	// 00000 000000 11111 (RGB)
const uint16_t YELLOW  = 0xFFE0;	// 11111 111111 00000 (RGB)
const uint16_t CYAN    = 0x07FF;	// 00000 111111 11111 (RGB)
const uint16_t MAGENTA = 0xF81F;	// 11111 000000 11111 (RGB)
const uint16_t WHITE   = 0xFFFF;	// 11111 111111 11111 (RGB)
const uint16_t BLACK   = 0x0000;	// 00000 000000 00000 (RGB)


// Прототипы функций
// Функции связи МК с экраном и настроек самого экрана
void ILI9488_Setup(void);					// Настройка линии связи от МК
void ILI9488_Init(void);					// Инициализация настроек экрана и его включение
void ILI9488_RESET(void);					// RESET экрана
void ILI9488_WriteCommand(uint8_t cmd);		// Функция отправки команды
void ILI9488_WriteData(uint8_t data);		// Функция отправки данных

// Функции отрисовки графики
void ILI9488_FillScreen(uint16_t color);
void ILI9488_DrawPixel(uint16_t x, uint16_t y, uint16_t color);
void ILI9488_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);
void ILI9488_DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color, uint8_t filled);
void ILI9488_DrawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color, uint8_t filled);


// Функции печати символов
/*
void ILI9488_PrintChar(char c);
void ILI9488_PrintStr(char* str);

void ILI9488_PrintChar_S(char c);
void ILI9488_PrintStr_S(char* str);
*/

// Вспомогательные функции
uint16_t ILI9488_RGB888_to_RGB565(uint8_t r, uint8_t g, uint8_t b);




/*
// TO DO 
// Monocraft надо перенести на sd
const uint8_t monocraft[96][6] =
{
	
	//0x00 - 0x0F
	//{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},							// Управляющие символы 
	
	//0x10 - 0x1F
	//{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},							// Управляющие символы 
	
	
	//0x20 - 0x2F
	{0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},	// 0x20 - 32 - * Пробел *
	{0b00000000, 0b11111010, 0b00000000, 0b00000000, 0b00000000, 0b00000000},	// 0x21 - 33 - !
	{0b00000000, 0b01100000, 0b00000000, 0b01100000, 0b00000000, 0b00000000},	// 0x22 - 34 - "
	{0b00101000, 0b11111110, 0b00101000, 0b11111110, 0b00101000, 0b00000000},	// 0x23 - 35 - #
	{0b00100100, 0b01010100, 0b11010110, 0b01010100, 0b01001000, 0b00000000},	// 0x24 - 36 - $
	{0b11000010, 0b00001100, 0b00010000, 0b01100000, 0b10000110, 0b00000000},	// 0x25 - 37 - %
	{0b00001100, 0b01010010, 0b10111010, 0b01001100, 0b00010010, 0b00000000},	// 0x26 - 38 - &
	{0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000, 0b00000000},	// 0x27 - 39 - '
	{0b00000000, 0b00111000, 0b01000100, 0b10000010, 0b00000000, 0b00000000},	// 0x28 - 40 - (
	{0b00000000, 0b10000010, 0b01000100, 0b00111000, 0b00000000, 0b00000000},	// 0x29 - 41 - )
	{0b00000000, 0b01010000, 0b00100000, 0b01010000, 0b00000000, 0b00000000},	// 0x2A - 42 - *
	{0b00010000, 0b00010000, 0b01111100, 0b00010000, 0b00010000, 0b00000000},	// 0x2B - 43 - +
	{0b00000000, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000},	// 0x2C - 44 - ,
	{0b00000000, 0b00010000, 0b00010000, 0b00010000, 0b00000000, 0b00000000},	// 0x2D - 45 - -
	{0b00000000, 0b00000000, 0b00000010, 0b00000000, 0b00000000, 0b00000000},	// 0x2E - 46 - .
	{0b00000010, 0b00001100, 0b00010000, 0b01100000, 0b10000000, 0b00000000},	// 0x2F - 47 - /
	
	//0x30 - 0x3F
	{0b01111100, 0b10001010, 0b10010010, 0b10100010, 0b01111100, 0b00000000},	// 0x30 - 48 - 0
	{0b00000010, 0b01000010, 0b11111110, 0b00000010, 0b00000010, 0b00000000},	// 0x31 - 49 - 1
	{0b01000110, 0b10001010, 0b10010010, 0b10010010, 0b01100110, 0b00000000},	// 0x32 - 50 - 2
	{0b01000100, 0b10000010, 0b10010010, 0b10010010, 0b01101100, 0b00000000},	// 0x33 - 51 - 3
	{0b00011000, 0b00101000, 0b01001000, 0b10001000, 0b11111110, 0b00000000},	// 0x34 - 52 - 4
	{0b11100100, 0b10100010, 0b10100010, 0b10100010, 0b10011100, 0b00000000},	// 0x35 - 53 - 5
	{0b00111100, 0b01010010, 0b10010010, 0b10010010, 0b00001100, 0b00000000},	// 0x36 - 54 - 6
	{0b11000000, 0b10000000, 0b10001110, 0b10010000, 0b11100000, 0b00000000},	// 0x37 - 55 - 7
	{0b01101100, 0b10010010, 0b10010010, 0b10010010, 0b01101100, 0b00000000},	// 0x38 - 56 - 8
	{0b01100000, 0b10010010, 0b10010010, 0b10010100, 0b01111000, 0b00000000},	// 0x39 - 57 - 9
	{0b00000000, 0b00000000, 0b00100100, 0b00000000, 0b00000000, 0b00000000},	// 0x3A - 58 - :
	{0b00000000, 0b00000010, 0b00100100, 0b00000000, 0b00000000, 0b00000000},	// 0x3B - 59 - ;
	{0b00010000, 0b00101000, 0b01000100, 0b10000010, 0b00000000, 0b00000000},	// 0x3C - 60 - <
	{0b00100100, 0b00100100, 0b00100100, 0b00100100, 0b00000000, 0b00000000},	// 0x3D - 61 - =
	{0b10000010, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000},	// 0x3E - 62 - >
	{0b01000000, 0b10000000, 0b10001010, 0b10010000, 0b01100000, 0b00000000},	// 0x3F - 63 - ?
	
	//0x40 - 0x4F
	{0b00111100, 0b01000010, 0b01011010, 0b01001010, 0b00111010, 0b00000000},	// 0x40 - 64 - @
	{0b01111110, 0b10010000, 0b10010000, 0b10010000, 0b01111110, 0b00000000},	// 0x41 - 65 - A
	{0b11111110, 0b10010010, 0b10010010, 0b10010010, 0b01101100, 0b00000000},	// 0x42 - 66 - B
	{0b01111100, 0b10000010, 0b10000010, 0b10000010, 0b01000100, 0b00000000},	// 0x43 - 67 - C
	{0b11111110, 0b10000010, 0b10000010, 0b10000010, 0b01111100, 0b00000000},	// 0x44 - 68 - D
	{0b11111110, 0b10010010, 0b10010010, 0b10010010, 0b10000010, 0b00000000},	// 0x45 - 69 - E
	{0b11111110, 0b10010000, 0b10010000, 0b10010000, 0b10000000, 0b00000000},	// 0x46 - 70 - F
	{0b01111100, 0b10000010, 0b10000010, 0b10100010, 0b10111100, 0b00000000},	// 0x47 - 71 - G
	{0b11111110, 0b00010000, 0b00010000, 0b00010000, 0b11111110, 0b00000000},	// 0x48 - 72 - H
	{0b00000000, 0b10000010, 0b11111110, 0b10000010, 0b00000000, 0b00000000},	// 0x49 - 73 - I
	{0b00000100, 0b00000010, 0b00000010, 0b00000010, 0b11111100, 0b00000000},	// 0x4A - 74 - J
	{0b11111110, 0b00100000, 0b00100000, 0b01010000, 0b10001110, 0b00000000},	// 0x4B - 75 - K
	{0b11111110, 0b00000010, 0b00000010, 0b00000010, 0b00000000, 0b00000000},	// 0x4C - 76 - L
	{0b11111110, 0b01000000, 0b00100000, 0b01000000, 0b11111110, 0b00000000},	// 0x4D - 77 - M
	{0b11111110, 0b01000000, 0b00100000, 0b00010000, 0b11111110, 0b00000000},	// 0x4E - 78 - N
	{0b01111100, 0b10000010, 0b10000010, 0b10000010, 0b01111100, 0b00000000},	// 0x4F - 79 - O
	
	//0x50 - 0x5F
	{0b11111110, 0b10010000, 0b10010000, 0b10010000, 0b01100000, 0b00000000},	// 0x50 - 80 - P
	{0b01111100, 0b10000010, 0b10000010, 0b10000100, 0b01111010, 0b00000000},	// 0x51 - 81 - Q
	{0b11111110, 0b10010000, 0b10010000, 0b10010000, 0b01101110, 0b00000000},	// 0x52 - 82 - R
	{0b01100100, 0b10010010, 0b10010010, 0b10010010, 0b01001100, 0b00000000},	// 0x53 - 83 - S
	{0b10000000, 0b10000000, 0b11111110, 0b10000000, 0b10000000, 0b00000000},	// 0x54 - 84 - T
	{0b11111100, 0b00000010, 0b00000010, 0b00000010, 0b11111100, 0b00000000},	// 0x55 - 85 - U
	{0b11110000, 0b00001100, 0b00000010, 0b00001100, 0b11110000, 0b00000000},	// 0x56 - 86 - V
	{0b11111110, 0b00000100, 0b00001000, 0b00000100, 0b11111110, 0b00000000},	// 0x57 - 87 - W
	{0b11000110, 0b00101000, 0b00010000, 0b00101000, 0b11000110, 0b00000000},	// 0x58 - 88 - X
	{0b10000000, 0b01000000, 0b00111110, 0b01000000, 0b10000000, 0b00000000},	// 0x59 - 89 - Y
	{0b10000110, 0b10001010, 0b10010010, 0b10100010, 0b11000010, 0b00000000},	// 0x5A - 90 - Z
	{0b00000000, 0b11111110, 0b10000010, 0b10000010, 0b00000000, 0b00000000},	// 0x5B - 91 - [
	{0b10000000, 0b01100000, 0b00010000, 0b00001100, 0b00000010, 0b00000000},	// 0x5C - 92 - \
	{0b00000000, 0b10000010, 0b10000010, 0b11111110, 0b00000000, 0b00000000},	// 0x5D - 93 - ]
	{0b00100000, 0b01000000, 0b10000000, 0b01000000, 0b00100000, 0b00000000},	// 0x5E - 94 - ^
	{0b00000001, 0b00000001, 0b00000001, 0b00000001, 0b00000001, 0b00000000},	// 0x5F - 95 - _

	//0x60 - 0x6F
	{0b01000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},	// 0x60 - 96 - '
	{0b00000100, 0b00101010, 0b00101010, 0b00101010, 0b00011110, 0b00000000},	// 0x61 - 97 - a
	{0b01111110, 0b00010010, 0b00100010, 0b00100010, 0b00011100, 0b00000000},	// 0x62 - 98 - b
	{0b00011100, 0b00100010, 0b00100010, 0b00100010, 0b00010100, 0b00000000},	// 0x63 - 99 - c
	{0b00011100, 0b00100010, 0b00100010, 0b00010010, 0b01111110, 0b00000000},	// 0x64 - 100 - d
	{0b00011100, 0b00101010, 0b00101010, 0b00101010, 0b00011010, 0b00000000},	// 0x65 - 101 - e
	{0b00100000, 0b01111110, 0b10100000, 0b10100000, 0b00000000, 0b00000000},	// 0x66 - 102 - f
	{0b00011001, 0b00100101, 0b00100101, 0b00100101, 0b00111110, 0b00000000},	// 0x67 - 103 - g
	{0b11111110, 0b00010000, 0b00100000, 0b00100000, 0b00011110, 0b00000000},	// 0x68 - 104 - h
	{0b00000000, 0b00100000, 0b10111100, 0b00000010, 0b00000000, 0b00000000},	// 0x69 - 105 - i
	{0b00000100, 0b00000010, 0b00000010, 0b00000010, 0b10111100, 0b00000000},	// 0x6A - 106 - j
	{0b00000000, 0b11111110, 0b00001000, 0b00010100, 0b00100010, 0b00000000},	// 0x6B - 107 - k
	{0b00000000, 0b10000000, 0b11111100, 0b00000010, 0b00000010, 0b00000000},	// 0x6C - 108 - l
	{0b00111110, 0b00100000, 0b00011000, 0b00100000, 0b00011110, 0b00000000},	// 0x6D - 109 - m
	{0b00111110, 0b00100000, 0b00100000, 0b00100000, 0b00011110, 0b00000000},	// 0x6E - 110 - n
	{0b00011100, 0b00100010, 0b00100010, 0b00100010, 0b00011100, 0b00000000},	// 0x6F - 111 - o
	
	//0x70 - 0x7F
	{0b00111111, 0b00010100, 0b00100100, 0b00100100, 0b00011000, 0b00000000},	// 0x70 - 112 - p
	{0b00011000, 0b00100100, 0b00100100, 0b00010100, 0b00111111, 0b00000000},	// 0x71 - 113 - q
	{0b00111110, 0b00010000, 0b00100000, 0b00100000, 0b00010000, 0b00000000},	// 0x72 - 114 - r
	{0b00010010, 0b00101010, 0b00101010, 0b00101010, 0b00100100, 0b00000000},	// 0x73 - 115 - s
	{0b00000000, 0b00100000, 0b11111100, 0b00100010, 0b00000000, 0b00000000},	// 0x74 - 116 - t
	{0b00111100, 0b00000010, 0b00000010, 0b00000010, 0b00111110, 0b00000000},	// 0x75 - 117 - u
	{0b00111000, 0b00000100, 0b00000010, 0b00000100, 0b00111000, 0b00000000},	// 0x76 - 118 - v
	{0b00111100, 0b00000010, 0b00001110, 0b00000010, 0b00111110, 0b00000000},	// 0x77 - 119 - w
	{0b00100010, 0b00010100, 0b00001000, 0b00010100, 0b00100010, 0b00000000},	// 0x78 - 120 - x
	{0b00111001, 0b00000101, 0b00000101, 0b00000101, 0b00111110, 0b00000000},	// 0x79 - 121 - y
	{0b00100010, 0b00100110, 0b00101010, 0b00110010, 0b00100010, 0b00000000},	// 0x7A - 122 - z
	{0b00000000, 0b00010000, 0b01101100, 0b10000010, 0b00000000, 0b00000000},	// 0x7B - 123 - {
	{0b00000000, 0b00000000, 0b11111110, 0b00000000, 0b00000000, 0b00000000},	// 0x7C - 124 - |
	{0b00000000, 0b10000010, 0b01101100, 0b00010000, 0b00000000, 0b00000000},	// 0x7D - 125 - }
	{0b00011000, 0b00100000, 0b00010000, 0b00001000, 0b00110000, 0b00000000},	// 0x7E - 126 - ~
	{0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},	// 0x7F - 127 - DEL
};
*/

#endif /* ILI9488_H_ */