/**
 * @note        Комментарий сгенерирован нейросетью deepseek 19.08.25
 *
 * @file        ILI9488.h
 * @brief       Драйвер дисплея ILI9488 для AVR ATmega32 (8-битный параллельный режим)
 * @details     Предоставляет полный набор функций для управления TFT дисплеем с контроллером ILI9488
 *              через 8-битный параллельный интерфейс. Включает базовую графику и вывод текста.
 * 
 * @note        Особенности:
 *              - Поддержка разрешения 480x320 (RGB565)
 *              - Аппаратный сброс и инициализация
 *              - Функции рисования: пиксель, линия, прямоугольник, круг
 *              - Вывод текста с использованием растрового шрифта 6x8 (Monocraft)
 *              - Поддержка масштабирования шрифта (1x, 2x, 3x...)
 *              - Управление курсором и обработка управляющих символов (\n, \b, \t)
 *              - Конвертация цветов из RGB888 в RGB565
 * 
 * @warning     Ограничения:
 *              - Только 8-битный параллельный режим (без SPI)
 *              - Без поддержки аппаратного ускорения (DMA)
 *              - Без двойной буферизации
 *              - Шрифт фиксированный, хранится в памяти программ (PROGMEM)
 * 
 * @attention   Для работы необходимо:
 *              - Подключение <avr/io.h> и <util/delay.h>
 *              - Корректная настройка F_CPU
 *              - Правильное подключение линий данных и управления к портам МК
 * 
 * @todo        Планируемые улучшения:
 *              - Перенос шрифта и констант в PROGMEM для экономии RAM
 *              - Добавление поддержки русских символов
 *              - Реализация аппаратного ускорения (DMA) для заполнения экрана
 *              - Добавление функции вывода изображений (битмапов)
 * 
 * @bug         Известные проблемы:
 *              - Функция ILI9488_FillScreen может работать медленно на низких частотах МК
 *              - Нет проверки на выход за границы экрана в некоторых функциях
 * 
 * @author      Николай Куркин, deepseek
 * @date        2025-08-19
 * @version     1.0
 * 
 * @copyright   MIT License
 */
#pragma once

#ifndef F_CPU
#define F_CPU               16000000 ///< Частота CPU по умолчанию, Гц
#endif

#include <stdlib.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

//////////////////////////////////////////////////////////////////////////
//  ОСНОВНЫЕ КОНСТАНТЫ ДИСПЛЕЯ
//////////////////////////////////////////////////////////////////////////

#define ILI9488_SCREEN_WIDTH		480		///< Ширина дисплея в пикселях
#define ILI9488_SCREEN_HEIGHT		320		///< Высота дисплея в пикселях
#define ILI9488_FONT				2		///< Размер шрифта по умолчанию (масштаб 1: 6x8px, 2: 12x16px, и т.д.)
#define ILI9488_FONT_COLOR			WHITE	///< Цвет шрифта по умолчанию
#define ILI9488_FONT_BACKGROUND		BLACK	///< Цвет фона шрифта по умолчанию

//////////////////////////////////////////////////////////////////////////
//  ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ ДЛЯ РАБОТЫ С ТЕКСТОМ
//////////////////////////////////////////////////////////////////////////

extern uint16_t ili9488_cursor_x;			///< Текущая горизонтальная позиция курсора (в пикселях)
extern uint16_t ili9488_cursor_y;			///< Текущая вертикальная позиция курсора (в пикселях)
extern uint16_t ili9488_font_size;          ///< Текущий масштаб шрифта (1, 2, 3...)
extern uint16_t ili9488_font_color;         ///< Текущий цвет шрифта (формат RGB565)
extern uint16_t ili9488_font_bg_color;      ///< Текущий цвет фона текста (формат RGB565)

//////////////////////////////////////////////////////////////////////////
//  НАСТРОЙКА АППАРАТНЫХ ВЫВОДОВ МИКРОКОНТРОЛЛЕРА
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Порт данных дисплея (D0-D7)
 * @note Используется младшие 8 бит порта A (PA0-PA7)
 */
#define ILI9488_DATA_DDR    DDRA	///< Регистр направления порта данных
#define ILI9488_DATA_PORT   PORTA	///< Регистр данных порта данных
#define ILI9488_DATA_DB0    PA0		///< Линия данных D0
#define ILI9488_DATA_DB1    PA1		///< Линия данных D1
#define ILI9488_DATA_DB2    PA2		///< Линия данных D2
#define ILI9488_DATA_DB3    PA3		///< Линия данных D3
#define ILI9488_DATA_DB4    PA4		///< Линия данных D4
#define ILI9488_DATA_DB5    PA5		///< Линия данных D5
#define ILI9488_DATA_DB6    PA6		///< Линия данных D6
#define ILI9488_DATA_DB7    PA7		///< Линия данных D7

/**
 * @brief Порт управления дисплея
 * @note Используются пины порта C (PC3-PC7)
 */
#define ILI9488_CMD_DDR     DDRC	///< Регистр направления порта управления
#define ILI9488_CMD_PORT    PORTC	///< Регистр данных порта управления
#define ILI9488_CMD_RS      PC7		///< Регистр выбора (0-Команда, 1-Данные)
#define ILI9488_CMD_WR      PC6		///< Строб записи (активный по спаду)
#define ILI9488_CMD_CS      PC5		///< Выбор чипа (активный низкий уровень)
#define ILI9488_CMD_RST     PC4		///< Сигнал сброса (активный низкий уровень)
#define ILI9488_CMD_RD      PC3		///< Сигнал чтения (не используется в данной реализации)

//////////////////////////////////////////////////////////////////////////
//  ОСНОВНЫЕ ЦВЕТА В ФОРМАТЕ RGB565
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Индексы стандартных цветов для быстрого доступа
 */
typedef enum {
    ILI9488_COLOR_RED = 0,     ///< Красный
    ILI9488_COLOR_GREEN,       ///< Зеленый
    ILI9488_COLOR_BLUE,        ///< Синий
    ILI9488_COLOR_YELLOW,      ///< Желтый
    ILI9488_COLOR_CYAN,        ///< Бирюзовый
    ILI9488_COLOR_MAGENTA,     ///< Пурпурный
    ILI9488_COLOR_WHITE,       ///< Белый
    ILI9488_COLOR_BLACK,       ///< Черный
    ILI9488_COLOR_COUNT        ///< Количество цветов (для проверки границ)
} ILI9488_ColorIndex;

/**
 * @brief Стандартные цвета в формате RGB565 (16 бит)
 * @note Формат: RRRRR GGGGGG BBBBB
 */
extern const uint16_t ili9488_colors[ILI9488_COLOR_COUNT];

/**
 * @brief Макросы для удобного доступа к цветам по имени
 * @note Сохраняем обратную совместимость со старым кодом
 */
#define RED     ili9488_colors[ILI9488_COLOR_RED]
#define GREEN   ili9488_colors[ILI9488_COLOR_GREEN]
#define BLUE    ili9488_colors[ILI9488_COLOR_BLUE]
#define YELLOW  ili9488_colors[ILI9488_COLOR_YELLOW]
#define CYAN    ili9488_colors[ILI9488_COLOR_CYAN]
#define MAGENTA ili9488_colors[ILI9488_COLOR_MAGENTA]
#define WHITE   ili9488_colors[ILI9488_COLOR_WHITE]
#define BLACK   ili9488_colors[ILI9488_COLOR_BLACK]

//////////////////////////////////////////////////////////////////////////
//  КОНФИГУРАЦИЯ ДИСПЛЕЯ (ПЕРЕЧИСЛЕНИЯ И СТРУКТУРЫ)
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Ориентация дисплея
 * @note Настройки битов регистра Memory Access Control (0x36)
 */
typedef enum {
    ILI9488_ORIENTATION_PORTRAIT   = 0b00001000,  ///< Портретная ориентация
    ILI9488_ORIENTATION_LANDSCAPE  = 0b00101000,   ///< Альбомная ориентация (по умолчанию)
    ILI9488_ORIENTATION_PORTRAIT_FLIP = 0b11001000, ///< Портретная перевернутая
    ILI9488_ORIENTATION_LANDSCAPE_FLIP = 0b10101000 ///< Альбомная перевернутая
} ILI9488_Orientation;

/**
 * @brief Режим отображения
 */
typedef enum {
    ILI9488_DISPLAY_OFF = 0,  ///< Дисплей выключен
    ILI9488_DISPLAY_ON        ///< Дисплей включен
} ILI9488_DisplayState;


//////////////////////////////////////////////////////////////////////////
//  ПРОТОТИПЫ ФУНКЦИЙ УПРАВЛЕНИЯ ДИСПЛЕЕМ
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Настройка линий ввода-вывода МК для работы с дисплеем
 * @note Настраивает соответствующие пины как выходы и устанавливает их в 0.
 *       Должна быть вызвана перед ILI9488_Init().
 */
void ILI9488_Setup(void);

//////////////////////////////////////////////////////////////////////////
//  ПРОТОТИПЫ ФУНКЦИЙ УПРАВЛЕНИЯ ДИСПЛЕЕМ
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Базовая инициализация контроллера дисплея ILI9488
 * @param[in] state Состояние дисплея (вкл/выкл)
 * @return 1 в случае успеха, 0 при ошибке
 * @note Использует настройки по умолчанию:
 *       - Альбомная ориентация
 *       - Размер шрифта: 2
 *       - Цвет шрифта: WHITE
 *       - Цвет фона: BLACK
 */
uint8_t ILI9488_Init(ILI9488_DisplayState state);

/**
 * @brief Инициализация контроллера дисплея ILI9488 с выбором ориентации
 * @param[in] state Состояние дисплея (вкл/выкл)
 * @param[in] orientation Ориентация дисплея
 * @return 1 в случае успеха, 0 при ошибке
 * @note Использует настройки по умолчанию для шрифта:
 *       - Размер шрифта: 2
 *       - Цвет шрифта: WHITE
 *       - Цвет фона: BLACK
 */
uint8_t ILI9488_Init(ILI9488_DisplayState state, ILI9488_Orientation orientation);

/**
 * @brief Расширенная инициализация контроллера дисплея ILI9488
 * @param[in] state Состояние дисплея (вкл/выкл)
 * @param[in] orientation Ориентация дисплея
 * @param[in] font_size Размер шрифта по умолчанию
 * @param[in] font_color Цвет шрифта по умолчанию
 * @param[in] bg_color Цвет фона по умолчанию
 * @return 1 в случае успеха, 0 при ошибке
 */
uint8_t ILI9488_Init(ILI9488_DisplayState state, 
                    ILI9488_Orientation orientation,
                    uint16_t font_size, 
                    uint16_t font_color, 
                    uint16_t bg_color);

/**
 * @brief Аппаратный сброс (Reset) дисплея
 * @note Формирует импульс низкого уровня на линии RST.
 */
void ILI9488_RESET(void);

/**
 * @brief Отправка команды на дисплей
 * @param[in] cmd Код команды для отправки
 */
void ILI9488_WriteCommand(uint8_t cmd);

/**
 * @brief Отправка данных на дисплей
 * @param[in] data Данные для отправки
 */
void ILI9488_WriteData(uint8_t data);

//////////////////////////////////////////////////////////////////////////
//  ПРОТОТИПЫ ФУНКЦИЙ ОТРИСОВКИ ГРАФИКИ
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Заполнение всего экрана указанным цветом
 * @param[in] color Цвет заполнения в формате RGB565
 */
void ILI9488_FillScreen(uint16_t color);

/**
 * @brief Рисование одного пикселя
 * @param[in] x Координата X (0..SCREEN_WIDTH-1)
 * @param[in] y Координата Y (0..SCREEN_HEIGHT-1)
 * @param[in] color Цвет пикселя в формате RGB565
 */
void ILI9488_DrawPixel(uint16_t x, uint16_t y, uint16_t color);

/**
 * @brief Рисование линии (алгоритм Брезенхема)
 * @param[in] x0 Начальная координата X
 * @param[in] y0 Начальная координата Y
 * @param[in] x1 Конечная координата X
 * @param[in] y1 Конечная координата Y
 * @param[in] color Цвет линии в формате RGB565
 */
void ILI9488_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);

/**
 * @brief Рисование прямоугольника
 * @param[in] x Координата левого верхнего угла X
 * @param[in] y Координата левого верхнего угла Y
 * @param[in] w Ширина прямоугольника
 * @param[in] h Высота прямоугольника
 * @param[in] color Цвет границы/заливки в формате RGB565
 * @param[in] filled Флаг заливки (0 - контур, 1 - заполненный)
 */
void ILI9488_DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color, uint8_t filled);

/**
 * @brief Рисование окружности/круга
 * @param[in] x0 Координата центра X
 * @param[in] y0 Координата центра Y
 * @param[in] r Радиус
 * @param[in] color Цвет границы/заливки в формате RGB565
 * @param[in] filled Флаг заливки (0 - контур, 1 - заполненный)
 */
void ILI9488_DrawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color, uint8_t filled);

//////////////////////////////////////////////////////////////////////////
//  ПРОТОТИПЫ ФУНКЦИЙ ВЫВОДА ТЕКСТА
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Вывод одного символа на экран
 * @param[in] c Символ для отображения
 * @note Поддерживает управляющие символы: 
 *       - \b (Backspace) - удаление предыдущего символа
 *       - \t (Tab) - табуляция (кратно 8 символам)
 *       - \n (New line) - перевод строки
 *       - \r (Carriage return) - возврат каретки (в начало строки)
 * @note Автоматически обрабатывает переносы и прокрутку экрана.
 */
void ILI9488_PrintChar(char c);

/**
 * @brief Вывод строки на экран
 * @param[in] str Указатель на строку (нуль-терминированная)
 */
void ILI9488_PrintStr(char* str);

//////////////////////////////////////////////////////////////////////////
//  ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Конвертация цвета из 24-битного RGB в 16-битный RGB565
 * @param[in] r Компонента Red (0-255)
 * @param[in] g Компонента Green (0-255)
 * @param[in] b Компонента Blue (0-255)
 * @return Цвет в формате RGB565
 */
uint16_t ILI9488_RGB888_to_RGB565(uint8_t r, uint8_t g, uint8_t b);

//////////////////////////////////////////////////////////////////////////
//  БИТОВАЯ КАРТА ШРИФТА (6x8) - ASCII 32-127
//////////////////////////////////////////////////////////////////////////

/**
 * @brief Массив растровых образов символов шрифта Monocraft 6x8
 * @note Индексация: [ASCII код - 32][столбец (0-5)]
 *       Каждый байт описывает вертикальную линию из 8 пикселей (MSB - верх).
 */
const uint8_t monocraft[96][5] =
{
	
	//0x00 - 0x0F
	//{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},				// Управляющие символы 
	
	//0x10 - 0x1F
	//{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},				// Управляющие символы 
	
	
	//0x20 - 0x2F
	{0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},	// 0x20 - 32 - * Пробел *
	{0b00000000, 0b11111010, 0b00000000, 0b00000000, 0b00000000},	// 0x21 - 33 - !
	{0b00000000, 0b01100000, 0b00000000, 0b01100000, 0b00000000},	// 0x22 - 34 - "
	{0b00101000, 0b11111110, 0b00101000, 0b11111110, 0b00101000},	// 0x23 - 35 - #
	{0b00100100, 0b01010100, 0b11010110, 0b01010100, 0b01001000},	// 0x24 - 36 - $
	{0b11000010, 0b00001100, 0b00010000, 0b01100000, 0b10000110},	// 0x25 - 37 - %
	{0b00001100, 0b01010010, 0b10111010, 0b01001100, 0b00010010},	// 0x26 - 38 - &
	{0b00000000, 0b00000000, 0b01100000, 0b00000000, 0b00000000},	// 0x27 - 39 - '
	{0b00000000, 0b00111000, 0b01000100, 0b10000010, 0b00000000},	// 0x28 - 40 - (
	{0b00000000, 0b10000010, 0b01000100, 0b00111000, 0b00000000},	// 0x29 - 41 - )
	{0b00000000, 0b01010000, 0b00100000, 0b01010000, 0b00000000},	// 0x2A - 42 - *
	{0b00010000, 0b00010000, 0b01111100, 0b00010000, 0b00010000},	// 0x2B - 43 - +
	{0b00000000, 0b00000001, 0b00000010, 0b00000000, 0b00000000},	// 0x2C - 44 - ,
	{0b00000000, 0b00010000, 0b00010000, 0b00010000, 0b00000000},	// 0x2D - 45 - -
	{0b00000000, 0b00000000, 0b00000010, 0b00000000, 0b00000000},	// 0x2E - 46 - .
	{0b00000010, 0b00001100, 0b00010000, 0b01100000, 0b10000000},	// 0x2F - 47 - /
	
	//0x30 - 0x3F
	{0b01111100, 0b10001010, 0b10010010, 0b10100010, 0b01111100},	// 0x30 - 48 - 0
	{0b00000010, 0b01000010, 0b11111110, 0b00000010, 0b00000010},	// 0x31 - 49 - 1
	{0b01000110, 0b10001010, 0b10010010, 0b10010010, 0b01100110},	// 0x32 - 50 - 2
	{0b01000100, 0b10000010, 0b10010010, 0b10010010, 0b01101100},	// 0x33 - 51 - 3
	{0b00011000, 0b00101000, 0b01001000, 0b10001000, 0b11111110},	// 0x34 - 52 - 4
	{0b11100100, 0b10100010, 0b10100010, 0b10100010, 0b10011100},	// 0x35 - 53 - 5
	{0b00111100, 0b01010010, 0b10010010, 0b10010010, 0b00001100},	// 0x36 - 54 - 6
	{0b11000000, 0b10000000, 0b10001110, 0b10010000, 0b11100000},	// 0x37 - 55 - 7
	{0b01101100, 0b10010010, 0b10010010, 0b10010010, 0b01101100},	// 0x38 - 56 - 8
	{0b01100000, 0b10010010, 0b10010010, 0b10010100, 0b01111000},	// 0x39 - 57 - 9
	{0b00000000, 0b00000000, 0b00100100, 0b00000000, 0b00000000},	// 0x3A - 58 - :
	{0b00000000, 0b00000010, 0b00100100, 0b00000000, 0b00000000},	// 0x3B - 59 - ;
	{0b00010000, 0b00101000, 0b01000100, 0b10000010, 0b00000000},	// 0x3C - 60 - <
	{0b00100100, 0b00100100, 0b00100100, 0b00100100, 0b00000000},	// 0x3D - 61 - =
	{0b10000010, 0b01000100, 0b00101000, 0b00010000, 0b00000000},	// 0x3E - 62 - >
	{0b01000000, 0b10000000, 0b10001010, 0b10010000, 0b01100000},	// 0x3F - 63 - ?
	
	//0x40 - 0x4F
	{0b00111100, 0b01000010, 0b01011010, 0b01001010, 0b00111010},	// 0x40 - 64 - @
	{0b01111110, 0b10010000, 0b10010000, 0b10010000, 0b01111110},	// 0x41 - 65 - A
	{0b11111110, 0b10010010, 0b10010010, 0b10010010, 0b01101100},	// 0x42 - 66 - B
	{0b01111100, 0b10000010, 0b10000010, 0b10000010, 0b01000100},	// 0x43 - 67 - C
	{0b11111110, 0b10000010, 0b10000010, 0b10000010, 0b01111100},	// 0x44 - 68 - D
	{0b11111110, 0b10010010, 0b10010010, 0b10010010, 0b10000010},	// 0x45 - 69 - E
	{0b11111110, 0b10010000, 0b10010000, 0b10010000, 0b10000000},	// 0x46 - 70 - F
	{0b01111100, 0b10000010, 0b10000010, 0b10100010, 0b10111100},	// 0x47 - 71 - G
	{0b11111110, 0b00010000, 0b00010000, 0b00010000, 0b11111110},	// 0x48 - 72 - H
	{0b00000000, 0b10000010, 0b11111110, 0b10000010, 0b00000000},	// 0x49 - 73 - I
	{0b00000100, 0b00000010, 0b00000010, 0b00000010, 0b11111100},	// 0x4A - 74 - J
	{0b11111110, 0b00100000, 0b00100000, 0b01010000, 0b10001110},	// 0x4B - 75 - K
	{0b11111110, 0b00000010, 0b00000010, 0b00000010, 0b00000000},	// 0x4C - 76 - L
	{0b11111110, 0b01000000, 0b00100000, 0b01000000, 0b11111110},	// 0x4D - 77 - M
	{0b11111110, 0b01000000, 0b00100000, 0b00010000, 0b11111110},	// 0x4E - 78 - N
	{0b01111100, 0b10000010, 0b10000010, 0b10000010, 0b01111100},	// 0x4F - 79 - O
	
	//0x50 - 0x5F
	{0b11111110, 0b10010000, 0b10010000, 0b10010000, 0b01100000},	// 0x50 - 80 - P
	{0b01111100, 0b10000010, 0b10000010, 0b10000100, 0b01111010},	// 0x51 - 81 - Q
	{0b11111110, 0b10010000, 0b10010000, 0b10010000, 0b01101110},	// 0x52 - 82 - R
	{0b01100100, 0b10010010, 0b10010010, 0b10010010, 0b01001100},	// 0x53 - 83 - S
	{0b10000000, 0b10000000, 0b11111110, 0b10000000, 0b10000000},	// 0x54 - 84 - T
	{0b11111100, 0b00000010, 0b00000010, 0b00000010, 0b11111100},	// 0x55 - 85 - U
	{0b11110000, 0b00001100, 0b00000010, 0b00001100, 0b11110000},	// 0x56 - 86 - V
	{0b11111110, 0b00000100, 0b00001000, 0b00000100, 0b11111110},	// 0x57 - 87 - W
	{0b11000110, 0b00101000, 0b00010000, 0b00101000, 0b11000110},	// 0x58 - 88 - X
	{0b10000000, 0b01000000, 0b00111110, 0b01000000, 0b10000000},	// 0x59 - 89 - Y
	{0b10000110, 0b10001010, 0b10010010, 0b10100010, 0b11000010},	// 0x5A - 90 - Z
	{0b00000000, 0b11111110, 0b10000010, 0b10000010, 0b00000000},	// 0x5B - 91 - [
	{0b10000000, 0b01100000, 0b00010000, 0b00001100, 0b00000010},	// 0x5C - 92 - \ backslash
	{0b00000000, 0b10000010, 0b10000010, 0b11111110, 0b00000000},	// 0x5D - 93 - ]
	{0b00100000, 0b01000000, 0b10000000, 0b01000000, 0b00100000},	// 0x5E - 94 - ^
	{0b00000001, 0b00000001, 0b00000001, 0b00000001, 0b00000001},	// 0x5F - 95 - _

	//0x60 - 0x6F
	{0b01000000, 0b00100000, 0b00000000, 0b00000000, 0b00000000},	// 0x60 - 96 - '
	{0b00000100, 0b00101010, 0b00101010, 0b00101010, 0b00011110},	// 0x61 - 97 - a
	{0b01111110, 0b00010010, 0b00100010, 0b00100010, 0b00011100},	// 0x62 - 98 - b
	{0b00011100, 0b00100010, 0b00100010, 0b00100010, 0b00010100},	// 0x63 - 99 - c
	{0b00011100, 0b00100010, 0b00100010, 0b00010010, 0b01111110},	// 0x64 - 100 - d
	{0b00011100, 0b00101010, 0b00101010, 0b00101010, 0b00011010},	// 0x65 - 101 - e
	{0b00100000, 0b01111110, 0b10100000, 0b10100000, 0b00000000},	// 0x66 - 102 - f
	{0b00011001, 0b00100101, 0b00100101, 0b00100101, 0b00111110},	// 0x67 - 103 - g
	{0b11111110, 0b00010000, 0b00100000, 0b00100000, 0b00011110},	// 0x68 - 104 - h
	{0b00000000, 0b00100000, 0b10111100, 0b00000010, 0b00000000},	// 0x69 - 105 - i
	{0b00000100, 0b00000010, 0b00000010, 0b00000010, 0b10111100},	// 0x6A - 106 - j
	{0b00000000, 0b11111110, 0b00001000, 0b00010100, 0b00100010},	// 0x6B - 107 - k
	{0b00000000, 0b10000000, 0b11111100, 0b00000010, 0b00000010},	// 0x6C - 108 - l
	{0b00111110, 0b00100000, 0b00011000, 0b00100000, 0b00011110},	// 0x6D - 109 - m
	{0b00111110, 0b00100000, 0b00100000, 0b00100000, 0b00011110},	// 0x6E - 110 - n
	{0b00011100, 0b00100010, 0b00100010, 0b00100010, 0b00011100},	// 0x6F - 111 - o
	
	//0x70 - 0x7F
	{0b00111111, 0b00010100, 0b00100100, 0b00100100, 0b00011000},	// 0x70 - 112 - p
	{0b00011000, 0b00100100, 0b00100100, 0b00010100, 0b00111111},	// 0x71 - 113 - q
	{0b00111110, 0b00010000, 0b00100000, 0b00100000, 0b00010000},	// 0x72 - 114 - r
	{0b00010010, 0b00101010, 0b00101010, 0b00101010, 0b00100100},	// 0x73 - 115 - s
	{0b00000000, 0b00100000, 0b11111100, 0b00100010, 0b00000000},	// 0x74 - 116 - t
	{0b00111100, 0b00000010, 0b00000010, 0b00000010, 0b00111110},	// 0x75 - 117 - u
	{0b00111000, 0b00000100, 0b00000010, 0b00000100, 0b00111000},	// 0x76 - 118 - v
	{0b00111100, 0b00000010, 0b00001110, 0b00000010, 0b00111110},	// 0x77 - 119 - w
	{0b00100010, 0b00010100, 0b00001000, 0b00010100, 0b00100010},	// 0x78 - 120 - x
	{0b00111001, 0b00000101, 0b00000101, 0b00000101, 0b00111110},	// 0x79 - 121 - y
	{0b00100010, 0b00100110, 0b00101010, 0b00110010, 0b00100010},	// 0x7A - 122 - z
	{0b00000000, 0b00010000, 0b01101100, 0b10000010, 0b00000000},	// 0x7B - 123 - {
	{0b00000000, 0b00000000, 0b11111110, 0b00000000, 0b00000000},	// 0x7C - 124 - |
	{0b00000000, 0b10000010, 0b01101100, 0b00010000, 0b00000000},	// 0x7D - 125 - }
	{0b00011000, 0b00100000, 0b00010000, 0b00001000, 0b00110000},	// 0x7E - 126 - ~
	{0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},	// 0x7F - 127 - DEL
};

