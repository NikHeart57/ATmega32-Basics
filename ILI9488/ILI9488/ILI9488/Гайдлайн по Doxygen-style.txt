В Doxygen есть множество специальных команд (тегов), которые начинаются с символа `@` (или `\`). Вот основные из них, сгруппированные по категориям:

### 1. Основные теги документации
| Тег          | Описание                                                                 |
|--------------|--------------------------------------------------------------------------|
| `@brief`     | Краткое описание (обычно для функций/классов)                           |
| `@details`   | Подробное описание                                                       |
| `@note`      | Важное примечание                                                        |
| `@attention` | Блок "Обратите внимание!"                                               |
| `@warning`   | Предупреждение о потенциальных проблемах                                 |
| `@todo`      | Заметка для будущих доработок                                           |
| `@bug`       | Описание известной ошибки                                                |

### 2. Документирование функций
| Тег          | Описание                                                                 |
|--------------|--------------------------------------------------------------------------|
| `@param`     | Описание параметра функции (`@param[in]`, `@param[out]`, `@param[in,out]`) |
| `@return`    | Описание возвращаемого значения                                         |
| `@retval`    | Описание конкретного значения возврата (`@retval OK Успешное выполнение`) |
| `@throw`     | Исключения, которые может выбрасывать функция                           |
| `@exception` | Аналог `@throw`                                                         |

### 3. Документирование классов/структур
| Тег           | Описание                                                                 |
|---------------|--------------------------------------------------------------------------|
| `@class`      | Документирование класса                                                 |
| `@interface`  | Документирование интерфейса                                             |
| `@extends`    | Указание родительского класса (`@extends BaseClass`)                    |
| `@implements` | Указание реализуемых интерфейсов                                        |

### 4. Ссылки и группировка
| Тег            | Описание                                                                 |
|----------------|--------------------------------------------------------------------------|
| `@see`         | Ссылка на связанную документацию (`@see other_function()`)               |
| `@link`        | Создание ссылки (`{@link Class#method текст ссылки}`)                    |
| `@ref`         | Ссылка на другой элемент (`@ref page_name "Текст ссылки"`)              |
| `@ingroup`     | Добавление в группу (`@ingroup group_name`)                              |
| `@defgroup`    | Определение группы (`@defgroup group_name Описание группы`)              |

### 5. Форматирование и примеры
| Тег            | Описание                                                                 |
|----------------|--------------------------------------------------------------------------|
| `@code`        | Начало блока кода (закрывается `@endcode`)                               |
| `@example`     | Вставка примера из файла (`@example example.cpp`)                        |
| `@verbatim`    | Буквальный вывод текста (без обработки Doxygen)                          |
| `@par`         | Параграф с заголовком (`@par Пример:\n Текст примера`)                   |

### 6. Для файлов и пространств имен
| Теg            | Описание                                                                 |
|----------------|--------------------------------------------------------------------------|
| `@file`        | Документирование файла                                                  |
| `@namespace`   | Документирование пространства имен                                      |
| `@package`     | Документирование Java-пакета или PHP-пакета                             |

### 7. Специальные теги
| Теg            | Описание                                                                 |
|----------------|--------------------------------------------------------------------------|
| `@deprecated`  | Помечает элемент как устаревший (`@deprecated Используйте new_func()`)  |
| `@since`       | Версия, в которой появился элемент (`@since v1.2.3`)                    |
| `@version`     | Версия компонента                                                       |
| `@author`      | Автор кода                                                              |
| `@date`        | Дата создания/изменения                                                 |

### Пример комплексного использования:
```cpp
/**
 * @file math_utils.h
 * @brief Набор математических функций
 * @author Ivan Petrov
 * @date 2023-01-15
 * @version 1.2
 */

/**
 * @brief Вычисление факториала
 * @details Реализует рекурсивное вычисление факториала.
 *          Для отрицательных чисел возвращает 1.
 * 
 * @param[in] n Входное число (должно быть <= 12 для 32-битных систем)
 * @return Факториал числа n
 * @retval 1 Если n < 0
 * @warning Не используйте для n > 12 (переполнение)
 * @note Для больших чисел используйте factorial64()
 * @see factorial64()
 * @deprecated В новых проектах используйте boost::math::factorial
 */
unsigned int factorial(unsigned int n);
```

### Специальные символы форматирования:
- `\n` - новая строка
- `\b` - жирный (`\bword\b`)
- `\e` - курсив (`\eword\e`)
- `\c` - моноширинный шрифт
- `\a` - альтернативный шрифт

### Как включить Doxygen в проекте:
1. Создайте файл `Doxyfile` (можно сгенерировать командой `doxygen -g`)
2. Добавьте комментарии в код по стандарту
3. Запустите генерацию документации: `doxygen Doxyfile`

Для C++ проектов особенно полезны теги `@tparam` (для шаблонных параметров) и `@override` (для переопределенных методов).