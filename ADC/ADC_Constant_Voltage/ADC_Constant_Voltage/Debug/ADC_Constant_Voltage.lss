
ADC_Constant_Voltage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031c  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e8  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001685  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  64:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z5setupv>:
#include <stdio.h>
#include <stdlib.h>

void setup()
{
	DDRC = 0b00011100;   // Выходы для желт.(PC2), зел.(PC3), красн.(PC4) лампочек (1)
  6c:	8c e1       	ldi	r24, 0x1C	; 28
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00010000;   // PD4 - PWM
  70:	80 e1       	ldi	r24, 0x10	; 16
  72:	81 bb       	out	0x11, r24	; 17
	
	ADCSRA |= (1 << ADEN);                                // Разрешаем работу АЦП (1)
  74:	86 b1       	in	r24, 0x06	; 6
  76:	80 68       	ori	r24, 0x80	; 128
  78:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC);                                // Запуск АЦП (1)
  7a:	86 b1       	in	r24, 0x06	; 6
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);     // Задаю делитель N для определения частоты дискретизации f_ацп = f_цпу / N;
  80:	86 b1       	in	r24, 0x06	; 6
  82:	87 60       	ori	r24, 0x07	; 7
  84:	86 b9       	out	0x06, r24	; 6
	                                                      // при ADPS0..2 = 111       => f_ацп = 7372800 / 128 = 57600Гц
	ADMUX  |= (1 << REFS1)|(1 << REFS0);                  // Задаю ИОН, REFS0..1 = 11 => внутренний ИОН, U_ион = 2,56В
  86:	87 b1       	in	r24, 0x07	; 7
  88:	80 6c       	ori	r24, 0xC0	; 192
  8a:	87 b9       	out	0x07, r24	; 7
	ADMUX  |= (0 << ADLAR);                               // Правосторонее выравнивание ADLAR = 0; ADCH, ADCL
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	87 b9       	out	0x07, r24	; 7
	ADMUX  |= (0 << MUX4)|(0 << MUX3)|(1 << MUX2)|(1 << MUX1)|(1 << MUX0);  // Выбор пина АЦП; MX0..4 = 00111 => ADC7(PA7);
  90:	87 b1       	in	r24, 0x07	; 7
  92:	87 60       	ori	r24, 0x07	; 7
  94:	87 b9       	out	0x07, r24	; 7
	
	
	sei();
  96:	78 94       	sei
	TCCR1A |= (0 << COM1A1)|(0 << COM1A0)|(1 << COM1B1)|(0 << COM1B0)|(0 << FOC1A)|(0 << FOC1B)|(0 << WGM11)|(0 << WGM10);
  98:	8f b5       	in	r24, 0x2f	; 47
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 << ICNC1) |(0 << ICES1) |(1 << WGM13) |(0 << WGM12) |(0 << CS12) |(0 << CS11) |(1 << CS10);
  9e:	8e b5       	in	r24, 0x2e	; 46
  a0:	81 61       	ori	r24, 0x11	; 17
  a2:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 255;   // Верхнее значение, до которого идет счет
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	97 bd       	out	0x27, r25	; 39
  aa:	86 bd       	out	0x26, r24	; 38
	OCR1B = 0;    // Регистр сравнения, при совпадении с которым меняется состояние вывода OC1B
  ac:	19 bc       	out	0x29, r1	; 41
  ae:	18 bc       	out	0x28, r1	; 40
  b0:	08 95       	ret

000000b2 <main>:
}


int main(void)
{
	setup();
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z5setupv>
	int counter = 0;
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0xe>
		
		
		// Логика АЦП													(Будет держать напряжение 2.1(+-0,5)В - 860(+-20)ADC
		if (ADC < 840)									// Если U_in < 2.05В (U_out < 2.05В; ADC < 840)	- загорится желтая лампа (PC2)
		{
			counter = 0;
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
	int counter = 0;
	
	while (1)
	{
		// Рестарт АЦП
		if (ADCSRA & (1 << ADIF))						// Если флаг ADIF = 0 (т.е.ADCSRA&(1<<ADIF)=true) значит преобразование выполнилось
  c0:	34 9b       	sbis	0x06, 4	; 6
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <main+0x1e>
		{
			ADCSRA |= (1 << ADIF);						// Установка флага ADIF, чтобы позволить дальнейшую работу АЦП
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	86 b9       	out	0x06, r24	; 6
			ADCSRA |= (1 << ADSC);						// Запуск АЦП
  ca:	86 b1       	in	r24, 0x06	; 6
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	86 b9       	out	0x06, r24	; 6
		}		
		
		
		
		// Логика АЦП													(Будет держать напряжение 2.1(+-0,5)В - 860(+-20)ADC
		if (ADC < 840)									// Если U_in < 2.05В (U_out < 2.05В; ADC < 840)	- загорится желтая лампа (PC2)
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	88 34       	cpi	r24, 0x48	; 72
  d6:	93 40       	sbci	r25, 0x03	; 3
  d8:	b8 f4       	brcc	.+46     	; 0x108 <main+0x56>
		{
			counter = 0;
			PORTC = (1 << PC2)|(0 << PC3)|(0 << PC4);
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	85 bb       	out	0x15, r24	; 21
			if (OCR1B < ICR1)
  de:	28 b5       	in	r18, 0x28	; 40
  e0:	39 b5       	in	r19, 0x29	; 41
  e2:	86 b5       	in	r24, 0x26	; 38
  e4:	97 b5       	in	r25, 0x27	; 39
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	40 f7       	brcc	.-48     	; 0xbc <main+0xa>
			{
				OCR1B++;
  ec:	88 b5       	in	r24, 0x28	; 40
  ee:	99 b5       	in	r25, 0x29	; 41
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	99 bd       	out	0x29, r25	; 41
  f4:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	97 e4       	ldi	r25, 0x47	; 71
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x48>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x4e>
 100:	00 00       	nop
		
		
		// Логика АЦП													(Будет держать напряжение 2.1(+-0,5)В - 860(+-20)ADC
		if (ADC < 840)									// Если U_in < 2.05В (U_out < 2.05В; ADC < 840)	- загорится желтая лампа (PC2)
		{
			counter = 0;
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	dc cf       	rjmp	.-72     	; 0xc0 <main+0xe>
			{
				OCR1B++;
				_delay_ms(10);
			}
		}
		else if	(ADC >= 840 && ADC <= 880)				// Если 2,05В >= U_in <= 2,15В					- загорится зеленая лампа (PC3)
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	95 b1       	in	r25, 0x05	; 5
 10c:	88 34       	cpi	r24, 0x48	; 72
 10e:	93 40       	sbci	r25, 0x03	; 3
 110:	38 f0       	brcs	.+14     	; 0x120 <main+0x6e>
 112:	84 b1       	in	r24, 0x04	; 4
 114:	95 b1       	in	r25, 0x05	; 5
 116:	81 37       	cpi	r24, 0x71	; 113
 118:	93 40       	sbci	r25, 0x03	; 3
 11a:	20 f0       	brcs	.+8      	; 0x124 <main+0x72>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	03 c0       	rjmp	.+6      	; 0x126 <main+0x74>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0x74>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	88 23       	and	r24, r24
 128:	b1 f0       	breq	.+44     	; 0x156 <main+0xa4>
		{
			PORTC = (0 << PC2)|(1 << PC3)|(0 << PC4);
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	97 e4       	ldi	r25, 0x47	; 71
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x80>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x86>
 138:	00 00       	nop
			_delay_ms(10);
			counter++;
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
			if (counter == 100)							// Эта операция нужна чтобы минимизировать OCR1B. Это уменьшает ток через транзистор. Она не обязательна, ее можно убрать
 13e:	24 36       	cpi	r18, 0x64	; 100
 140:	31 05       	cpc	r19, r1
 142:	09 f0       	breq	.+2      	; 0x146 <main+0x94>
 144:	bd cf       	rjmp	.-134    	; 0xc0 <main+0xe>
			{
				counter = 0;
				OCR1B--;
 146:	88 b5       	in	r24, 0x28	; 40
 148:	99 b5       	in	r25, 0x29	; 41
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	99 bd       	out	0x29, r25	; 41
 14e:	88 bd       	out	0x28, r24	; 40
			PORTC = (0 << PC2)|(1 << PC3)|(0 << PC4);
			_delay_ms(10);
			counter++;
			if (counter == 100)							// Эта операция нужна чтобы минимизировать OCR1B. Это уменьшает ток через транзистор. Она не обязательна, ее можно убрать
			{
				counter = 0;
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b5 cf       	rjmp	.-150    	; 0xc0 <main+0xe>
				OCR1B--;
			}
		}
		else											// Если U_in > 2.15В (U_out > 2.15В; ADC > 860)	- загорится красная лампа (PC4)
		{
			PORTC = (0 << PC2)|(0 << PC3)|(1 << PC4);
 156:	80 e1       	ldi	r24, 0x10	; 16
 158:	85 bb       	out	0x15, r24	; 21
			if (OCR1B != 0)
 15a:	88 b5       	in	r24, 0x28	; 40
 15c:	99 b5       	in	r25, 0x29	; 41
 15e:	89 2b       	or	r24, r25
 160:	09 f4       	brne	.+2      	; 0x164 <main+0xb2>
 162:	ae cf       	rjmp	.-164    	; 0xc0 <main+0xe>
			{
				OCR1B--;
 164:	88 b5       	in	r24, 0x28	; 40
 166:	99 b5       	in	r25, 0x29	; 41
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	99 bd       	out	0x29, r25	; 41
 16c:	88 bd       	out	0x28, r24	; 40
 16e:	83 e3       	ldi	r24, 0x33	; 51
 170:	97 e0       	ldi	r25, 0x07	; 7
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0xc0>
 176:	a4 cf       	rjmp	.-184    	; 0xc0 <main+0xe>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
