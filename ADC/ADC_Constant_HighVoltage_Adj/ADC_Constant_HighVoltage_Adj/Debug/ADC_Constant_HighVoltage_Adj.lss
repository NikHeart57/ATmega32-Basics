
ADC_Constant_HighVoltage_Adj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000005ae  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000561  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  000012cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fa  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005a  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  7a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z5setupv>:
unsigned int	   PushPC1 = 10;


void setup()
{
	DDRC = 0b00011100;				// Выходы для желт.(PC2), зел.(PC3), красн.(PC4) лампочек (1); Кнопки PC1 и PC0;
  82:	8c e1       	ldi	r24, 0x1C	; 28
  84:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << PC1)|(1 << PC0); // Кнопки PC1 и PC0;
  86:	85 b3       	in	r24, 0x15	; 21
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	85 bb       	out	0x15, r24	; 21
	DDRD = 0b00010000;				// Выход PWM - PD4 (1)
  8c:	80 e1       	ldi	r24, 0x10	; 16
  8e:	81 bb       	out	0x11, r24	; 17
	DDRA = 0b00000000;				// Все входы  (0)
  90:	1a ba       	out	0x1a, r1	; 26
	
	
	ADCSRA |= (1 << ADEN);                                // Разрешаем работу АЦП (1)
  92:	86 b1       	in	r24, 0x06	; 6
  94:	80 68       	ori	r24, 0x80	; 128
  96:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC);                                // Запуск АЦП (1)
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);     // Задаю делитель N для определения частоты дискретизации f_ацп = f_цпу / N;
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	87 60       	ori	r24, 0x07	; 7
  a2:	86 b9       	out	0x06, r24	; 6
	                                                      // при ADPS2..0 = 111       => f_ацп = 7372800 / 128 = 57600Гц
	ADMUX  |= (1 << REFS1)|(1 << REFS0);                  // Задаю ИОН, REFS2..0 = 11 => внутренний ИОН, U_ион = 2,56В
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	80 6c       	ori	r24, 0xC0	; 192
  a8:	87 b9       	out	0x07, r24	; 7
	ADMUX  |= (0 << ADLAR);                               // Правосторонее выравнивание ADLAR = 0; ADCH, ADCL
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	87 b9       	out	0x07, r24	; 7
	ADMUX  |= (0 << MUX4)|(0 << MUX3)|(1 << MUX2)|(1 << MUX1)|(1 << MUX0);  // Выбор пина АЦП; MX4..0 = 00111 => ADC7(PA7);
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	87 b9       	out	0x07, r24	; 7
	
	
	sei();
  b4:	78 94       	sei
	TCCR1A |= (0 << COM1A1)|(0 << COM1A0)|(1 << COM1B1)|(0 << COM1B0)|(0 << FOC1A)|(0 << FOC1B)|(0 << WGM11)|(0 << WGM10);
  b6:	8f b5       	in	r24, 0x2f	; 47
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 << ICNC1) |(0 << ICES1) |(1 << WGM13) |(0 << WGM12) |(0 << CS12) |(0 << CS11) |(1 << CS10);
  bc:	8e b5       	in	r24, 0x2e	; 46
  be:	81 61       	ori	r24, 0x11	; 17
  c0:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 255;		// Верхнее значение, до которого идет счет
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	97 bd       	out	0x27, r25	; 39
  c8:	86 bd       	out	0x26, r24	; 38
	OCR1B = 1;		// Регистр сравнения, при совпадении с которым меняется состояние вывода OC1B
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	99 bd       	out	0x29, r25	; 41
  d0:	88 bd       	out	0x28, r24	; 40
  d2:	08 95       	ret

000000d4 <_Z10ADC_rebootv>:
}

void ADC_reboot()
{
	if (ADCSRA & (1 << ADIF))			// Если флаг ADIF = 0 (т.е.ADCSRA&(1<<ADIF)=true) значит преобразование выполнилось
  d4:	34 9b       	sbis	0x06, 4	; 6
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <_Z10ADC_rebootv+0x10>
	{
		ADCSRA |= (1 << ADIF);			// Установка флага ADIF, чтобы позволить дальнейшую работу АЦП
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	86 b9       	out	0x06, r24	; 6
		ADCSRA |= (1 << ADSC);			// Запуск АЦП
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	86 b9       	out	0x06, r24	; 6
  e4:	08 95       	ret

000000e6 <_Z15ADC_calculationv>:
}

void ADC_calculation()
{
	float float_target = 1;
	float_target = float_target * 1024 * voltage;
  e6:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <voltage>
  ea:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <voltage+0x1>
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__floatunsisf>
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	40 e8       	ldi	r20, 0x80	; 128
  fc:	54 e4       	ldi	r21, 0x44	; 68
  fe:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__mulsf3>
	float_target = float_target / 98.5;					// 98.5 - это эмперическкий кофицент делителя (расчетный - 101 = 1Мом/10кОм)
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	45 ec       	ldi	r20, 0xC5	; 197
 108:	52 e4       	ldi	r21, 0x42	; 66
 10a:	0e 94 32 01 	call	0x264	; 0x264 <__divsf3>
	float_target = float_target / 2.56;
 10e:	2a e0       	ldi	r18, 0x0A	; 10
 110:	37 ed       	ldi	r19, 0xD7	; 215
 112:	43 e2       	ldi	r20, 0x23	; 35
 114:	50 e4       	ldi	r21, 0x40	; 64
 116:	0e 94 32 01 	call	0x264	; 0x264 <__divsf3>
	ADC_target = (int)float_target;
 11a:	0e 94 a4 01 	call	0x348	; 0x348 <__fixsfsi>
 11e:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <ADC_target+0x1>
 122:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <ADC_target>
			
	if (ADC_target >= 1024 - ADC_tolerance)
 126:	6e 3f       	cpi	r22, 0xFE	; 254
 128:	73 40       	sbci	r23, 0x03	; 3
 12a:	30 f0       	brcs	.+12     	; 0x138 <_Z15ADC_calculationv+0x52>
	{
		ADC_target = 1024 - ADC_tolerance;
 12c:	8e ef       	ldi	r24, 0xFE	; 254
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ADC_target+0x1>
 134:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ADC_target>
 138:	08 95       	ret

0000013a <_Z9ButtonPC0v>:
	}
}

void ButtonPC0()
{
	if (!(PINC & (1 << PINC0)))
 13a:	98 99       	sbic	0x13, 0	; 19
 13c:	19 c0       	rjmp	.+50     	; 0x170 <_Z9ButtonPC0v+0x36>
	{
		if (PushPC0 == 0 && voltage > 20)
 13e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <PushPC0>
 142:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <PushPC0+0x1>
 146:	89 2b       	or	r24, r25
 148:	f1 f4       	brne	.+60     	; 0x186 <_Z9ButtonPC0v+0x4c>
 14a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <voltage>
 14e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <voltage+0x1>
 152:	85 31       	cpi	r24, 0x15	; 21
 154:	91 05       	cpc	r25, r1
 156:	b8 f0       	brcs	.+46     	; 0x186 <_Z9ButtonPC0v+0x4c>
		{
			// Код холодной кнопки
			PushPC0 = 20;
 158:	24 e1       	ldi	r18, 0x14	; 20
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <PushPC0+0x1>
 160:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <PushPC0>
			voltage--;
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <voltage+0x1>
 16a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <voltage>
 16e:	08 95       	ret
		}
	}
	else
	{
		if (PushPC0 > 0)
 170:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <PushPC0>
 174:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <PushPC0+0x1>
 178:	00 97       	sbiw	r24, 0x00	; 0
 17a:	29 f0       	breq	.+10     	; 0x186 <_Z9ButtonPC0v+0x4c>
		{
			PushPC0--;
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <PushPC0+0x1>
 182:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <PushPC0>
 186:	08 95       	ret

00000188 <_Z9ButtonPC1v>:
	}
}

void ButtonPC1()
{
	if (!(PINC & (1 << PINC1)))
 188:	99 99       	sbic	0x13, 1	; 19
 18a:	19 c0       	rjmp	.+50     	; 0x1be <_Z9ButtonPC1v+0x36>
	{
		if (PushPC1 == 0 && voltage < 240)
 18c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 190:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 194:	89 2b       	or	r24, r25
 196:	f1 f4       	brne	.+60     	; 0x1d4 <_Z9ButtonPC1v+0x4c>
 198:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <voltage>
 19c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <voltage+0x1>
 1a0:	80 3f       	cpi	r24, 0xF0	; 240
 1a2:	91 05       	cpc	r25, r1
 1a4:	b8 f4       	brcc	.+46     	; 0x1d4 <_Z9ButtonPC1v+0x4c>
		{
			// Код холодной кнопки
			PushPC1 = 20;
 1a6:	24 e1       	ldi	r18, 0x14	; 20
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ae:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			voltage++;
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <voltage+0x1>
 1b8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <voltage>
 1bc:	08 95       	ret
		}
	}
	else
	{
		if (PushPC1 > 0)
 1be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	29 f0       	breq	.+10     	; 0x1d4 <_Z9ButtonPC1v+0x4c>
		{
			PushPC1--;
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d4:	08 95       	ret

000001d6 <main>:
}


int main(void)
{
	setup();
 1d6:	0e 94 41 00 	call	0x82	; 0x82 <_Z5setupv>
	
	while (1)
	{
		ButtonPC0();
 1da:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z9ButtonPC0v>
		ButtonPC1();
 1de:	0e 94 c4 00 	call	0x188	; 0x188 <_Z9ButtonPC1v>
		
		ADC_reboot();								// Рестарт АЦП
 1e2:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10ADC_rebootv>
		ADC_calculation();							// Расчет АЦП в соортветствии с требуемым напряжением
 1e6:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z15ADC_calculationv>
		
		// Логика АЦП
		if (ADC < ADC_target - ADC_tolerance)												// загорится желтая лампа (PC2)
 1ea:	44 b1       	in	r20, 0x04	; 4
 1ec:	55 b1       	in	r21, 0x05	; 5
 1ee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ADC_target>
 1f2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ADC_target+0x1>
 1f6:	9c 01       	movw	r18, r24
 1f8:	22 50       	subi	r18, 0x02	; 2
 1fa:	31 09       	sbc	r19, r1
 1fc:	42 17       	cp	r20, r18
 1fe:	53 07       	cpc	r21, r19
 200:	80 f4       	brcc	.+32     	; 0x222 <main+0x4c>
		{
			PORTC = (1 << PC1)|(1 << PC0)|(1 << PC2)|(0 << PC3)|(0 << PC4);
 202:	87 e0       	ldi	r24, 0x07	; 7
 204:	85 bb       	out	0x15, r24	; 21
			if (OCR1B < (ICR1 - 2))
 206:	28 b5       	in	r18, 0x28	; 40
 208:	39 b5       	in	r19, 0x29	; 41
 20a:	86 b5       	in	r24, 0x26	; 38
 20c:	97 b5       	in	r25, 0x27	; 39
 20e:	02 97       	sbiw	r24, 0x02	; 2
 210:	28 17       	cp	r18, r24
 212:	39 07       	cpc	r19, r25
 214:	10 f7       	brcc	.-60     	; 0x1da <main+0x4>
			{
				OCR1B++;
 216:	88 b5       	in	r24, 0x28	; 40
 218:	99 b5       	in	r25, 0x29	; 41
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	99 bd       	out	0x29, r25	; 41
 21e:	88 bd       	out	0x28, r24	; 40
 220:	dc cf       	rjmp	.-72     	; 0x1da <main+0x4>
			}
		}
		else if	(ADC >= ADC_target - ADC_tolerance && ADC <= ADC_target + ADC_tolerance)	// загорится зеленая лампа (PC3)
 222:	44 b1       	in	r20, 0x04	; 4
 224:	55 b1       	in	r21, 0x05	; 5
 226:	42 17       	cp	r20, r18
 228:	53 07       	cpc	r21, r19
 22a:	40 f0       	brcs	.+16     	; 0x23c <main+0x66>
 22c:	24 b1       	in	r18, 0x04	; 4
 22e:	35 b1       	in	r19, 0x05	; 5
 230:	02 96       	adiw	r24, 0x02	; 2
 232:	82 17       	cp	r24, r18
 234:	93 07       	cpc	r25, r19
 236:	20 f4       	brcc	.+8      	; 0x240 <main+0x6a>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	03 c0       	rjmp	.+6      	; 0x242 <main+0x6c>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	01 c0       	rjmp	.+2      	; 0x242 <main+0x6c>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	88 23       	and	r24, r24
 244:	19 f0       	breq	.+6      	; 0x24c <main+0x76>
		{
			PORTC = (1 << PC1)|(1 << PC0)|(0 << PC2)|(1 << PC3)|(0 << PC4);
 246:	8b e0       	ldi	r24, 0x0B	; 11
 248:	85 bb       	out	0x15, r24	; 21
 24a:	c7 cf       	rjmp	.-114    	; 0x1da <main+0x4>
		}
		else																				// загорится красная лампа (PC4)
		{
			PORTC = (1 << PC1)|(1 << PC0)|(0 << PC2)|(0 << PC3)|(1 << PC4);
 24c:	83 e1       	ldi	r24, 0x13	; 19
 24e:	85 bb       	out	0x15, r24	; 21
			if (OCR1B > 1)
 250:	88 b5       	in	r24, 0x28	; 40
 252:	99 b5       	in	r25, 0x29	; 41
 254:	02 97       	sbiw	r24, 0x02	; 2
 256:	08 f2       	brcs	.-126    	; 0x1da <main+0x4>
			{
				OCR1B--;
 258:	88 b5       	in	r24, 0x28	; 40
 25a:	99 b5       	in	r25, 0x29	; 41
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	99 bd       	out	0x29, r25	; 41
 260:	88 bd       	out	0x28, r24	; 40
 262:	bb cf       	rjmp	.-138    	; 0x1da <main+0x4>

00000264 <__divsf3>:
 264:	0e 94 46 01 	call	0x28c	; 0x28c <__divsf3x>
 268:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__fp_round>
 26c:	0e 94 27 02 	call	0x44e	; 0x44e <__fp_pscB>
 270:	58 f0       	brcs	.+22     	; 0x288 <__divsf3+0x24>
 272:	0e 94 20 02 	call	0x440	; 0x440 <__fp_pscA>
 276:	40 f0       	brcs	.+16     	; 0x288 <__divsf3+0x24>
 278:	29 f4       	brne	.+10     	; 0x284 <__divsf3+0x20>
 27a:	5f 3f       	cpi	r21, 0xFF	; 255
 27c:	29 f0       	breq	.+10     	; 0x288 <__divsf3+0x24>
 27e:	0c 94 17 02 	jmp	0x42e	; 0x42e <__fp_inf>
 282:	51 11       	cpse	r21, r1
 284:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_szero>
 288:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__fp_nan>

0000028c <__divsf3x>:
 28c:	0e 94 3f 02 	call	0x47e	; 0x47e <__fp_split3>
 290:	68 f3       	brcs	.-38     	; 0x26c <__divsf3+0x8>

00000292 <__divsf3_pse>:
 292:	99 23       	and	r25, r25
 294:	b1 f3       	breq	.-20     	; 0x282 <__divsf3+0x1e>
 296:	55 23       	and	r21, r21
 298:	91 f3       	breq	.-28     	; 0x27e <__divsf3+0x1a>
 29a:	95 1b       	sub	r25, r21
 29c:	55 0b       	sbc	r21, r21
 29e:	bb 27       	eor	r27, r27
 2a0:	aa 27       	eor	r26, r26
 2a2:	62 17       	cp	r22, r18
 2a4:	73 07       	cpc	r23, r19
 2a6:	84 07       	cpc	r24, r20
 2a8:	38 f0       	brcs	.+14     	; 0x2b8 <__divsf3_pse+0x26>
 2aa:	9f 5f       	subi	r25, 0xFF	; 255
 2ac:	5f 4f       	sbci	r21, 0xFF	; 255
 2ae:	22 0f       	add	r18, r18
 2b0:	33 1f       	adc	r19, r19
 2b2:	44 1f       	adc	r20, r20
 2b4:	aa 1f       	adc	r26, r26
 2b6:	a9 f3       	breq	.-22     	; 0x2a2 <__divsf3_pse+0x10>
 2b8:	35 d0       	rcall	.+106    	; 0x324 <__divsf3_pse+0x92>
 2ba:	0e 2e       	mov	r0, r30
 2bc:	3a f0       	brmi	.+14     	; 0x2cc <__divsf3_pse+0x3a>
 2be:	e0 e8       	ldi	r30, 0x80	; 128
 2c0:	32 d0       	rcall	.+100    	; 0x326 <__divsf3_pse+0x94>
 2c2:	91 50       	subi	r25, 0x01	; 1
 2c4:	50 40       	sbci	r21, 0x00	; 0
 2c6:	e6 95       	lsr	r30
 2c8:	00 1c       	adc	r0, r0
 2ca:	ca f7       	brpl	.-14     	; 0x2be <__divsf3_pse+0x2c>
 2cc:	2b d0       	rcall	.+86     	; 0x324 <__divsf3_pse+0x92>
 2ce:	fe 2f       	mov	r31, r30
 2d0:	29 d0       	rcall	.+82     	; 0x324 <__divsf3_pse+0x92>
 2d2:	66 0f       	add	r22, r22
 2d4:	77 1f       	adc	r23, r23
 2d6:	88 1f       	adc	r24, r24
 2d8:	bb 1f       	adc	r27, r27
 2da:	26 17       	cp	r18, r22
 2dc:	37 07       	cpc	r19, r23
 2de:	48 07       	cpc	r20, r24
 2e0:	ab 07       	cpc	r26, r27
 2e2:	b0 e8       	ldi	r27, 0x80	; 128
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <__divsf3_pse+0x56>
 2e6:	bb 0b       	sbc	r27, r27
 2e8:	80 2d       	mov	r24, r0
 2ea:	bf 01       	movw	r22, r30
 2ec:	ff 27       	eor	r31, r31
 2ee:	93 58       	subi	r25, 0x83	; 131
 2f0:	5f 4f       	sbci	r21, 0xFF	; 255
 2f2:	3a f0       	brmi	.+14     	; 0x302 <__divsf3_pse+0x70>
 2f4:	9e 3f       	cpi	r25, 0xFE	; 254
 2f6:	51 05       	cpc	r21, r1
 2f8:	78 f0       	brcs	.+30     	; 0x318 <__divsf3_pse+0x86>
 2fa:	0c 94 17 02 	jmp	0x42e	; 0x42e <__fp_inf>
 2fe:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_szero>
 302:	5f 3f       	cpi	r21, 0xFF	; 255
 304:	e4 f3       	brlt	.-8      	; 0x2fe <__divsf3_pse+0x6c>
 306:	98 3e       	cpi	r25, 0xE8	; 232
 308:	d4 f3       	brlt	.-12     	; 0x2fe <__divsf3_pse+0x6c>
 30a:	86 95       	lsr	r24
 30c:	77 95       	ror	r23
 30e:	67 95       	ror	r22
 310:	b7 95       	ror	r27
 312:	f7 95       	ror	r31
 314:	9f 5f       	subi	r25, 0xFF	; 255
 316:	c9 f7       	brne	.-14     	; 0x30a <__divsf3_pse+0x78>
 318:	88 0f       	add	r24, r24
 31a:	91 1d       	adc	r25, r1
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	97 f9       	bld	r25, 7
 322:	08 95       	ret
 324:	e1 e0       	ldi	r30, 0x01	; 1
 326:	66 0f       	add	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	88 1f       	adc	r24, r24
 32c:	bb 1f       	adc	r27, r27
 32e:	62 17       	cp	r22, r18
 330:	73 07       	cpc	r23, r19
 332:	84 07       	cpc	r24, r20
 334:	ba 07       	cpc	r27, r26
 336:	20 f0       	brcs	.+8      	; 0x340 <__divsf3_pse+0xae>
 338:	62 1b       	sub	r22, r18
 33a:	73 0b       	sbc	r23, r19
 33c:	84 0b       	sbc	r24, r20
 33e:	ba 0b       	sbc	r27, r26
 340:	ee 1f       	adc	r30, r30
 342:	88 f7       	brcc	.-30     	; 0x326 <__divsf3_pse+0x94>
 344:	e0 95       	com	r30
 346:	08 95       	ret

00000348 <__fixsfsi>:
 348:	0e 94 ab 01 	call	0x356	; 0x356 <__fixunssfsi>
 34c:	68 94       	set
 34e:	b1 11       	cpse	r27, r1
 350:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_szero>
 354:	08 95       	ret

00000356 <__fixunssfsi>:
 356:	0e 94 47 02 	call	0x48e	; 0x48e <__fp_splitA>
 35a:	88 f0       	brcs	.+34     	; 0x37e <__fixunssfsi+0x28>
 35c:	9f 57       	subi	r25, 0x7F	; 127
 35e:	98 f0       	brcs	.+38     	; 0x386 <__fixunssfsi+0x30>
 360:	b9 2f       	mov	r27, r25
 362:	99 27       	eor	r25, r25
 364:	b7 51       	subi	r27, 0x17	; 23
 366:	b0 f0       	brcs	.+44     	; 0x394 <__fixunssfsi+0x3e>
 368:	e1 f0       	breq	.+56     	; 0x3a2 <__fixunssfsi+0x4c>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	88 1f       	adc	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	1a f0       	brmi	.+6      	; 0x37a <__fixunssfsi+0x24>
 374:	ba 95       	dec	r27
 376:	c9 f7       	brne	.-14     	; 0x36a <__fixunssfsi+0x14>
 378:	14 c0       	rjmp	.+40     	; 0x3a2 <__fixunssfsi+0x4c>
 37a:	b1 30       	cpi	r27, 0x01	; 1
 37c:	91 f0       	breq	.+36     	; 0x3a2 <__fixunssfsi+0x4c>
 37e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fp_zero>
 382:	b1 e0       	ldi	r27, 0x01	; 1
 384:	08 95       	ret
 386:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_zero>
 38a:	67 2f       	mov	r22, r23
 38c:	78 2f       	mov	r23, r24
 38e:	88 27       	eor	r24, r24
 390:	b8 5f       	subi	r27, 0xF8	; 248
 392:	39 f0       	breq	.+14     	; 0x3a2 <__fixunssfsi+0x4c>
 394:	b9 3f       	cpi	r27, 0xF9	; 249
 396:	cc f3       	brlt	.-14     	; 0x38a <__fixunssfsi+0x34>
 398:	86 95       	lsr	r24
 39a:	77 95       	ror	r23
 39c:	67 95       	ror	r22
 39e:	b3 95       	inc	r27
 3a0:	d9 f7       	brne	.-10     	; 0x398 <__fixunssfsi+0x42>
 3a2:	3e f4       	brtc	.+14     	; 0x3b2 <__fixunssfsi+0x5c>
 3a4:	90 95       	com	r25
 3a6:	80 95       	com	r24
 3a8:	70 95       	com	r23
 3aa:	61 95       	neg	r22
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	8f 4f       	sbci	r24, 0xFF	; 255
 3b0:	9f 4f       	sbci	r25, 0xFF	; 255
 3b2:	08 95       	ret

000003b4 <__floatunsisf>:
 3b4:	e8 94       	clt
 3b6:	09 c0       	rjmp	.+18     	; 0x3ca <__floatsisf+0x12>

000003b8 <__floatsisf>:
 3b8:	97 fb       	bst	r25, 7
 3ba:	3e f4       	brtc	.+14     	; 0x3ca <__floatsisf+0x12>
 3bc:	90 95       	com	r25
 3be:	80 95       	com	r24
 3c0:	70 95       	com	r23
 3c2:	61 95       	neg	r22
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	8f 4f       	sbci	r24, 0xFF	; 255
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	99 23       	and	r25, r25
 3cc:	a9 f0       	breq	.+42     	; 0x3f8 <__floatsisf+0x40>
 3ce:	f9 2f       	mov	r31, r25
 3d0:	96 e9       	ldi	r25, 0x96	; 150
 3d2:	bb 27       	eor	r27, r27
 3d4:	93 95       	inc	r25
 3d6:	f6 95       	lsr	r31
 3d8:	87 95       	ror	r24
 3da:	77 95       	ror	r23
 3dc:	67 95       	ror	r22
 3de:	b7 95       	ror	r27
 3e0:	f1 11       	cpse	r31, r1
 3e2:	f8 cf       	rjmp	.-16     	; 0x3d4 <__floatsisf+0x1c>
 3e4:	fa f4       	brpl	.+62     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3e6:	bb 0f       	add	r27, r27
 3e8:	11 f4       	brne	.+4      	; 0x3ee <__floatsisf+0x36>
 3ea:	60 ff       	sbrs	r22, 0
 3ec:	1b c0       	rjmp	.+54     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3ee:	6f 5f       	subi	r22, 0xFF	; 255
 3f0:	7f 4f       	sbci	r23, 0xFF	; 255
 3f2:	8f 4f       	sbci	r24, 0xFF	; 255
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	16 c0       	rjmp	.+44     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3f8:	88 23       	and	r24, r24
 3fa:	11 f0       	breq	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	96 e9       	ldi	r25, 0x96	; 150
 3fe:	11 c0       	rjmp	.+34     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 400:	77 23       	and	r23, r23
 402:	21 f0       	breq	.+8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 404:	9e e8       	ldi	r25, 0x8E	; 142
 406:	87 2f       	mov	r24, r23
 408:	76 2f       	mov	r23, r22
 40a:	05 c0       	rjmp	.+10     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 40c:	66 23       	and	r22, r22
 40e:	71 f0       	breq	.+28     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 410:	96 e8       	ldi	r25, 0x86	; 134
 412:	86 2f       	mov	r24, r22
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	2a f0       	brmi	.+10     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 41a:	9a 95       	dec	r25
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	88 1f       	adc	r24, r24
 422:	da f7       	brpl	.-10     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 424:	88 0f       	add	r24, r24
 426:	96 95       	lsr	r25
 428:	87 95       	ror	r24
 42a:	97 f9       	bld	r25, 7
 42c:	08 95       	ret

0000042e <__fp_inf>:
 42e:	97 f9       	bld	r25, 7
 430:	9f 67       	ori	r25, 0x7F	; 127
 432:	80 e8       	ldi	r24, 0x80	; 128
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	08 95       	ret

0000043a <__fp_nan>:
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	80 ec       	ldi	r24, 0xC0	; 192
 43e:	08 95       	ret

00000440 <__fp_pscA>:
 440:	00 24       	eor	r0, r0
 442:	0a 94       	dec	r0
 444:	16 16       	cp	r1, r22
 446:	17 06       	cpc	r1, r23
 448:	18 06       	cpc	r1, r24
 44a:	09 06       	cpc	r0, r25
 44c:	08 95       	ret

0000044e <__fp_pscB>:
 44e:	00 24       	eor	r0, r0
 450:	0a 94       	dec	r0
 452:	12 16       	cp	r1, r18
 454:	13 06       	cpc	r1, r19
 456:	14 06       	cpc	r1, r20
 458:	05 06       	cpc	r0, r21
 45a:	08 95       	ret

0000045c <__fp_round>:
 45c:	09 2e       	mov	r0, r25
 45e:	03 94       	inc	r0
 460:	00 0c       	add	r0, r0
 462:	11 f4       	brne	.+4      	; 0x468 <__fp_round+0xc>
 464:	88 23       	and	r24, r24
 466:	52 f0       	brmi	.+20     	; 0x47c <__fp_round+0x20>
 468:	bb 0f       	add	r27, r27
 46a:	40 f4       	brcc	.+16     	; 0x47c <__fp_round+0x20>
 46c:	bf 2b       	or	r27, r31
 46e:	11 f4       	brne	.+4      	; 0x474 <__fp_round+0x18>
 470:	60 ff       	sbrs	r22, 0
 472:	04 c0       	rjmp	.+8      	; 0x47c <__fp_round+0x20>
 474:	6f 5f       	subi	r22, 0xFF	; 255
 476:	7f 4f       	sbci	r23, 0xFF	; 255
 478:	8f 4f       	sbci	r24, 0xFF	; 255
 47a:	9f 4f       	sbci	r25, 0xFF	; 255
 47c:	08 95       	ret

0000047e <__fp_split3>:
 47e:	57 fd       	sbrc	r21, 7
 480:	90 58       	subi	r25, 0x80	; 128
 482:	44 0f       	add	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	59 f0       	breq	.+22     	; 0x49e <__fp_splitA+0x10>
 488:	5f 3f       	cpi	r21, 0xFF	; 255
 48a:	71 f0       	breq	.+28     	; 0x4a8 <__fp_splitA+0x1a>
 48c:	47 95       	ror	r20

0000048e <__fp_splitA>:
 48e:	88 0f       	add	r24, r24
 490:	97 fb       	bst	r25, 7
 492:	99 1f       	adc	r25, r25
 494:	61 f0       	breq	.+24     	; 0x4ae <__fp_splitA+0x20>
 496:	9f 3f       	cpi	r25, 0xFF	; 255
 498:	79 f0       	breq	.+30     	; 0x4b8 <__fp_splitA+0x2a>
 49a:	87 95       	ror	r24
 49c:	08 95       	ret
 49e:	12 16       	cp	r1, r18
 4a0:	13 06       	cpc	r1, r19
 4a2:	14 06       	cpc	r1, r20
 4a4:	55 1f       	adc	r21, r21
 4a6:	f2 cf       	rjmp	.-28     	; 0x48c <__fp_split3+0xe>
 4a8:	46 95       	lsr	r20
 4aa:	f1 df       	rcall	.-30     	; 0x48e <__fp_splitA>
 4ac:	08 c0       	rjmp	.+16     	; 0x4be <__fp_splitA+0x30>
 4ae:	16 16       	cp	r1, r22
 4b0:	17 06       	cpc	r1, r23
 4b2:	18 06       	cpc	r1, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	f1 cf       	rjmp	.-30     	; 0x49a <__fp_splitA+0xc>
 4b8:	86 95       	lsr	r24
 4ba:	71 05       	cpc	r23, r1
 4bc:	61 05       	cpc	r22, r1
 4be:	08 94       	sec
 4c0:	08 95       	ret

000004c2 <__fp_zero>:
 4c2:	e8 94       	clt

000004c4 <__fp_szero>:
 4c4:	bb 27       	eor	r27, r27
 4c6:	66 27       	eor	r22, r22
 4c8:	77 27       	eor	r23, r23
 4ca:	cb 01       	movw	r24, r22
 4cc:	97 f9       	bld	r25, 7
 4ce:	08 95       	ret

000004d0 <__mulsf3>:
 4d0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__mulsf3x>
 4d4:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__fp_round>
 4d8:	0e 94 20 02 	call	0x440	; 0x440 <__fp_pscA>
 4dc:	38 f0       	brcs	.+14     	; 0x4ec <__mulsf3+0x1c>
 4de:	0e 94 27 02 	call	0x44e	; 0x44e <__fp_pscB>
 4e2:	20 f0       	brcs	.+8      	; 0x4ec <__mulsf3+0x1c>
 4e4:	95 23       	and	r25, r21
 4e6:	11 f0       	breq	.+4      	; 0x4ec <__mulsf3+0x1c>
 4e8:	0c 94 17 02 	jmp	0x42e	; 0x42e <__fp_inf>
 4ec:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__fp_nan>
 4f0:	11 24       	eor	r1, r1
 4f2:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_szero>

000004f6 <__mulsf3x>:
 4f6:	0e 94 3f 02 	call	0x47e	; 0x47e <__fp_split3>
 4fa:	70 f3       	brcs	.-36     	; 0x4d8 <__mulsf3+0x8>

000004fc <__mulsf3_pse>:
 4fc:	95 9f       	mul	r25, r21
 4fe:	c1 f3       	breq	.-16     	; 0x4f0 <__mulsf3+0x20>
 500:	95 0f       	add	r25, r21
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	55 1f       	adc	r21, r21
 506:	62 9f       	mul	r22, r18
 508:	f0 01       	movw	r30, r0
 50a:	72 9f       	mul	r23, r18
 50c:	bb 27       	eor	r27, r27
 50e:	f0 0d       	add	r31, r0
 510:	b1 1d       	adc	r27, r1
 512:	63 9f       	mul	r22, r19
 514:	aa 27       	eor	r26, r26
 516:	f0 0d       	add	r31, r0
 518:	b1 1d       	adc	r27, r1
 51a:	aa 1f       	adc	r26, r26
 51c:	64 9f       	mul	r22, r20
 51e:	66 27       	eor	r22, r22
 520:	b0 0d       	add	r27, r0
 522:	a1 1d       	adc	r26, r1
 524:	66 1f       	adc	r22, r22
 526:	82 9f       	mul	r24, r18
 528:	22 27       	eor	r18, r18
 52a:	b0 0d       	add	r27, r0
 52c:	a1 1d       	adc	r26, r1
 52e:	62 1f       	adc	r22, r18
 530:	73 9f       	mul	r23, r19
 532:	b0 0d       	add	r27, r0
 534:	a1 1d       	adc	r26, r1
 536:	62 1f       	adc	r22, r18
 538:	83 9f       	mul	r24, r19
 53a:	a0 0d       	add	r26, r0
 53c:	61 1d       	adc	r22, r1
 53e:	22 1f       	adc	r18, r18
 540:	74 9f       	mul	r23, r20
 542:	33 27       	eor	r19, r19
 544:	a0 0d       	add	r26, r0
 546:	61 1d       	adc	r22, r1
 548:	23 1f       	adc	r18, r19
 54a:	84 9f       	mul	r24, r20
 54c:	60 0d       	add	r22, r0
 54e:	21 1d       	adc	r18, r1
 550:	82 2f       	mov	r24, r18
 552:	76 2f       	mov	r23, r22
 554:	6a 2f       	mov	r22, r26
 556:	11 24       	eor	r1, r1
 558:	9f 57       	subi	r25, 0x7F	; 127
 55a:	50 40       	sbci	r21, 0x00	; 0
 55c:	9a f0       	brmi	.+38     	; 0x584 <__mulsf3_pse+0x88>
 55e:	f1 f0       	breq	.+60     	; 0x59c <__mulsf3_pse+0xa0>
 560:	88 23       	and	r24, r24
 562:	4a f0       	brmi	.+18     	; 0x576 <__mulsf3_pse+0x7a>
 564:	ee 0f       	add	r30, r30
 566:	ff 1f       	adc	r31, r31
 568:	bb 1f       	adc	r27, r27
 56a:	66 1f       	adc	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	88 1f       	adc	r24, r24
 570:	91 50       	subi	r25, 0x01	; 1
 572:	50 40       	sbci	r21, 0x00	; 0
 574:	a9 f7       	brne	.-22     	; 0x560 <__mulsf3_pse+0x64>
 576:	9e 3f       	cpi	r25, 0xFE	; 254
 578:	51 05       	cpc	r21, r1
 57a:	80 f0       	brcs	.+32     	; 0x59c <__mulsf3_pse+0xa0>
 57c:	0c 94 17 02 	jmp	0x42e	; 0x42e <__fp_inf>
 580:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_szero>
 584:	5f 3f       	cpi	r21, 0xFF	; 255
 586:	e4 f3       	brlt	.-8      	; 0x580 <__mulsf3_pse+0x84>
 588:	98 3e       	cpi	r25, 0xE8	; 232
 58a:	d4 f3       	brlt	.-12     	; 0x580 <__mulsf3_pse+0x84>
 58c:	86 95       	lsr	r24
 58e:	77 95       	ror	r23
 590:	67 95       	ror	r22
 592:	b7 95       	ror	r27
 594:	f7 95       	ror	r31
 596:	e7 95       	ror	r30
 598:	9f 5f       	subi	r25, 0xFF	; 255
 59a:	c1 f7       	brne	.-16     	; 0x58c <__mulsf3_pse+0x90>
 59c:	fe 2b       	or	r31, r30
 59e:	88 0f       	add	r24, r24
 5a0:	91 1d       	adc	r25, r1
 5a2:	96 95       	lsr	r25
 5a4:	87 95       	ror	r24
 5a6:	97 f9       	bld	r25, 7
 5a8:	08 95       	ret

000005aa <_exit>:
 5aa:	f8 94       	cli

000005ac <__stop_program>:
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stop_program>
