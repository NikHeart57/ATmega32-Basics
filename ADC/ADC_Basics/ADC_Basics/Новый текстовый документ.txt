#define F_CPU 7372800
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
#include <stdlib.h>

	//	Пины
#define SDA			PC1
#define SDA_DDR		DDRC
#define SDA_PIN		PINC

#define SCL			PC0
#define SCL_DDR		DDRC
#define SCL_PIN		PINC

	//	Пауза
#define I2C_DELAY	_delay_ms(50)

	//	Управление линиями
#define SDA_1		SDA_DDR &=~ (1 << SDA)		//  Пин SDA отвязывается от земли
#define SDA_0		SDA_DDR |=  (1 << SDA)		//  Пин SDA подтягивается к земле 
#define SCL_1		SCL_DDR &=~ (1 << SCL)		//	Аналогично
#define SCL_0		SCL_DDR |=  (1 << SCL)

void setup()
{
	//	Настройки не требуются
}


// Старт
void i2c_start(void)
{
	SDA_0;
	I2C_DELAY;
	SCL_0;
}

// Стоп
void i2c_stop(void)
{
	SDA_0;
	I2C_DELAY;
	SCL_1;
	I2C_DELAY;
	SDA_1;
}


// Отправка байта
uint8_t i2c_send(uint8_t data)
{
	// Объявление переменных i и ask
	uint8_t i = 8, ask;				
	
	// Начало передачи
	while (i--)
	{
		if (data&(1 << i)) 
		{
			SDA_1;					// Цикл смотрит с 7 по 0 биты передаваемого сообщения, если бит = 1 поднимаем линию к питанию
		}	
		else 
		{
			SDA_0;					// а если бит = 0 то опускаем линию к земле
		}
		
		// Затем делаем такт
		I2C_DELAY;					// пауза
		SCL_1;						// такт
		I2C_DELAY;					// пауза
		SCL_0;						// конец такта
		// и так повторяем пока байт не кончится
	}	
	// Конец передачи
	
	
	// Формирование 9 бита - для проверки приемника
	SDA_1;							// Дата поднимается к питанию
	I2C_DELAY;
	SCL_1;							// SCL поднимается к питанию - происходит такт
	I2C_DELAY;
	
	if (SDA_PIN & (1 << SDA))		// читаем линию SDA (дата). Если передача прошла успешно то приемник опустит линию к земле
	{
		ask = 1;					// Тогда передача успешна
	}
	else
	{
		ask = 0;					// А если приемник не опустил линию к земле, то передача неуспешна
	}
	SCL_0;							// Спад SCL, завершение 9 бита
	
	return ask;						// Возврат ответа приемника
}


// Получение байта
uint8_t i2c_read(uint8_t ack)       // ask - отвечает за то будет master отвечать или нет
{
	// Объявление переменых
	uint8_t byte = 0, i = 8;
	
	// Начало приема
	while (i--)
	{
		SCL_1;						// мастер формирует высокий уровень на SCL смотрит, начало приёма бита
		I2C_DELAY;
		if (SDA_PIN & (1 << SDA))	// по окончании паузы мастер проверяет лоический уровень
		{
			byte |= (1 << i);		// если обнаружен высокий уровень то в бит пишется ноль, в противном случае записи не происходит и бит остаётся нулевым
		}
		SCL_0;						// спад такта SCL, завершение приёма этого бита
		I2C_DELAY;
	}
	// Конец приёма
	
	// Формирование 9 бита. Если мастер хочет получать дальше информацию то мастер должен притянуть SDA к 0
	if (ack) 
	{
		SDA_0;						// ask или не-ask
	}
	else 
	{
		SDA_1;
	}
	
	SCL_1;						//
	I2C_DELAY;					// такт на получения ответа или неответа
	SCL_0;						//
	I2C_DELAY;
	SDA_1;						// отпустить сда если притянут
	
	return byte;                // Возврат принятой информации
}


int main(void)
{
	setup();
	
    while (1) 
    {
			PORTC = (1 << PC2);
			i2c_start();
			PORTC = (0 << PC2);
			_delay_ms(100);
			
			PORTC = (1 << PC2);
			i2c_send(0b11110000);
			PORTC = (0 << PC2);
			_delay_ms(100);
			
			PORTC = (1 << PC2);			
			i2c_send(0b10101010);
			PORTC = (0 << PC2);
			_delay_ms(100);
			
			PORTC = (1 << PC2);			
			i2c_stop();
			PORTC |= (0 << PC2);
			_delay_ms(100);			
			
			PORTC = (0 << PC2);
			_delay_ms(5000);
    }
}

