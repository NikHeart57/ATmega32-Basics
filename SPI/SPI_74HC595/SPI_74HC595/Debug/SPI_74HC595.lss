
SPI_74HC595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ad  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e5  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a7  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000396  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009d  00000000  00000000  000014da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z5setupv>:


void setup(void)
{
	// Настройка пина защёлки (Вместо этого пина можно использовать пин SS или любой другой, по желанию)
	DDRC  |= (1 << LATCH);									// Выходы (1)
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << LATCH);									// Изначально высокий уровень LATCH (ST_CP)
  72:	85 b3       	in	r24, 0x15	; 21
  74:	81 60       	ori	r24, 0x01	; 1
  76:	85 bb       	out	0x15, r24	; 21
	
	// Настройка пинов SPI
   DDRB  |= (1 << MOSI)|(1 << SCK)|(1 << SS)|(0 << MISO);	// Обязательная настройка! Для всех 4-х пинов SPI!
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	80 6b       	ori	r24, 0xB0	; 176
  7c:	87 bb       	out	0x17, r24	; 23
   PORTB |= (1 << MOSI)|(1 << SCK)|(1 << SS)|(1 << MISO);	//
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	80 6f       	ori	r24, 0xF0	; 240
  82:	88 bb       	out	0x18, r24	; 24

   // Разрешение SPI (SPE), старший бит вперед (DORD), мастер (MSTR), режим 0 (CPOL, CPHA), делитель частоты - 128 (SPR1, SPR0)
   SPCR = (1 << SPE)|(0 << DORD)|(1 << MSTR)|(0 << CPOL)|(0 << CPHA)|(1 << SPR1)|(1 << SPR0);
  84:	83 e5       	ldi	r24, 0x53	; 83
  86:	8d b9       	out	0x0d, r24	; 13
   SPSR = (0 << SPI2X);
  88:	1e b8       	out	0x0e, r1	; 14
  8a:	08 95       	ret

0000008c <_Z13SPI_WriteByteh>:
}

void SPI_WriteByte(uint8_t data)
{
	//PORTB &= ~(1 << SS);				// Можно использовать любой пин для вызова устройства
	PORTC &= ~(1 << LATCH);		
  8c:	95 b3       	in	r25, 0x15	; 21
  8e:	9e 7f       	andi	r25, 0xFE	; 254
  90:	95 bb       	out	0x15, r25	; 21
	SPDR = data;
  92:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF)));
  94:	77 9b       	sbis	0x0e, 7	; 14
  96:	fe cf       	rjmp	.-4      	; 0x94 <_Z13SPI_WriteByteh+0x8>
	//PORTB |= (1 << SS);
	PORTC |= (1 << LATCH);
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	08 95       	ret

000000a0 <main>:
}

int main(void)
{
	setup();
  a0:	0e 94 36 00 	call	0x6c	; 0x6c <_Z5setupv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	8f e7       	ldi	r24, 0x7F	; 127
  a8:	94 e0       	ldi	r25, 0x04	; 4
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x14>
  b4:	00 00       	nop
	char i = 0;
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	ef ef       	ldi	r30, 0xFF	; 255
  ba:	ff e8       	ldi	r31, 0x8F	; 143
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x1c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x22>
  c2:	00 00       	nop
	_delay_ms(100);						// Не обязательно
	
	while(1)
	{
		_delay_ms(10);	
		SPI_WriteByte(i++);
  c4:	c1 e0       	ldi	r28, 0x01	; 1
  c6:	c8 0f       	add	r28, r24
  c8:	0e 94 46 00 	call	0x8c	; 0x8c <_Z13SPI_WriteByteh>
  cc:	8c 2f       	mov	r24, r28
  ce:	f4 cf       	rjmp	.-24     	; 0xb8 <main+0x18>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
