
I2C_SSD1306_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001946  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001946  000019ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000019be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013cf  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077f  00000000  00000000  00002e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006e3  00000000  00000000  000035fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00003ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ef  00000000  00000000  00003de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aaa  00000000  00000000  000044d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00004f7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
      7a:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z11i2c_MT_initv>:
	return TWDR;									//читаем регистр данных
}

void i2c_MR_stop(void)
{
	TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);	// Transmit STOP condition
      82:	89 e0       	ldi	r24, 0x09	; 9
      84:	80 b9       	out	0x00, r24	; 0
      86:	81 b1       	in	r24, 0x01	; 1
      88:	81 b9       	out	0x01, r24	; 1
      8a:	08 95       	ret

0000008c <_Z12i2c_MT_startv>:
      8c:	84 ea       	ldi	r24, 0xA4	; 164
      8e:	86 bf       	out	0x36, r24	; 54
      90:	06 b6       	in	r0, 0x36	; 54
      92:	07 fe       	sbrs	r0, 7
      94:	fd cf       	rjmp	.-6      	; 0x90 <_Z12i2c_MT_startv+0x4>
      96:	08 95       	ret

00000098 <_Z11i2c_MT_sendc>:
      98:	83 b9       	out	0x03, r24	; 3
      9a:	84 e8       	ldi	r24, 0x84	; 132
      9c:	86 bf       	out	0x36, r24	; 54
      9e:	06 b6       	in	r0, 0x36	; 54
      a0:	07 fe       	sbrs	r0, 7
      a2:	fd cf       	rjmp	.-6      	; 0x9e <_Z11i2c_MT_sendc+0x6>
      a4:	08 95       	ret

000000a6 <_Z11i2c_MT_stopv>:
      a6:	84 e9       	ldi	r24, 0x94	; 148
      a8:	86 bf       	out	0x36, r24	; 54
      aa:	08 95       	ret

000000ac <_ZN15ssd1306_Display4InitEv>:
	
	~ssd1306_Display()
	{
	}	
		
	void Init(void)
      ac:	cf 93       	push	r28
      ae:	df 93       	push	r29
      b0:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b2:	86 e6       	ldi	r24, 0x66	; 102
      b4:	9e e0       	ldi	r25, 0x0E	; 14
      b6:	01 97       	sbiw	r24, 0x01	; 1
      b8:	f1 f7       	brne	.-4      	; 0xb6 <_ZN15ssd1306_Display4InitEv+0xa>
      ba:	00 00       	nop
	{
		_delay_ms(1);
		i2c_MT_init();					// Инициализация протокола I2C
      bc:	0e 94 41 00 	call	0x82	; 0x82 <_Z11i2c_MT_initv>
		i2c_MT_start();					// Задание стартового условия мастером			// Код - 00001 = 0x08 - A START condition has been transmitted
      c0:	0e 94 46 00 	call	0x8c	; 0x8c <_Z12i2c_MT_startv>
		i2c_MT_send(adr);				// Вызов ведомого								// Код - 00011 = 0x18 - SLA+W has been transmitted;		ACK has been received
      c4:	88 81       	ld	r24, Y
      c6:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
		//// Выключить дисплей
		i2c_MT_send(0x80);						// Передача кода команды (0b10000000 = 0x80) озачающего что далее выполняется передача команд 		// (7(Co bit)->0 - дальнейшие биты это только DATA,		6(D/C# bit)->0, дальнейший бит это команда; ->1 дальнейший бит это DATA)
      ca:	80 e8       	ldi	r24, 0x80	; 128
      cc:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xAE);						// Код - 0xAE Выключение экрана (!0xAF)
      d0:	8e ea       	ldi	r24, 0xAE	; 174
      d2:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
		//// Частота дисплея
		i2c_MT_send(0x80);
      d6:	80 e8       	ldi	r24, 0x80	; 128
      d8:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xD5);						// Код - 0xD5 - Установка делителя частоты
      dc:	85 ed       	ldi	r24, 0xD5	; 213
      de:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x80);						// Параметр 0x80 - по умолчанию
      e2:	80 e8       	ldi	r24, 0x80	; 128
      e4:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
		i2c_MT_send(0x80);
      e8:	80 e8       	ldi	r24, 0x80	; 128
      ea:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xA8);						// Код - 0xA8 - MUX - Устанавливает отношение мультиплексирования
      ee:	88 ea       	ldi	r24, 0xA8	; 168
      f0:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x3F);						// Параметр 0x3F - по умолчанию
      f4:	8f e3       	ldi	r24, 0x3F	; 63
      f6:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
	
		//// Смещение дисплея хз
		i2c_MT_send(0b10000000);
      fa:	80 e8       	ldi	r24, 0x80	; 128
      fc:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xD3);				// 0xD3 = 0b11010011 - Устанавливаем смещение дисплея
     100:	83 ed       	ldi	r24, 0xD3	; 211
     102:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x00);				// Параметр 0x00
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>

		i2c_MT_send(0x80);
     10c:	80 e8       	ldi	r24, 0x80	; 128
     10e:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x40);				// Код - 0x40 Начало строки разверстки. Т.е. устанавливаем начальную линию. По сути двигает изображение вверх и вниз
     112:	80 e4       	ldi	r24, 0x40	; 64
     114:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
		
		//// Конфигурация портов (ВАЖНО Т.К. ОПРЕДЕЛЯЕТСЯ РАЗРЕШЕНИЕ ЭКРАНА)
		i2c_MT_send(0x80);
     118:	80 e8       	ldi	r24, 0x80	; 128
     11a:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xDA);				// Устанавливаем конфигурацию выводов COM-сигналов в соответствии с компоновкой оборудования OLED - панели (0x12 for 128x64, 0x02 for 128x32)
     11e:	8a ed       	ldi	r24, 0xDA	; 218
     120:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		//i2c_MT_send(0x02);			// Параметр (0x12 for 128x64, 0x02 = 0b00000010 for 128x32)	ВЕРНО!
		i2c_MT_send(0x12);
     124:	82 e1       	ldi	r24, 0x12	; 18
     126:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
	
		//// Установка адресации и каретки
		i2c_MT_send(0x80);
     12a:	80 e8       	ldi	r24, 0x80	; 128
     12c:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x20);				// Код - 0x20 - Режим автоматической адресации
     130:	80 e2       	ldi	r24, 0x20	; 32
     132:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x00);				// 0-по горизонтали с переходом на новую страницу (строку)
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
										// 1 - по вертикали с переходом на новую строку
										// 2 - только по выбранной странице без перехода
		i2c_MT_send(0x80);
     13c:	80 e8       	ldi	r24, 0x80	; 128
     13e:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x21);				// Код(3) - 0x21 - установка стартовой и конечной колонки, для режима горизонтальной адресации
     142:	81 e2       	ldi	r24, 0x21	; 33
     144:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0);					// Старовая колонка 0 - 127
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(127);				// Конечная колонка 0 - 127
     14e:	8f e7       	ldi	r24, 0x7F	; 127
     150:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		
		i2c_MT_send(0x80);
     154:	80 e8       	ldi	r24, 0x80	; 128
     156:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x22);				// Код(3) - 0x22 установка стартовой и конечной страницы, для режима горизонтальной адресации
     15a:	82 e2       	ldi	r24, 0x22	; 34
     15c:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0);					// Старовая страница 0 - 7
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(7);					// Конечная страница 0 - 7		
     166:	87 e0       	ldi	r24, 0x07	; 7
     168:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		
	
		//// Симметрия OX по OY		
		i2c_MT_send(0x80);				
     16c:	80 e8       	ldi	r24, 0x80	; 128
     16e:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xA1);				// Режим разверки по странице (по X)	(Симметрия относительно OY)
     172:	81 ea       	ldi	r24, 0xA1	; 161
     174:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
										// A1 - нормальный режим (слева/направо) A0 - обратный (справа/налево)
		i2c_MT_send(0X80);
     178:	80 e8       	ldi	r24, 0x80	; 128
     17a:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xC0);				// Режим сканирования озу дисплея		(Симметрия относительно OX)
     17e:	80 ec       	ldi	r24, 0xC0	; 192
     180:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
										// для изменения системы координат
										// С0 - снизу/верх (начало нижний левый угол)
										// С8 - сверху/вниз (начало верний левый угол)	
		
		//// Яркость
		i2c_MT_send(0x80);
     184:	80 e8       	ldi	r24, 0x80	; 128
     186:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x81);				// Код - 0x81 Установка контрастности 
     18a:	81 e8       	ldi	r24, 0x81	; 129
     18c:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(255);				// Параметр контрастности 0 - 255. Чем больше тем ярче
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
		i2c_MT_send(0x80);
     196:	80 e8       	ldi	r24, 0x80	; 128
     198:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xDB);				// Код - Установка уровня VcomH
     19c:	8b ed       	ldi	r24, 0xDB	; 219
     19e:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x40);				// Влияет на яркость дисплея 0x00..0x70
     1a2:	80 e4       	ldi	r24, 0x40	; 64
     1a4:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
	
		//// Что-то техническое про питание
		i2c_MT_send(0x80);
     1a8:	80 e8       	ldi	r24, 0x80	; 128
     1aa:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xD9);				// Код 0xD9 - Настройка фаз DC/DC преоразователя
     1ae:	89 ed       	ldi	r24, 0xD9	; 217
     1b0:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xF1);				// 0x22 - VCC подается извне / 0xF1 для внутренего
     1b4:	81 ef       	ldi	r24, 0xF1	; 241
     1b6:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		
		i2c_MT_send(0b10000000);
     1ba:	80 e8       	ldi	r24, 0x80	; 128
     1bc:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x8D);				// Управление внутреним преобразователем
     1c0:	8d e8       	ldi	r24, 0x8D	; 141
     1c2:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0x14);				// 0x10 - отключить (VCC подается извне) 0x14 - запустить внутрений DC/DC
     1c6:	84 e1       	ldi	r24, 0x14	; 20
     1c8:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	

		//// RAM; отображение и инверсия
		i2c_MT_send(0x80);
     1cc:	80 e8       	ldi	r24, 0x80	; 128
     1ce:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xA4);				// Код 0xA4 - Возобновление отображения содержимого RAM
     1d2:	84 ea       	ldi	r24, 0xA4	; 164
     1d4:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
		i2c_MT_send(0x80);
     1d8:	80 e8       	ldi	r24, 0x80	; 128
     1da:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xA6);				// Код 0xA6 - Отображение в нормальном виде, без инверсии (!0xA7)
     1de:	86 ea       	ldi	r24, 0xA6	; 166
     1e0:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
	
		//// Включение
		i2c_MT_send(0x80);
     1e4:	80 e8       	ldi	r24, 0x80	; 128
     1e6:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0xAF);				// Код 0xAF - Включение дисплея в нормальном режиме (!0xAE)
     1ea:	8f ea       	ldi	r24, 0xAF	; 175
     1ec:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
		i2c_MT_stop();					// Завершение передачи
     1f0:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11i2c_MT_stopv>
     1f4:	86 e6       	ldi	r24, 0x66	; 102
     1f6:	9e e0       	ldi	r25, 0x0E	; 14
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <_ZN15ssd1306_Display4InitEv+0x14c>
     1fc:	00 00       	nop
	
		_delay_ms(1);
	
		i2c_MT_init();
     1fe:	0e 94 41 00 	call	0x82	; 0x82 <_Z11i2c_MT_initv>
		i2c_MT_start();					// Задание стартового условия мастером			// 00001 = 0x08 - A START condition has been transmitted
     202:	0e 94 46 00 	call	0x8c	; 0x8c <_Z12i2c_MT_startv>
		i2c_MT_send(adr);				// Передача адреса								// 00011 = 0x18 - SLA+W has been transmitted;		ACK has been received
     206:	88 81       	ld	r24, Y
     208:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0b01000000);		// 10 - ND/Comand(setp)	// 11 - ND/DATA(nerabotaet)		// 00 - DataOnly/Comand		// 01 - DataOnly/DATA(steam)	
     20c:	80 e4       	ldi	r24, 0x40	; 64
     20e:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_stop();
     212:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11i2c_MT_stopv>
	}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <main>:
#include "main.h"

int main(void)
{
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	c7 56       	subi	r28, 0x67	; 103
     226:	d4 40       	sbci	r29, 0x04	; 4
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	cd bf       	out	0x3d, r28	; 61
	
	
	public:		
	ssd1306_Display(unsigned char adr, signed char Xshift, signed char Yshift)
	{
		this->adr = adr;
     232:	88 e7       	ldi	r24, 0x78	; 120
     234:	89 83       	std	Y+1, r24	; 0x01
		this->Xshift = Xshift;
     236:	1a 82       	std	Y+2, r1	; 0x02
		this->Yshift = Yshift;
     238:	1b 82       	std	Y+3, r1	; 0x03
		for (int i = 0; i < 1024; i++)
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	81 15       	cp	r24, r1
     240:	24 e0       	ldi	r18, 0x04	; 4
     242:	92 07       	cpc	r25, r18
     244:	4c f4       	brge	.+18     	; 0x258 <main+0x3c>
		{
			this -> Buffer[i] = 0x00;
     246:	e4 e0       	ldi	r30, 0x04	; 4
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	ec 0f       	add	r30, r28
     24c:	fd 1f       	adc	r31, r29
     24e:	e8 0f       	add	r30, r24
     250:	f9 1f       	adc	r31, r25
     252:	10 82       	st	Z, r1
	ssd1306_Display(unsigned char adr, signed char Xshift, signed char Yshift)
	{
		this->adr = adr;
		this->Xshift = Xshift;
		this->Yshift = Yshift;
		for (int i = 0; i < 1024; i++)
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	f3 cf       	rjmp	.-26     	; 0x23e <main+0x22>
	ssd1306_Display Display(0b01111000, 0, 0);
	Display.Init();
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 56 00 	call	0xac	; 0xac <_ZN15ssd1306_Display4InitEv>
	int i = 0;
     260:	c8 5a       	subi	r28, 0xA8	; 168
     262:	db 4f       	sbci	r29, 0xFB	; 251
     264:	19 82       	std	Y+1, r1	; 0x01
     266:	18 82       	st	Y, r1
     268:	c8 55       	subi	r28, 0x58	; 88
     26a:	d4 40       	sbci	r29, 0x04	; 4
		i2c_MT_stop();
	}
		
	void Buffer_Fill(char byte)
	{
		for (int i = 0; i < 1024; i++)
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	81 15       	cp	r24, r1
     272:	34 e0       	ldi	r19, 0x04	; 4
     274:	93 07       	cpc	r25, r19
     276:	4c f4       	brge	.+18     	; 0x28a <main+0x6e>
		{
			Buffer[i] = byte;
     278:	e4 e0       	ldi	r30, 0x04	; 4
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	ec 0f       	add	r30, r28
     27e:	fd 1f       	adc	r31, r29
     280:	e8 0f       	add	r30, r24
     282:	f9 1f       	adc	r31, r25
     284:	10 82       	st	Z, r1
		i2c_MT_stop();
	}
		
	void Buffer_Fill(char byte)
	{
		for (int i = 0; i < 1024; i++)
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	f3 cf       	rjmp	.-26     	; 0x270 <main+0x54>
     28a:	c6 5a       	subi	r28, 0xA6	; 166
     28c:	db 4f       	sbci	r29, 0xFB	; 251
     28e:	19 82       	std	Y+1, r1	; 0x01
     290:	18 82       	st	Y, r1
     292:	ca 55       	subi	r28, 0x5A	; 90
     294:	d4 40       	sbci	r29, 0x04	; 4

	while (1)
	{		
		Display.Buffer_Fill(0);
		
		for(int j = 0; j < 3; j++)
     296:	c6 5a       	subi	r28, 0xA6	; 166
     298:	db 4f       	sbci	r29, 0xFB	; 251
     29a:	48 81       	ld	r20, Y
     29c:	59 81       	ldd	r21, Y+1	; 0x01
     29e:	ca 55       	subi	r28, 0x5A	; 90
     2a0:	d4 40       	sbci	r29, 0x04	; 4
     2a2:	43 30       	cpi	r20, 0x03	; 3
     2a4:	51 05       	cpc	r21, r1
     2a6:	0c f0       	brlt	.+2      	; 0x2aa <main+0x8e>
     2a8:	ab c4       	rjmp	.+2390   	; 0xc00 <__stack+0x3a1>
		{
			Display.Buffer_SetTriangle(rand() % 127,rand() % 63, rand() % 127,rand() % 63, rand() % 127,rand() % 63);
     2aa:	0e 94 2e 0c 	call	0x185c	; 0x185c <rand>
     2ae:	0f e3       	ldi	r16, 0x3F	; 63
     2b0:	10 e0       	ldi	r17, 0x00	; 0
     2b2:	b8 01       	movw	r22, r16
     2b4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__divmodhi4>
     2b8:	bc 01       	movw	r22, r24
     2ba:	99 0f       	add	r25, r25
     2bc:	88 0b       	sbc	r24, r24
     2be:	99 0b       	sbc	r25, r25
     2c0:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     2c4:	cc 5c       	subi	r28, 0xCC	; 204
     2c6:	db 4f       	sbci	r29, 0xFB	; 251
     2c8:	68 83       	st	Y, r22
     2ca:	79 83       	std	Y+1, r23	; 0x01
     2cc:	8a 83       	std	Y+2, r24	; 0x02
     2ce:	9b 83       	std	Y+3, r25	; 0x03
     2d0:	c4 53       	subi	r28, 0x34	; 52
     2d2:	d4 40       	sbci	r29, 0x04	; 4
     2d4:	0e 94 2e 0c 	call	0x185c	; 0x185c <rand>
     2d8:	0f 2e       	mov	r0, r31
     2da:	ff e7       	ldi	r31, 0x7F	; 127
     2dc:	2f 2e       	mov	r2, r31
     2de:	31 2c       	mov	r3, r1
     2e0:	f0 2d       	mov	r31, r0
     2e2:	b1 01       	movw	r22, r2
     2e4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__divmodhi4>
     2e8:	bc 01       	movw	r22, r24
     2ea:	99 0f       	add	r25, r25
     2ec:	88 0b       	sbc	r24, r24
     2ee:	99 0b       	sbc	r25, r25
     2f0:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     2f4:	c4 5c       	subi	r28, 0xC4	; 196
     2f6:	db 4f       	sbci	r29, 0xFB	; 251
     2f8:	68 83       	st	Y, r22
     2fa:	79 83       	std	Y+1, r23	; 0x01
     2fc:	8a 83       	std	Y+2, r24	; 0x02
     2fe:	9b 83       	std	Y+3, r25	; 0x03
     300:	cc 53       	subi	r28, 0x3C	; 60
     302:	d4 40       	sbci	r29, 0x04	; 4
     304:	0e 94 2e 0c 	call	0x185c	; 0x185c <rand>
     308:	b8 01       	movw	r22, r16
     30a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__divmodhi4>
     30e:	bc 01       	movw	r22, r24
     310:	99 0f       	add	r25, r25
     312:	88 0b       	sbc	r24, r24
     314:	99 0b       	sbc	r25, r25
     316:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     31a:	4b 01       	movw	r8, r22
     31c:	5c 01       	movw	r10, r24
     31e:	0e 94 2e 0c 	call	0x185c	; 0x185c <rand>
     322:	b1 01       	movw	r22, r2
     324:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__divmodhi4>
     328:	bc 01       	movw	r22, r24
     32a:	99 0f       	add	r25, r25
     32c:	88 0b       	sbc	r24, r24
     32e:	99 0b       	sbc	r25, r25
     330:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     334:	2b 01       	movw	r4, r22
     336:	3c 01       	movw	r6, r24
     338:	0e 94 2e 0c 	call	0x185c	; 0x185c <rand>
     33c:	b8 01       	movw	r22, r16
     33e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__divmodhi4>
     342:	bc 01       	movw	r22, r24
     344:	99 0f       	add	r25, r25
     346:	88 0b       	sbc	r24, r24
     348:	99 0b       	sbc	r25, r25
     34a:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     34e:	6b 01       	movw	r12, r22
     350:	7c 01       	movw	r14, r24
     352:	0e 94 2e 0c 	call	0x185c	; 0x185c <rand>
     356:	b1 01       	movw	r22, r2
     358:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__divmodhi4>
     35c:	bc 01       	movw	r22, r24
     35e:	99 0f       	add	r25, r25
     360:	88 0b       	sbc	r24, r24
     362:	99 0b       	sbc	r25, r25
     364:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
		float temparray[3][4] = 
		{
			{xa, ya, xb, yb},
			{xb, yb, xc, yc},
			{xc, yc, xa, ya}
		};
     368:	cc 5f       	subi	r28, 0xFC	; 252
     36a:	db 4f       	sbci	r29, 0xFB	; 251
     36c:	68 83       	st	Y, r22
     36e:	79 83       	std	Y+1, r23	; 0x01
     370:	8a 83       	std	Y+2, r24	; 0x02
     372:	9b 83       	std	Y+3, r25	; 0x03
     374:	c4 50       	subi	r28, 0x04	; 4
     376:	d4 40       	sbci	r29, 0x04	; 4
     378:	c8 5f       	subi	r28, 0xF8	; 248
     37a:	db 4f       	sbci	r29, 0xFB	; 251
     37c:	c8 82       	st	Y, r12
     37e:	d9 82       	std	Y+1, r13	; 0x01
     380:	ea 82       	std	Y+2, r14	; 0x02
     382:	fb 82       	std	Y+3, r15	; 0x03
     384:	c8 50       	subi	r28, 0x08	; 8
     386:	d4 40       	sbci	r29, 0x04	; 4
     388:	c4 5f       	subi	r28, 0xF4	; 244
     38a:	db 4f       	sbci	r29, 0xFB	; 251
     38c:	48 82       	st	Y, r4
     38e:	59 82       	std	Y+1, r5	; 0x01
     390:	6a 82       	std	Y+2, r6	; 0x02
     392:	7b 82       	std	Y+3, r7	; 0x03
     394:	cc 50       	subi	r28, 0x0C	; 12
     396:	d4 40       	sbci	r29, 0x04	; 4
     398:	c0 5f       	subi	r28, 0xF0	; 240
     39a:	db 4f       	sbci	r29, 0xFB	; 251
     39c:	88 82       	st	Y, r8
     39e:	99 82       	std	Y+1, r9	; 0x01
     3a0:	aa 82       	std	Y+2, r10	; 0x02
     3a2:	bb 82       	std	Y+3, r11	; 0x03
     3a4:	c0 51       	subi	r28, 0x10	; 16
     3a6:	d4 40       	sbci	r29, 0x04	; 4
     3a8:	cc 5e       	subi	r28, 0xEC	; 236
     3aa:	db 4f       	sbci	r29, 0xFB	; 251
     3ac:	48 82       	st	Y, r4
     3ae:	59 82       	std	Y+1, r5	; 0x01
     3b0:	6a 82       	std	Y+2, r6	; 0x02
     3b2:	7b 82       	std	Y+3, r7	; 0x03
     3b4:	c4 51       	subi	r28, 0x14	; 20
     3b6:	d4 40       	sbci	r29, 0x04	; 4
     3b8:	c8 5e       	subi	r28, 0xE8	; 232
     3ba:	db 4f       	sbci	r29, 0xFB	; 251
     3bc:	88 82       	st	Y, r8
     3be:	99 82       	std	Y+1, r9	; 0x01
     3c0:	aa 82       	std	Y+2, r10	; 0x02
     3c2:	bb 82       	std	Y+3, r11	; 0x03
     3c4:	c8 51       	subi	r28, 0x18	; 24
     3c6:	d4 40       	sbci	r29, 0x04	; 4
     3c8:	c4 5c       	subi	r28, 0xC4	; 196
     3ca:	db 4f       	sbci	r29, 0xFB	; 251
     3cc:	28 81       	ld	r18, Y
     3ce:	39 81       	ldd	r19, Y+1	; 0x01
     3d0:	4a 81       	ldd	r20, Y+2	; 0x02
     3d2:	5b 81       	ldd	r21, Y+3	; 0x03
     3d4:	cc 53       	subi	r28, 0x3C	; 60
     3d6:	d4 40       	sbci	r29, 0x04	; 4
     3d8:	c4 5e       	subi	r28, 0xE4	; 228
     3da:	db 4f       	sbci	r29, 0xFB	; 251
     3dc:	28 83       	st	Y, r18
     3de:	39 83       	std	Y+1, r19	; 0x01
     3e0:	4a 83       	std	Y+2, r20	; 0x02
     3e2:	5b 83       	std	Y+3, r21	; 0x03
     3e4:	cc 51       	subi	r28, 0x1C	; 28
     3e6:	d4 40       	sbci	r29, 0x04	; 4
     3e8:	cc 5c       	subi	r28, 0xCC	; 204
     3ea:	db 4f       	sbci	r29, 0xFB	; 251
     3ec:	28 81       	ld	r18, Y
     3ee:	39 81       	ldd	r19, Y+1	; 0x01
     3f0:	4a 81       	ldd	r20, Y+2	; 0x02
     3f2:	5b 81       	ldd	r21, Y+3	; 0x03
     3f4:	c4 53       	subi	r28, 0x34	; 52
     3f6:	d4 40       	sbci	r29, 0x04	; 4
     3f8:	c0 5e       	subi	r28, 0xE0	; 224
     3fa:	db 4f       	sbci	r29, 0xFB	; 251
     3fc:	28 83       	st	Y, r18
     3fe:	39 83       	std	Y+1, r19	; 0x01
     400:	4a 83       	std	Y+2, r20	; 0x02
     402:	5b 83       	std	Y+3, r21	; 0x03
     404:	c0 52       	subi	r28, 0x20	; 32
     406:	d4 40       	sbci	r29, 0x04	; 4
     408:	c4 5c       	subi	r28, 0xC4	; 196
     40a:	db 4f       	sbci	r29, 0xFB	; 251
     40c:	28 81       	ld	r18, Y
     40e:	39 81       	ldd	r19, Y+1	; 0x01
     410:	4a 81       	ldd	r20, Y+2	; 0x02
     412:	5b 81       	ldd	r21, Y+3	; 0x03
     414:	cc 53       	subi	r28, 0x3C	; 60
     416:	d4 40       	sbci	r29, 0x04	; 4
     418:	cc 5d       	subi	r28, 0xDC	; 220
     41a:	db 4f       	sbci	r29, 0xFB	; 251
     41c:	28 83       	st	Y, r18
     41e:	39 83       	std	Y+1, r19	; 0x01
     420:	4a 83       	std	Y+2, r20	; 0x02
     422:	5b 83       	std	Y+3, r21	; 0x03
     424:	c4 52       	subi	r28, 0x24	; 36
     426:	d4 40       	sbci	r29, 0x04	; 4
     428:	cc 5c       	subi	r28, 0xCC	; 204
     42a:	db 4f       	sbci	r29, 0xFB	; 251
     42c:	28 81       	ld	r18, Y
     42e:	39 81       	ldd	r19, Y+1	; 0x01
     430:	4a 81       	ldd	r20, Y+2	; 0x02
     432:	5b 81       	ldd	r21, Y+3	; 0x03
     434:	c4 53       	subi	r28, 0x34	; 52
     436:	d4 40       	sbci	r29, 0x04	; 4
     438:	c8 5d       	subi	r28, 0xD8	; 216
     43a:	db 4f       	sbci	r29, 0xFB	; 251
     43c:	28 83       	st	Y, r18
     43e:	39 83       	std	Y+1, r19	; 0x01
     440:	4a 83       	std	Y+2, r20	; 0x02
     442:	5b 83       	std	Y+3, r21	; 0x03
     444:	c8 52       	subi	r28, 0x28	; 40
     446:	d4 40       	sbci	r29, 0x04	; 4
     448:	c4 5d       	subi	r28, 0xD4	; 212
     44a:	db 4f       	sbci	r29, 0xFB	; 251
     44c:	68 83       	st	Y, r22
     44e:	79 83       	std	Y+1, r23	; 0x01
     450:	8a 83       	std	Y+2, r24	; 0x02
     452:	9b 83       	std	Y+3, r25	; 0x03
     454:	cc 52       	subi	r28, 0x2C	; 44
     456:	d4 40       	sbci	r29, 0x04	; 4
     458:	c0 5d       	subi	r28, 0xD0	; 208
     45a:	db 4f       	sbci	r29, 0xFB	; 251
     45c:	c8 82       	st	Y, r12
     45e:	d9 82       	std	Y+1, r13	; 0x01
     460:	ea 82       	std	Y+2, r14	; 0x02
     462:	fb 82       	std	Y+3, r15	; 0x03
     464:	c0 53       	subi	r28, 0x30	; 48
     466:	d4 40       	sbci	r29, 0x04	; 4

		for (int i = 0; i < 3; i++)
     468:	c6 5b       	subi	r28, 0xB6	; 182
     46a:	db 4f       	sbci	r29, 0xFB	; 251
     46c:	19 82       	std	Y+1, r1	; 0x01
     46e:	18 82       	st	Y, r1
     470:	ca 54       	subi	r28, 0x4A	; 74
     472:	d4 40       	sbci	r29, 0x04	; 4
     474:	c6 5b       	subi	r28, 0xB6	; 182
     476:	db 4f       	sbci	r29, 0xFB	; 251
     478:	48 81       	ld	r20, Y
     47a:	59 81       	ldd	r21, Y+1	; 0x01
     47c:	ca 54       	subi	r28, 0x4A	; 74
     47e:	d4 40       	sbci	r29, 0x04	; 4
     480:	43 30       	cpi	r20, 0x03	; 3
     482:	51 05       	cpc	r21, r1
     484:	0c f0       	brlt	.+2      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     486:	ae c3       	rjmp	.+1884   	; 0xbe4 <__stack+0x385>
		{
			Buffer_SetLine(temparray[i][0], temparray[i][1], temparray[i][2], temparray[i][3]);
     488:	fa 01       	movw	r30, r20
     48a:	e2 95       	swap	r30
     48c:	f2 95       	swap	r31
     48e:	f0 7f       	andi	r31, 0xF0	; 240
     490:	fe 27       	eor	r31, r30
     492:	e0 7f       	andi	r30, 0xF0	; 240
     494:	fe 27       	eor	r31, r30
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	94 e0       	ldi	r25, 0x04	; 4
     49a:	8c 0f       	add	r24, r28
     49c:	9d 1f       	adc	r25, r29
     49e:	e8 0f       	add	r30, r24
     4a0:	f9 1f       	adc	r31, r25
     4a2:	94 85       	ldd	r25, Z+12	; 0x0c
     4a4:	ca 5b       	subi	r28, 0xBA	; 186
     4a6:	db 4f       	sbci	r29, 0xFB	; 251
     4a8:	98 83       	st	Y, r25
     4aa:	c6 54       	subi	r28, 0x46	; 70
     4ac:	d4 40       	sbci	r29, 0x04	; 4
     4ae:	a5 85       	ldd	r26, Z+13	; 0x0d
     4b0:	c9 5b       	subi	r28, 0xB9	; 185
     4b2:	db 4f       	sbci	r29, 0xFB	; 251
     4b4:	a8 83       	st	Y, r26
     4b6:	c7 54       	subi	r28, 0x47	; 71
     4b8:	d4 40       	sbci	r29, 0x04	; 4
     4ba:	b6 85       	ldd	r27, Z+14	; 0x0e
     4bc:	c8 5b       	subi	r28, 0xB8	; 184
     4be:	db 4f       	sbci	r29, 0xFB	; 251
     4c0:	b8 83       	st	Y, r27
     4c2:	c8 54       	subi	r28, 0x48	; 72
     4c4:	d4 40       	sbci	r29, 0x04	; 4
     4c6:	27 85       	ldd	r18, Z+15	; 0x0f
     4c8:	c7 5b       	subi	r28, 0xB7	; 183
     4ca:	db 4f       	sbci	r29, 0xFB	; 251
     4cc:	28 83       	st	Y, r18
     4ce:	c9 54       	subi	r28, 0x49	; 73
     4d0:	d4 40       	sbci	r29, 0x04	; 4
     4d2:	10 85       	ldd	r17, Z+8	; 0x08
     4d4:	01 85       	ldd	r16, Z+9	; 0x09
     4d6:	b2 84       	ldd	r11, Z+10	; 0x0a
     4d8:	a3 84       	ldd	r10, Z+11	; 0x0b
     4da:	34 80       	ldd	r3, Z+4	; 0x04
     4dc:	25 80       	ldd	r2, Z+5	; 0x05
     4de:	56 80       	ldd	r5, Z+6	; 0x06
     4e0:	47 80       	ldd	r4, Z+7	; 0x07
     4e2:	70 80       	ld	r7, Z
     4e4:	31 81       	ldd	r19, Z+1	; 0x01
     4e6:	cc 5b       	subi	r28, 0xBC	; 188
     4e8:	db 4f       	sbci	r29, 0xFB	; 251
     4ea:	38 83       	st	Y, r19
     4ec:	c4 54       	subi	r28, 0x44	; 68
     4ee:	d4 40       	sbci	r29, 0x04	; 4
     4f0:	82 80       	ldd	r8, Z+2	; 0x02
     4f2:	93 80       	ldd	r9, Z+3	; 0x03
	void Buffer_SetLine(float xa, float ya, float xb, float yb)
	{	
		// Расчет по формуле y = kx + b
		// Расчет k и особый случай если (xb - xa) = 0
		float k;
		if (xb != xa)
     4f4:	27 2d       	mov	r18, r7
     4f6:	48 2d       	mov	r20, r8
     4f8:	59 2d       	mov	r21, r9
     4fa:	61 2f       	mov	r22, r17
     4fc:	70 2f       	mov	r23, r16
     4fe:	8b 2d       	mov	r24, r11
     500:	9a 2d       	mov	r25, r10
     502:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__cmpsf2>
     506:	88 23       	and	r24, r24
     508:	c9 f1       	breq	.+114    	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
		{
			k = (yb - ya)/(xb - xa);	
     50a:	23 2d       	mov	r18, r3
     50c:	32 2d       	mov	r19, r2
     50e:	45 2d       	mov	r20, r5
     510:	54 2d       	mov	r21, r4
     512:	ca 5b       	subi	r28, 0xBA	; 186
     514:	db 4f       	sbci	r29, 0xFB	; 251
     516:	68 81       	ld	r22, Y
     518:	c6 54       	subi	r28, 0x46	; 70
     51a:	d4 40       	sbci	r29, 0x04	; 4
     51c:	c9 5b       	subi	r28, 0xB9	; 185
     51e:	db 4f       	sbci	r29, 0xFB	; 251
     520:	78 81       	ld	r23, Y
     522:	c7 54       	subi	r28, 0x47	; 71
     524:	d4 40       	sbci	r29, 0x04	; 4
     526:	c8 5b       	subi	r28, 0xB8	; 184
     528:	db 4f       	sbci	r29, 0xFB	; 251
     52a:	88 81       	ld	r24, Y
     52c:	c8 54       	subi	r28, 0x48	; 72
     52e:	d4 40       	sbci	r29, 0x04	; 4
     530:	c7 5b       	subi	r28, 0xB7	; 183
     532:	db 4f       	sbci	r29, 0xFB	; 251
     534:	98 81       	ld	r25, Y
     536:	c9 54       	subi	r28, 0x49	; 73
     538:	d4 40       	sbci	r29, 0x04	; 4
     53a:	0e 94 81 09 	call	0x1302	; 0x1302 <__subsf3>
     53e:	6b 01       	movw	r12, r22
     540:	7c 01       	movw	r14, r24
     542:	27 2d       	mov	r18, r7
     544:	cc 5b       	subi	r28, 0xBC	; 188
     546:	db 4f       	sbci	r29, 0xFB	; 251
     548:	38 81       	ld	r19, Y
     54a:	c4 54       	subi	r28, 0x44	; 68
     54c:	d4 40       	sbci	r29, 0x04	; 4
     54e:	48 2d       	mov	r20, r8
     550:	59 2d       	mov	r21, r9
     552:	61 2f       	mov	r22, r17
     554:	70 2f       	mov	r23, r16
     556:	8b 2d       	mov	r24, r11
     558:	9a 2d       	mov	r25, r10
     55a:	0e 94 81 09 	call	0x1302	; 0x1302 <__subsf3>
     55e:	9b 01       	movw	r18, r22
     560:	ac 01       	movw	r20, r24
     562:	c7 01       	movw	r24, r14
     564:	b6 01       	movw	r22, r12
     566:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__divsf3>
     56a:	cc 5c       	subi	r28, 0xCC	; 204
     56c:	db 4f       	sbci	r29, 0xFB	; 251
     56e:	68 83       	st	Y, r22
     570:	79 83       	std	Y+1, r23	; 0x01
     572:	8a 83       	std	Y+2, r24	; 0x02
     574:	9b 83       	std	Y+3, r25	; 0x03
     576:	c4 53       	subi	r28, 0x34	; 52
     578:	d4 40       	sbci	r29, 0x04	; 4
     57a:	0c c0       	rjmp	.+24     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
		}
		else
		{
			k = 10000.0;
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e4       	ldi	r25, 0x40	; 64
     580:	ac e1       	ldi	r26, 0x1C	; 28
     582:	b6 e4       	ldi	r27, 0x46	; 70
     584:	cc 5c       	subi	r28, 0xCC	; 204
     586:	db 4f       	sbci	r29, 0xFB	; 251
     588:	88 83       	st	Y, r24
     58a:	99 83       	std	Y+1, r25	; 0x01
     58c:	aa 83       	std	Y+2, r26	; 0x02
     58e:	bb 83       	std	Y+3, r27	; 0x03
     590:	c4 53       	subi	r28, 0x34	; 52
     592:	d4 40       	sbci	r29, 0x04	; 4
		}
		
		// Расчет k^(-1) и особый случай если (yb - ya) = 0
		float k_inverse;
		if (yb != ya)
     594:	23 2d       	mov	r18, r3
     596:	32 2d       	mov	r19, r2
     598:	45 2d       	mov	r20, r5
     59a:	54 2d       	mov	r21, r4
     59c:	ca 5b       	subi	r28, 0xBA	; 186
     59e:	db 4f       	sbci	r29, 0xFB	; 251
     5a0:	68 81       	ld	r22, Y
     5a2:	c6 54       	subi	r28, 0x46	; 70
     5a4:	d4 40       	sbci	r29, 0x04	; 4
     5a6:	c9 5b       	subi	r28, 0xB9	; 185
     5a8:	db 4f       	sbci	r29, 0xFB	; 251
     5aa:	78 81       	ld	r23, Y
     5ac:	c7 54       	subi	r28, 0x47	; 71
     5ae:	d4 40       	sbci	r29, 0x04	; 4
     5b0:	c8 5b       	subi	r28, 0xB8	; 184
     5b2:	db 4f       	sbci	r29, 0xFB	; 251
     5b4:	88 81       	ld	r24, Y
     5b6:	c8 54       	subi	r28, 0x48	; 72
     5b8:	d4 40       	sbci	r29, 0x04	; 4
     5ba:	c7 5b       	subi	r28, 0xB7	; 183
     5bc:	db 4f       	sbci	r29, 0xFB	; 251
     5be:	98 81       	ld	r25, Y
     5c0:	c9 54       	subi	r28, 0x49	; 73
     5c2:	d4 40       	sbci	r29, 0x04	; 4
     5c4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__cmpsf2>
     5c8:	88 23       	and	r24, r24
     5ca:	c9 f1       	breq	.+114    	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
		{
			k_inverse = (xb - xa)/(yb - ya);
     5cc:	27 2d       	mov	r18, r7
     5ce:	cc 5b       	subi	r28, 0xBC	; 188
     5d0:	db 4f       	sbci	r29, 0xFB	; 251
     5d2:	38 81       	ld	r19, Y
     5d4:	c4 54       	subi	r28, 0x44	; 68
     5d6:	d4 40       	sbci	r29, 0x04	; 4
     5d8:	48 2d       	mov	r20, r8
     5da:	59 2d       	mov	r21, r9
     5dc:	61 2f       	mov	r22, r17
     5de:	70 2f       	mov	r23, r16
     5e0:	8b 2d       	mov	r24, r11
     5e2:	9a 2d       	mov	r25, r10
     5e4:	0e 94 81 09 	call	0x1302	; 0x1302 <__subsf3>
     5e8:	6b 01       	movw	r12, r22
     5ea:	7c 01       	movw	r14, r24
     5ec:	23 2d       	mov	r18, r3
     5ee:	32 2d       	mov	r19, r2
     5f0:	45 2d       	mov	r20, r5
     5f2:	54 2d       	mov	r21, r4
     5f4:	ca 5b       	subi	r28, 0xBA	; 186
     5f6:	db 4f       	sbci	r29, 0xFB	; 251
     5f8:	68 81       	ld	r22, Y
     5fa:	c6 54       	subi	r28, 0x46	; 70
     5fc:	d4 40       	sbci	r29, 0x04	; 4
     5fe:	c9 5b       	subi	r28, 0xB9	; 185
     600:	db 4f       	sbci	r29, 0xFB	; 251
     602:	78 81       	ld	r23, Y
     604:	c7 54       	subi	r28, 0x47	; 71
     606:	d4 40       	sbci	r29, 0x04	; 4
     608:	c8 5b       	subi	r28, 0xB8	; 184
     60a:	db 4f       	sbci	r29, 0xFB	; 251
     60c:	88 81       	ld	r24, Y
     60e:	c8 54       	subi	r28, 0x48	; 72
     610:	d4 40       	sbci	r29, 0x04	; 4
     612:	c7 5b       	subi	r28, 0xB7	; 183
     614:	db 4f       	sbci	r29, 0xFB	; 251
     616:	98 81       	ld	r25, Y
     618:	c9 54       	subi	r28, 0x49	; 73
     61a:	d4 40       	sbci	r29, 0x04	; 4
     61c:	0e 94 81 09 	call	0x1302	; 0x1302 <__subsf3>
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
     624:	c7 01       	movw	r24, r14
     626:	b6 01       	movw	r22, r12
     628:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__divsf3>
     62c:	c4 5c       	subi	r28, 0xC4	; 196
     62e:	db 4f       	sbci	r29, 0xFB	; 251
     630:	68 83       	st	Y, r22
     632:	79 83       	std	Y+1, r23	; 0x01
     634:	8a 83       	std	Y+2, r24	; 0x02
     636:	9b 83       	std	Y+3, r25	; 0x03
     638:	cc 53       	subi	r28, 0x3C	; 60
     63a:	d4 40       	sbci	r29, 0x04	; 4
     63c:	0c c0       	rjmp	.+24     	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
		}
		else
		{
			k_inverse = 10000.0;
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e4       	ldi	r19, 0x40	; 64
     642:	4c e1       	ldi	r20, 0x1C	; 28
     644:	56 e4       	ldi	r21, 0x46	; 70
     646:	c4 5c       	subi	r28, 0xC4	; 196
     648:	db 4f       	sbci	r29, 0xFB	; 251
     64a:	28 83       	st	Y, r18
     64c:	39 83       	std	Y+1, r19	; 0x01
     64e:	4a 83       	std	Y+2, r20	; 0x02
     650:	5b 83       	std	Y+3, r21	; 0x03
     652:	cc 53       	subi	r28, 0x3C	; 60
     654:	d4 40       	sbci	r29, 0x04	; 4
		}
		
		// Расчет b и b_inverse = b/k - xa
		float b = ya - k * xa;
     656:	cc 5c       	subi	r28, 0xCC	; 204
     658:	db 4f       	sbci	r29, 0xFB	; 251
     65a:	28 81       	ld	r18, Y
     65c:	39 81       	ldd	r19, Y+1	; 0x01
     65e:	4a 81       	ldd	r20, Y+2	; 0x02
     660:	5b 81       	ldd	r21, Y+3	; 0x03
     662:	c4 53       	subi	r28, 0x34	; 52
     664:	d4 40       	sbci	r29, 0x04	; 4
     666:	67 2d       	mov	r22, r7
     668:	cc 5b       	subi	r28, 0xBC	; 188
     66a:	db 4f       	sbci	r29, 0xFB	; 251
     66c:	78 81       	ld	r23, Y
     66e:	c4 54       	subi	r28, 0x44	; 68
     670:	d4 40       	sbci	r29, 0x04	; 4
     672:	88 2d       	mov	r24, r8
     674:	99 2d       	mov	r25, r9
     676:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	63 2d       	mov	r22, r3
     680:	72 2d       	mov	r23, r2
     682:	85 2d       	mov	r24, r5
     684:	94 2d       	mov	r25, r4
     686:	0e 94 81 09 	call	0x1302	; 0x1302 <__subsf3>
     68a:	c8 5c       	subi	r28, 0xC8	; 200
     68c:	db 4f       	sbci	r29, 0xFB	; 251
     68e:	68 83       	st	Y, r22
     690:	79 83       	std	Y+1, r23	; 0x01
     692:	8a 83       	std	Y+2, r24	; 0x02
     694:	9b 83       	std	Y+3, r25	; 0x03
     696:	c8 53       	subi	r28, 0x38	; 56
     698:	d4 40       	sbci	r29, 0x04	; 4
		float b_inverse = k_inverse * ya - xa;
     69a:	c4 5c       	subi	r28, 0xC4	; 196
     69c:	db 4f       	sbci	r29, 0xFB	; 251
     69e:	28 81       	ld	r18, Y
     6a0:	39 81       	ldd	r19, Y+1	; 0x01
     6a2:	4a 81       	ldd	r20, Y+2	; 0x02
     6a4:	5b 81       	ldd	r21, Y+3	; 0x03
     6a6:	cc 53       	subi	r28, 0x3C	; 60
     6a8:	d4 40       	sbci	r29, 0x04	; 4
     6aa:	63 2d       	mov	r22, r3
     6ac:	72 2d       	mov	r23, r2
     6ae:	85 2d       	mov	r24, r5
     6b0:	94 2d       	mov	r25, r4
     6b2:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
     6b6:	27 2d       	mov	r18, r7
     6b8:	cc 5b       	subi	r28, 0xBC	; 188
     6ba:	db 4f       	sbci	r29, 0xFB	; 251
     6bc:	38 81       	ld	r19, Y
     6be:	c4 54       	subi	r28, 0x44	; 68
     6c0:	d4 40       	sbci	r29, 0x04	; 4
     6c2:	48 2d       	mov	r20, r8
     6c4:	59 2d       	mov	r21, r9
     6c6:	0e 94 81 09 	call	0x1302	; 0x1302 <__subsf3>
     6ca:	c0 5c       	subi	r28, 0xC0	; 192
     6cc:	db 4f       	sbci	r29, 0xFB	; 251
     6ce:	68 83       	st	Y, r22
     6d0:	79 83       	std	Y+1, r23	; 0x01
     6d2:	8a 83       	std	Y+2, r24	; 0x02
     6d4:	9b 83       	std	Y+3, r25	; 0x03
     6d6:	c0 54       	subi	r28, 0x40	; 64
     6d8:	d4 40       	sbci	r29, 0x04	; 4
		
		// Определение диапазона отрисовки		
		if (xb < xa)
     6da:	27 2d       	mov	r18, r7
     6dc:	cc 5b       	subi	r28, 0xBC	; 188
     6de:	db 4f       	sbci	r29, 0xFB	; 251
     6e0:	38 81       	ld	r19, Y
     6e2:	c4 54       	subi	r28, 0x44	; 68
     6e4:	d4 40       	sbci	r29, 0x04	; 4
     6e6:	48 2d       	mov	r20, r8
     6e8:	59 2d       	mov	r21, r9
     6ea:	61 2f       	mov	r22, r17
     6ec:	70 2f       	mov	r23, r16
     6ee:	8b 2d       	mov	r24, r11
     6f0:	9a 2d       	mov	r25, r10
     6f2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__cmpsf2>
     6f6:	88 23       	and	r24, r24
     6f8:	a4 f0       	brlt	.+40     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
     6fa:	31 2f       	mov	r19, r17
     6fc:	20 2f       	mov	r18, r16
     6fe:	9b 2d       	mov	r25, r11
     700:	8a 2d       	mov	r24, r10
     702:	17 2d       	mov	r17, r7
     704:	cc 5b       	subi	r28, 0xBC	; 188
     706:	db 4f       	sbci	r29, 0xFB	; 251
     708:	08 81       	ld	r16, Y
     70a:	c4 54       	subi	r28, 0x44	; 68
     70c:	d4 40       	sbci	r29, 0x04	; 4
     70e:	b8 2c       	mov	r11, r8
     710:	a9 2c       	mov	r10, r9
     712:	73 2e       	mov	r7, r19
     714:	cc 5b       	subi	r28, 0xBC	; 188
     716:	db 4f       	sbci	r29, 0xFB	; 251
     718:	28 83       	st	Y, r18
     71a:	c4 54       	subi	r28, 0x44	; 68
     71c:	d4 40       	sbci	r29, 0x04	; 4
     71e:	89 2e       	mov	r8, r25
     720:	98 2e       	mov	r9, r24
			xtemp = xa;
			xa = xb;
			xb = xtemp;
		}
		// Отрисовка по x
		for(signed char x = xa; x <= xb; x++)
     722:	61 2f       	mov	r22, r17
     724:	70 2f       	mov	r23, r16
     726:	8b 2d       	mov	r24, r11
     728:	9a 2d       	mov	r25, r10
     72a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     72e:	66 2e       	mov	r6, r22
     730:	cc 5a       	subi	r28, 0xAC	; 172
     732:	db 4f       	sbci	r29, 0xFB	; 251
     734:	38 82       	st	Y, r3
     736:	c4 55       	subi	r28, 0x54	; 84
     738:	d4 40       	sbci	r29, 0x04	; 4
     73a:	cb 5a       	subi	r28, 0xAB	; 171
     73c:	db 4f       	sbci	r29, 0xFB	; 251
     73e:	28 82       	st	Y, r2
     740:	c5 55       	subi	r28, 0x55	; 85
     742:	d4 40       	sbci	r29, 0x04	; 4
     744:	ca 5a       	subi	r28, 0xAA	; 170
     746:	db 4f       	sbci	r29, 0xFB	; 251
     748:	58 82       	st	Y, r5
     74a:	c6 55       	subi	r28, 0x56	; 86
     74c:	d4 40       	sbci	r29, 0x04	; 4
     74e:	c9 5a       	subi	r28, 0xA9	; 169
     750:	db 4f       	sbci	r29, 0xFB	; 251
     752:	48 82       	st	Y, r4
     754:	c7 55       	subi	r28, 0x57	; 87
     756:	d4 40       	sbci	r29, 0x04	; 4
     758:	57 2c       	mov	r5, r7
     75a:	cc 5b       	subi	r28, 0xBC	; 188
     75c:	db 4f       	sbci	r29, 0xFB	; 251
     75e:	48 80       	ld	r4, Y
     760:	c4 54       	subi	r28, 0x44	; 68
     762:	d4 40       	sbci	r29, 0x04	; 4
     764:	38 2c       	mov	r3, r8
     766:	29 2c       	mov	r2, r9
     768:	66 2d       	mov	r22, r6
     76a:	06 2c       	mov	r0, r6
     76c:	00 0c       	add	r0, r0
     76e:	77 0b       	sbc	r23, r23
     770:	88 0b       	sbc	r24, r24
     772:	99 0b       	sbc	r25, r25
     774:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     778:	6b 01       	movw	r12, r22
     77a:	7c 01       	movw	r14, r24
     77c:	25 2d       	mov	r18, r5
     77e:	34 2d       	mov	r19, r4
     780:	43 2d       	mov	r20, r3
     782:	52 2d       	mov	r21, r2
     784:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__cmpsf2>
     788:	18 16       	cp	r1, r24
     78a:	0c f4       	brge	.+2      	; 0x78e <__EEPROM_REGION_LENGTH__+0x38e>
     78c:	cc c0       	rjmp	.+408    	; 0x926 <__stack+0xc7>
		{
			Buffer_SetPixel(x, (int)((float)k * x + b));
     78e:	a7 01       	movw	r20, r14
     790:	96 01       	movw	r18, r12
     792:	cc 5c       	subi	r28, 0xCC	; 204
     794:	db 4f       	sbci	r29, 0xFB	; 251
     796:	68 81       	ld	r22, Y
     798:	79 81       	ldd	r23, Y+1	; 0x01
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	9b 81       	ldd	r25, Y+3	; 0x03
     79e:	c4 53       	subi	r28, 0x34	; 52
     7a0:	d4 40       	sbci	r29, 0x04	; 4
     7a2:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
     7a6:	9b 01       	movw	r18, r22
     7a8:	ac 01       	movw	r20, r24
     7aa:	c8 5c       	subi	r28, 0xC8	; 200
     7ac:	db 4f       	sbci	r29, 0xFB	; 251
     7ae:	68 81       	ld	r22, Y
     7b0:	79 81       	ldd	r23, Y+1	; 0x01
     7b2:	8a 81       	ldd	r24, Y+2	; 0x02
     7b4:	9b 81       	ldd	r25, Y+3	; 0x03
     7b6:	c8 53       	subi	r28, 0x38	; 56
     7b8:	d4 40       	sbci	r29, 0x04	; 4
     7ba:	0e 94 82 09 	call	0x1304	; 0x1304 <__addsf3>
     7be:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     7c2:	4b 01       	movw	r8, r22
     7c4:	5c 01       	movw	r10, r24
     7c6:	e6 2c       	mov	r14, r6
     7c8:	06 2c       	mov	r0, r6
     7ca:	00 0c       	add	r0, r0
     7cc:	ff 08       	sbc	r15, r15
	
	
	void Buffer_SetPixel(int x, int y)
	{	
		// Граничные условия экрана
		if (x >= (127 - Xshift) || x <= -(127 - Xshift) || y >= (63 - Yshift) || y <= -(63 - Yshift)){return;}
     7ce:	0a 81       	ldd	r16, Y+2	; 0x02
     7d0:	00 2e       	mov	r0, r16
     7d2:	00 0c       	add	r0, r0
     7d4:	11 0b       	sbc	r17, r17
     7d6:	8f e7       	ldi	r24, 0x7F	; 127
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	80 1b       	sub	r24, r16
     7dc:	91 0b       	sbc	r25, r17
     7de:	e8 16       	cp	r14, r24
     7e0:	f9 06       	cpc	r15, r25
     7e2:	0c f0       	brlt	.+2      	; 0x7e6 <__EEPROM_REGION_LENGTH__+0x3e6>
     7e4:	9e c0       	rjmp	.+316    	; 0x922 <__stack+0xc3>
     7e6:	c8 01       	movw	r24, r16
     7e8:	8f 57       	subi	r24, 0x7F	; 127
     7ea:	91 09       	sbc	r25, r1
     7ec:	8e 15       	cp	r24, r14
     7ee:	9f 05       	cpc	r25, r15
     7f0:	0c f0       	brlt	.+2      	; 0x7f4 <__EEPROM_REGION_LENGTH__+0x3f4>
     7f2:	97 c0       	rjmp	.+302    	; 0x922 <__stack+0xc3>
     7f4:	7b 80       	ldd	r7, Y+3	; 0x03
     7f6:	c7 2c       	mov	r12, r7
     7f8:	07 2c       	mov	r0, r7
     7fa:	00 0c       	add	r0, r0
     7fc:	dd 08       	sbc	r13, r13
     7fe:	8f e3       	ldi	r24, 0x3F	; 63
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	8c 19       	sub	r24, r12
     804:	9d 09       	sbc	r25, r13
     806:	88 16       	cp	r8, r24
     808:	99 06       	cpc	r9, r25
     80a:	0c f0       	brlt	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80c:	8a c0       	rjmp	.+276    	; 0x922 <__stack+0xc3>
     80e:	c6 01       	movw	r24, r12
     810:	cf 97       	sbiw	r24, 0x3f	; 63
     812:	88 15       	cp	r24, r8
     814:	99 05       	cpc	r25, r9
     816:	0c f0       	brlt	.+2      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     818:	84 c0       	rjmp	.+264    	; 0x922 <__stack+0xc3>
		// Функция
		Buffer[(int)((((-y - Yshift) / 8) * 128) + x + Xshift) + (int)((y + (float)Yshift) / 8) * 256] |= (1 << ((y + Yshift) % 8));		
     81a:	88 27       	eor	r24, r24
     81c:	99 27       	eor	r25, r25
     81e:	88 19       	sub	r24, r8
     820:	99 09       	sbc	r25, r9
     822:	8c 19       	sub	r24, r12
     824:	9d 09       	sbc	r25, r13
     826:	9c 01       	movw	r18, r24
     828:	12 f4       	brpl	.+4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     82a:	29 5f       	subi	r18, 0xF9	; 249
     82c:	3f 4f       	sbci	r19, 0xFF	; 255
     82e:	a9 01       	movw	r20, r18
     830:	55 95       	asr	r21
     832:	47 95       	ror	r20
     834:	55 95       	asr	r21
     836:	47 95       	ror	r20
     838:	55 95       	asr	r21
     83a:	47 95       	ror	r20
     83c:	cc 5b       	subi	r28, 0xBC	; 188
     83e:	db 4f       	sbci	r29, 0xFB	; 251
     840:	59 83       	std	Y+1, r21	; 0x01
     842:	48 83       	st	Y, r20
     844:	c4 54       	subi	r28, 0x44	; 68
     846:	d4 40       	sbci	r29, 0x04	; 4
     848:	b4 01       	movw	r22, r8
     84a:	09 2c       	mov	r0, r9
     84c:	00 0c       	add	r0, r0
     84e:	88 0b       	sbc	r24, r24
     850:	99 0b       	sbc	r25, r25
     852:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     856:	c0 5b       	subi	r28, 0xB0	; 176
     858:	db 4f       	sbci	r29, 0xFB	; 251
     85a:	68 83       	st	Y, r22
     85c:	79 83       	std	Y+1, r23	; 0x01
     85e:	8a 83       	std	Y+2, r24	; 0x02
     860:	9b 83       	std	Y+3, r25	; 0x03
     862:	c0 55       	subi	r28, 0x50	; 80
     864:	d4 40       	sbci	r29, 0x04	; 4
     866:	67 2d       	mov	r22, r7
     868:	77 0c       	add	r7, r7
     86a:	77 0b       	sbc	r23, r23
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     874:	9b 01       	movw	r18, r22
     876:	ac 01       	movw	r20, r24
     878:	c0 5b       	subi	r28, 0xB0	; 176
     87a:	db 4f       	sbci	r29, 0xFB	; 251
     87c:	68 81       	ld	r22, Y
     87e:	79 81       	ldd	r23, Y+1	; 0x01
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	9b 81       	ldd	r25, Y+3	; 0x03
     884:	c0 55       	subi	r28, 0x50	; 80
     886:	d4 40       	sbci	r29, 0x04	; 4
     888:	0e 94 82 09 	call	0x1304	; 0x1304 <__addsf3>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	5e e3       	ldi	r21, 0x3E	; 62
     894:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
     898:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     89c:	c3 5b       	subi	r28, 0xB3	; 179
     89e:	db 4f       	sbci	r29, 0xFB	; 251
     8a0:	68 83       	st	Y, r22
     8a2:	cd 54       	subi	r28, 0x4D	; 77
     8a4:	d4 40       	sbci	r29, 0x04	; 4
     8a6:	c4 5b       	subi	r28, 0xB4	; 180
     8a8:	db 4f       	sbci	r29, 0xFB	; 251
     8aa:	18 82       	st	Y, r1
     8ac:	cc 54       	subi	r28, 0x4C	; 76
     8ae:	d4 40       	sbci	r29, 0x04	; 4
     8b0:	cc 5b       	subi	r28, 0xBC	; 188
     8b2:	db 4f       	sbci	r29, 0xFB	; 251
     8b4:	88 81       	ld	r24, Y
     8b6:	99 81       	ldd	r25, Y+1	; 0x01
     8b8:	c4 54       	subi	r28, 0x44	; 68
     8ba:	d4 40       	sbci	r29, 0x04	; 4
     8bc:	96 95       	lsr	r25
     8be:	98 2f       	mov	r25, r24
     8c0:	88 27       	eor	r24, r24
     8c2:	97 95       	ror	r25
     8c4:	87 95       	ror	r24
     8c6:	e8 0e       	add	r14, r24
     8c8:	f9 1e       	adc	r15, r25
     8ca:	0e 0d       	add	r16, r14
     8cc:	1f 1d       	adc	r17, r15
     8ce:	c4 5b       	subi	r28, 0xB4	; 180
     8d0:	db 4f       	sbci	r29, 0xFB	; 251
     8d2:	88 81       	ld	r24, Y
     8d4:	99 81       	ldd	r25, Y+1	; 0x01
     8d6:	cc 54       	subi	r28, 0x4C	; 76
     8d8:	d4 40       	sbci	r29, 0x04	; 4
     8da:	08 0f       	add	r16, r24
     8dc:	19 1f       	adc	r17, r25
     8de:	8c 0c       	add	r8, r12
     8e0:	9d 1c       	adc	r9, r13
     8e2:	97 e0       	ldi	r25, 0x07	; 7
     8e4:	89 22       	and	r8, r25
     8e6:	90 e8       	ldi	r25, 0x80	; 128
     8e8:	99 22       	and	r9, r25
     8ea:	99 20       	and	r9, r9
     8ec:	54 f4       	brge	.+20     	; 0x902 <__stack+0xa3>
     8ee:	a1 e0       	ldi	r26, 0x01	; 1
     8f0:	8a 1a       	sub	r8, r26
     8f2:	91 08       	sbc	r9, r1
     8f4:	b8 ef       	ldi	r27, 0xF8	; 248
     8f6:	8b 2a       	or	r8, r27
     8f8:	99 24       	eor	r9, r9
     8fa:	9a 94       	dec	r9
     8fc:	2f ef       	ldi	r18, 0xFF	; 255
     8fe:	82 1a       	sub	r8, r18
     900:	92 0a       	sbc	r9, r18
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xad>
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	8a 94       	dec	r8
     90e:	e2 f7       	brpl	.-8      	; 0x908 <__stack+0xa9>
     910:	e4 e0       	ldi	r30, 0x04	; 4
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	ec 0f       	add	r30, r28
     916:	fd 1f       	adc	r31, r29
     918:	e0 0f       	add	r30, r16
     91a:	f1 1f       	adc	r31, r17
     91c:	90 81       	ld	r25, Z
     91e:	89 2b       	or	r24, r25
     920:	80 83       	st	Z, r24
			xtemp = xa;
			xa = xb;
			xb = xtemp;
		}
		// Отрисовка по x
		for(signed char x = xa; x <= xb; x++)
     922:	63 94       	inc	r6
     924:	21 cf       	rjmp	.-446    	; 0x768 <__EEPROM_REGION_LENGTH__+0x368>
     926:	cc 5a       	subi	r28, 0xAC	; 172
     928:	db 4f       	sbci	r29, 0xFB	; 251
     92a:	38 80       	ld	r3, Y
     92c:	c4 55       	subi	r28, 0x54	; 84
     92e:	d4 40       	sbci	r29, 0x04	; 4
     930:	cb 5a       	subi	r28, 0xAB	; 171
     932:	db 4f       	sbci	r29, 0xFB	; 251
     934:	28 80       	ld	r2, Y
     936:	c5 55       	subi	r28, 0x55	; 85
     938:	d4 40       	sbci	r29, 0x04	; 4
     93a:	ca 5a       	subi	r28, 0xAA	; 170
     93c:	db 4f       	sbci	r29, 0xFB	; 251
     93e:	58 80       	ld	r5, Y
     940:	c6 55       	subi	r28, 0x56	; 86
     942:	d4 40       	sbci	r29, 0x04	; 4
     944:	c9 5a       	subi	r28, 0xA9	; 169
     946:	db 4f       	sbci	r29, 0xFB	; 251
     948:	48 80       	ld	r4, Y
     94a:	c7 55       	subi	r28, 0x57	; 87
     94c:	d4 40       	sbci	r29, 0x04	; 4
		{
			Buffer_SetPixel(x, (int)((float)k * x + b));
		}
		
		// Определение диапазона отрисовки	
		if (yb < ya)
     94e:	23 2d       	mov	r18, r3
     950:	32 2d       	mov	r19, r2
     952:	45 2d       	mov	r20, r5
     954:	54 2d       	mov	r21, r4
     956:	ca 5b       	subi	r28, 0xBA	; 186
     958:	db 4f       	sbci	r29, 0xFB	; 251
     95a:	68 81       	ld	r22, Y
     95c:	c6 54       	subi	r28, 0x46	; 70
     95e:	d4 40       	sbci	r29, 0x04	; 4
     960:	c9 5b       	subi	r28, 0xB9	; 185
     962:	db 4f       	sbci	r29, 0xFB	; 251
     964:	78 81       	ld	r23, Y
     966:	c7 54       	subi	r28, 0x47	; 71
     968:	d4 40       	sbci	r29, 0x04	; 4
     96a:	c8 5b       	subi	r28, 0xB8	; 184
     96c:	db 4f       	sbci	r29, 0xFB	; 251
     96e:	88 81       	ld	r24, Y
     970:	c8 54       	subi	r28, 0x48	; 72
     972:	d4 40       	sbci	r29, 0x04	; 4
     974:	c7 5b       	subi	r28, 0xB7	; 183
     976:	db 4f       	sbci	r29, 0xFB	; 251
     978:	98 81       	ld	r25, Y
     97a:	c9 54       	subi	r28, 0x49	; 73
     97c:	d4 40       	sbci	r29, 0x04	; 4
     97e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__cmpsf2>
     982:	88 23       	and	r24, r24
     984:	64 f1       	brlt	.+88     	; 0x9de <__stack+0x17f>
     986:	ca 5b       	subi	r28, 0xBA	; 186
     988:	db 4f       	sbci	r29, 0xFB	; 251
     98a:	38 81       	ld	r19, Y
     98c:	c6 54       	subi	r28, 0x46	; 70
     98e:	d4 40       	sbci	r29, 0x04	; 4
     990:	c9 5b       	subi	r28, 0xB9	; 185
     992:	db 4f       	sbci	r29, 0xFB	; 251
     994:	28 81       	ld	r18, Y
     996:	c7 54       	subi	r28, 0x47	; 71
     998:	d4 40       	sbci	r29, 0x04	; 4
     99a:	c8 5b       	subi	r28, 0xB8	; 184
     99c:	db 4f       	sbci	r29, 0xFB	; 251
     99e:	98 81       	ld	r25, Y
     9a0:	c8 54       	subi	r28, 0x48	; 72
     9a2:	d4 40       	sbci	r29, 0x04	; 4
     9a4:	c7 5b       	subi	r28, 0xB7	; 183
     9a6:	db 4f       	sbci	r29, 0xFB	; 251
     9a8:	88 81       	ld	r24, Y
     9aa:	c9 54       	subi	r28, 0x49	; 73
     9ac:	d4 40       	sbci	r29, 0x04	; 4
     9ae:	ca 5b       	subi	r28, 0xBA	; 186
     9b0:	db 4f       	sbci	r29, 0xFB	; 251
     9b2:	38 82       	st	Y, r3
     9b4:	c6 54       	subi	r28, 0x46	; 70
     9b6:	d4 40       	sbci	r29, 0x04	; 4
     9b8:	c9 5b       	subi	r28, 0xB9	; 185
     9ba:	db 4f       	sbci	r29, 0xFB	; 251
     9bc:	28 82       	st	Y, r2
     9be:	c7 54       	subi	r28, 0x47	; 71
     9c0:	d4 40       	sbci	r29, 0x04	; 4
     9c2:	c8 5b       	subi	r28, 0xB8	; 184
     9c4:	db 4f       	sbci	r29, 0xFB	; 251
     9c6:	58 82       	st	Y, r5
     9c8:	c8 54       	subi	r28, 0x48	; 72
     9ca:	d4 40       	sbci	r29, 0x04	; 4
     9cc:	c7 5b       	subi	r28, 0xB7	; 183
     9ce:	db 4f       	sbci	r29, 0xFB	; 251
     9d0:	48 82       	st	Y, r4
     9d2:	c9 54       	subi	r28, 0x49	; 73
     9d4:	d4 40       	sbci	r29, 0x04	; 4
     9d6:	33 2e       	mov	r3, r19
     9d8:	22 2e       	mov	r2, r18
     9da:	59 2e       	mov	r5, r25
     9dc:	48 2e       	mov	r4, r24
			ytemp = ya;
			ya = yb;
			yb = ytemp;
		}
		// Отрисовка по y	
		for(signed char y = ya; y <= yb; y++)
     9de:	ca 5b       	subi	r28, 0xBA	; 186
     9e0:	db 4f       	sbci	r29, 0xFB	; 251
     9e2:	68 81       	ld	r22, Y
     9e4:	c6 54       	subi	r28, 0x46	; 70
     9e6:	d4 40       	sbci	r29, 0x04	; 4
     9e8:	c9 5b       	subi	r28, 0xB9	; 185
     9ea:	db 4f       	sbci	r29, 0xFB	; 251
     9ec:	78 81       	ld	r23, Y
     9ee:	c7 54       	subi	r28, 0x47	; 71
     9f0:	d4 40       	sbci	r29, 0x04	; 4
     9f2:	c8 5b       	subi	r28, 0xB8	; 184
     9f4:	db 4f       	sbci	r29, 0xFB	; 251
     9f6:	88 81       	ld	r24, Y
     9f8:	c8 54       	subi	r28, 0x48	; 72
     9fa:	d4 40       	sbci	r29, 0x04	; 4
     9fc:	c7 5b       	subi	r28, 0xB7	; 183
     9fe:	db 4f       	sbci	r29, 0xFB	; 251
     a00:	98 81       	ld	r25, Y
     a02:	c9 54       	subi	r28, 0x49	; 73
     a04:	d4 40       	sbci	r29, 0x04	; 4
     a06:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     a0a:	66 2e       	mov	r6, r22
     a0c:	66 2d       	mov	r22, r6
     a0e:	06 2c       	mov	r0, r6
     a10:	00 0c       	add	r0, r0
     a12:	77 0b       	sbc	r23, r23
     a14:	88 0b       	sbc	r24, r24
     a16:	99 0b       	sbc	r25, r25
     a18:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     a1c:	4b 01       	movw	r8, r22
     a1e:	5c 01       	movw	r10, r24
     a20:	23 2d       	mov	r18, r3
     a22:	32 2d       	mov	r19, r2
     a24:	45 2d       	mov	r20, r5
     a26:	54 2d       	mov	r21, r4
     a28:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__cmpsf2>
     a2c:	18 16       	cp	r1, r24
     a2e:	0c f4       	brge	.+2      	; 0xa32 <__stack+0x1d3>
     a30:	ca c0       	rjmp	.+404    	; 0xbc6 <__stack+0x367>
		{
			Buffer_SetPixel((int)((float)k_inverse * y - b_inverse), y);
     a32:	c6 2c       	mov	r12, r6
     a34:	06 2c       	mov	r0, r6
     a36:	00 0c       	add	r0, r0
     a38:	dd 08       	sbc	r13, r13
     a3a:	a5 01       	movw	r20, r10
     a3c:	94 01       	movw	r18, r8
     a3e:	c4 5c       	subi	r28, 0xC4	; 196
     a40:	db 4f       	sbci	r29, 0xFB	; 251
     a42:	68 81       	ld	r22, Y
     a44:	79 81       	ldd	r23, Y+1	; 0x01
     a46:	8a 81       	ldd	r24, Y+2	; 0x02
     a48:	9b 81       	ldd	r25, Y+3	; 0x03
     a4a:	cc 53       	subi	r28, 0x3C	; 60
     a4c:	d4 40       	sbci	r29, 0x04	; 4
     a4e:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
     a52:	c0 5c       	subi	r28, 0xC0	; 192
     a54:	db 4f       	sbci	r29, 0xFB	; 251
     a56:	28 81       	ld	r18, Y
     a58:	39 81       	ldd	r19, Y+1	; 0x01
     a5a:	4a 81       	ldd	r20, Y+2	; 0x02
     a5c:	5b 81       	ldd	r21, Y+3	; 0x03
     a5e:	c0 54       	subi	r28, 0x40	; 64
     a60:	d4 40       	sbci	r29, 0x04	; 4
     a62:	0e 94 81 09 	call	0x1302	; 0x1302 <__subsf3>
     a66:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     a6a:	4b 01       	movw	r8, r22
     a6c:	5c 01       	movw	r10, r24
	
	
	void Buffer_SetPixel(int x, int y)
	{	
		// Граничные условия экрана
		if (x >= (127 - Xshift) || x <= -(127 - Xshift) || y >= (63 - Yshift) || y <= -(63 - Yshift)){return;}
     a6e:	0a 81       	ldd	r16, Y+2	; 0x02
     a70:	00 2e       	mov	r0, r16
     a72:	00 0c       	add	r0, r0
     a74:	11 0b       	sbc	r17, r17
     a76:	8f e7       	ldi	r24, 0x7F	; 127
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	80 1b       	sub	r24, r16
     a7c:	91 0b       	sbc	r25, r17
     a7e:	88 16       	cp	r8, r24
     a80:	99 06       	cpc	r9, r25
     a82:	0c f0       	brlt	.+2      	; 0xa86 <__stack+0x227>
     a84:	9e c0       	rjmp	.+316    	; 0xbc2 <__stack+0x363>
     a86:	c8 01       	movw	r24, r16
     a88:	8f 57       	subi	r24, 0x7F	; 127
     a8a:	91 09       	sbc	r25, r1
     a8c:	88 15       	cp	r24, r8
     a8e:	99 05       	cpc	r25, r9
     a90:	0c f0       	brlt	.+2      	; 0xa94 <__stack+0x235>
     a92:	97 c0       	rjmp	.+302    	; 0xbc2 <__stack+0x363>
     a94:	7b 80       	ldd	r7, Y+3	; 0x03
     a96:	e7 2c       	mov	r14, r7
     a98:	07 2c       	mov	r0, r7
     a9a:	00 0c       	add	r0, r0
     a9c:	ff 08       	sbc	r15, r15
     a9e:	8f e3       	ldi	r24, 0x3F	; 63
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	8e 19       	sub	r24, r14
     aa4:	9f 09       	sbc	r25, r15
     aa6:	c8 16       	cp	r12, r24
     aa8:	d9 06       	cpc	r13, r25
     aaa:	0c f0       	brlt	.+2      	; 0xaae <__stack+0x24f>
     aac:	8a c0       	rjmp	.+276    	; 0xbc2 <__stack+0x363>
     aae:	c7 01       	movw	r24, r14
     ab0:	cf 97       	sbiw	r24, 0x3f	; 63
     ab2:	8c 15       	cp	r24, r12
     ab4:	9d 05       	cpc	r25, r13
     ab6:	0c f0       	brlt	.+2      	; 0xaba <__stack+0x25b>
     ab8:	84 c0       	rjmp	.+264    	; 0xbc2 <__stack+0x363>
		// Функция
		Buffer[(int)((((-y - Yshift) / 8) * 128) + x + Xshift) + (int)((y + (float)Yshift) / 8) * 256] |= (1 << ((y + Yshift) % 8));		
     aba:	88 27       	eor	r24, r24
     abc:	99 27       	eor	r25, r25
     abe:	8c 19       	sub	r24, r12
     ac0:	9d 09       	sbc	r25, r13
     ac2:	8e 19       	sub	r24, r14
     ac4:	9f 09       	sbc	r25, r15
     ac6:	9c 01       	movw	r18, r24
     ac8:	12 f4       	brpl	.+4      	; 0xace <__stack+0x26f>
     aca:	29 5f       	subi	r18, 0xF9	; 249
     acc:	3f 4f       	sbci	r19, 0xFF	; 255
     ace:	a9 01       	movw	r20, r18
     ad0:	55 95       	asr	r21
     ad2:	47 95       	ror	r20
     ad4:	55 95       	asr	r21
     ad6:	47 95       	ror	r20
     ad8:	55 95       	asr	r21
     ada:	47 95       	ror	r20
     adc:	cc 5c       	subi	r28, 0xCC	; 204
     ade:	db 4f       	sbci	r29, 0xFB	; 251
     ae0:	59 83       	std	Y+1, r21	; 0x01
     ae2:	48 83       	st	Y, r20
     ae4:	c4 53       	subi	r28, 0x34	; 52
     ae6:	d4 40       	sbci	r29, 0x04	; 4
     ae8:	b6 01       	movw	r22, r12
     aea:	0d 2c       	mov	r0, r13
     aec:	00 0c       	add	r0, r0
     aee:	88 0b       	sbc	r24, r24
     af0:	99 0b       	sbc	r25, r25
     af2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     af6:	c8 5c       	subi	r28, 0xC8	; 200
     af8:	db 4f       	sbci	r29, 0xFB	; 251
     afa:	68 83       	st	Y, r22
     afc:	79 83       	std	Y+1, r23	; 0x01
     afe:	8a 83       	std	Y+2, r24	; 0x02
     b00:	9b 83       	std	Y+3, r25	; 0x03
     b02:	c8 53       	subi	r28, 0x38	; 56
     b04:	d4 40       	sbci	r29, 0x04	; 4
     b06:	67 2d       	mov	r22, r7
     b08:	77 0c       	add	r7, r7
     b0a:	77 0b       	sbc	r23, r23
     b0c:	88 0b       	sbc	r24, r24
     b0e:	99 0b       	sbc	r25, r25
     b10:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     b14:	9b 01       	movw	r18, r22
     b16:	ac 01       	movw	r20, r24
     b18:	c8 5c       	subi	r28, 0xC8	; 200
     b1a:	db 4f       	sbci	r29, 0xFB	; 251
     b1c:	68 81       	ld	r22, Y
     b1e:	79 81       	ldd	r23, Y+1	; 0x01
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	9b 81       	ldd	r25, Y+3	; 0x03
     b24:	c8 53       	subi	r28, 0x38	; 56
     b26:	d4 40       	sbci	r29, 0x04	; 4
     b28:	0e 94 82 09 	call	0x1304	; 0x1304 <__addsf3>
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	5e e3       	ldi	r21, 0x3E	; 62
     b34:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
     b38:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     b3c:	c1 5b       	subi	r28, 0xB1	; 177
     b3e:	db 4f       	sbci	r29, 0xFB	; 251
     b40:	68 83       	st	Y, r22
     b42:	cf 54       	subi	r28, 0x4F	; 79
     b44:	d4 40       	sbci	r29, 0x04	; 4
     b46:	c2 5b       	subi	r28, 0xB2	; 178
     b48:	db 4f       	sbci	r29, 0xFB	; 251
     b4a:	18 82       	st	Y, r1
     b4c:	ce 54       	subi	r28, 0x4E	; 78
     b4e:	d4 40       	sbci	r29, 0x04	; 4
     b50:	cc 5c       	subi	r28, 0xCC	; 204
     b52:	db 4f       	sbci	r29, 0xFB	; 251
     b54:	88 81       	ld	r24, Y
     b56:	99 81       	ldd	r25, Y+1	; 0x01
     b58:	c4 53       	subi	r28, 0x34	; 52
     b5a:	d4 40       	sbci	r29, 0x04	; 4
     b5c:	96 95       	lsr	r25
     b5e:	98 2f       	mov	r25, r24
     b60:	88 27       	eor	r24, r24
     b62:	97 95       	ror	r25
     b64:	87 95       	ror	r24
     b66:	88 0e       	add	r8, r24
     b68:	99 1e       	adc	r9, r25
     b6a:	80 0e       	add	r8, r16
     b6c:	91 1e       	adc	r9, r17
     b6e:	c2 5b       	subi	r28, 0xB2	; 178
     b70:	db 4f       	sbci	r29, 0xFB	; 251
     b72:	88 81       	ld	r24, Y
     b74:	99 81       	ldd	r25, Y+1	; 0x01
     b76:	ce 54       	subi	r28, 0x4E	; 78
     b78:	d4 40       	sbci	r29, 0x04	; 4
     b7a:	88 0e       	add	r8, r24
     b7c:	99 1e       	adc	r9, r25
     b7e:	ec 0c       	add	r14, r12
     b80:	fd 1c       	adc	r15, r13
     b82:	97 e0       	ldi	r25, 0x07	; 7
     b84:	e9 22       	and	r14, r25
     b86:	90 e8       	ldi	r25, 0x80	; 128
     b88:	f9 22       	and	r15, r25
     b8a:	ff 20       	and	r15, r15
     b8c:	54 f4       	brge	.+20     	; 0xba2 <__stack+0x343>
     b8e:	a1 e0       	ldi	r26, 0x01	; 1
     b90:	ea 1a       	sub	r14, r26
     b92:	f1 08       	sbc	r15, r1
     b94:	b8 ef       	ldi	r27, 0xF8	; 248
     b96:	eb 2a       	or	r14, r27
     b98:	ff 24       	eor	r15, r15
     b9a:	fa 94       	dec	r15
     b9c:	2f ef       	ldi	r18, 0xFF	; 255
     b9e:	e2 1a       	sub	r14, r18
     ba0:	f2 0a       	sbc	r15, r18
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <__stack+0x34d>
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	ea 94       	dec	r14
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <__stack+0x349>
     bb0:	e4 e0       	ldi	r30, 0x04	; 4
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	ec 0f       	add	r30, r28
     bb6:	fd 1f       	adc	r31, r29
     bb8:	e8 0d       	add	r30, r8
     bba:	f9 1d       	adc	r31, r9
     bbc:	90 81       	ld	r25, Z
     bbe:	89 2b       	or	r24, r25
     bc0:	80 83       	st	Z, r24
			ytemp = ya;
			ya = yb;
			yb = ytemp;
		}
		// Отрисовка по y	
		for(signed char y = ya; y <= yb; y++)
     bc2:	63 94       	inc	r6
     bc4:	23 cf       	rjmp	.-442    	; 0xa0c <__stack+0x1ad>
			{xa, ya, xb, yb},
			{xb, yb, xc, yc},
			{xc, yc, xa, ya}
		};

		for (int i = 0; i < 3; i++)
     bc6:	c6 5b       	subi	r28, 0xB6	; 182
     bc8:	db 4f       	sbci	r29, 0xFB	; 251
     bca:	48 81       	ld	r20, Y
     bcc:	59 81       	ldd	r21, Y+1	; 0x01
     bce:	ca 54       	subi	r28, 0x4A	; 74
     bd0:	d4 40       	sbci	r29, 0x04	; 4
     bd2:	4f 5f       	subi	r20, 0xFF	; 255
     bd4:	5f 4f       	sbci	r21, 0xFF	; 255
     bd6:	c6 5b       	subi	r28, 0xB6	; 182
     bd8:	db 4f       	sbci	r29, 0xFB	; 251
     bda:	59 83       	std	Y+1, r21	; 0x01
     bdc:	48 83       	st	Y, r20
     bde:	ca 54       	subi	r28, 0x4A	; 74
     be0:	d4 40       	sbci	r29, 0x04	; 4
     be2:	48 cc       	rjmp	.-1904   	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>

	while (1)
	{		
		Display.Buffer_Fill(0);
		
		for(int j = 0; j < 3; j++)
     be4:	c6 5a       	subi	r28, 0xA6	; 166
     be6:	db 4f       	sbci	r29, 0xFB	; 251
     be8:	88 81       	ld	r24, Y
     bea:	99 81       	ldd	r25, Y+1	; 0x01
     bec:	ca 55       	subi	r28, 0x5A	; 90
     bee:	d4 40       	sbci	r29, 0x04	; 4
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	c6 5a       	subi	r28, 0xA6	; 166
     bf4:	db 4f       	sbci	r29, 0xFB	; 251
     bf6:	99 83       	std	Y+1, r25	; 0x01
     bf8:	88 83       	st	Y, r24
     bfa:	ca 55       	subi	r28, 0x5A	; 90
     bfc:	d4 40       	sbci	r29, 0x04	; 4
     bfe:	4b cb       	rjmp	.-2410   	; 0x296 <main+0x7a>
	
	
	void Buffer_SetPixel(int x, int y)
	{	
		// Граничные условия экрана
		if (x >= (127 - Xshift) || x <= -(127 - Xshift) || y >= (63 - Yshift) || y <= -(63 - Yshift)){return;}
     c00:	0a 81       	ldd	r16, Y+2	; 0x02
     c02:	00 2e       	mov	r0, r16
     c04:	00 0c       	add	r0, r0
     c06:	11 0b       	sbc	r17, r17
     c08:	8f e7       	ldi	r24, 0x7F	; 127
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	80 1b       	sub	r24, r16
     c0e:	91 0b       	sbc	r25, r17
     c10:	c8 5a       	subi	r28, 0xA8	; 168
     c12:	db 4f       	sbci	r29, 0xFB	; 251
     c14:	a8 81       	ld	r26, Y
     c16:	b9 81       	ldd	r27, Y+1	; 0x01
     c18:	c8 55       	subi	r28, 0x58	; 88
     c1a:	d4 40       	sbci	r29, 0x04	; 4
     c1c:	a8 17       	cp	r26, r24
     c1e:	b9 07       	cpc	r27, r25
     c20:	0c f0       	brlt	.+2      	; 0xc24 <__stack+0x3c5>
     c22:	7c c0       	rjmp	.+248    	; 0xd1c <__stack+0x4bd>
     c24:	c8 01       	movw	r24, r16
     c26:	8f 57       	subi	r24, 0x7F	; 127
     c28:	91 09       	sbc	r25, r1
     c2a:	8a 17       	cp	r24, r26
     c2c:	9b 07       	cpc	r25, r27
     c2e:	0c f0       	brlt	.+2      	; 0xc32 <__stack+0x3d3>
     c30:	75 c0       	rjmp	.+234    	; 0xd1c <__stack+0x4bd>
     c32:	6b 81       	ldd	r22, Y+3	; 0x03
     c34:	e6 2e       	mov	r14, r22
     c36:	06 2e       	mov	r0, r22
     c38:	00 0c       	add	r0, r0
     c3a:	ff 08       	sbc	r15, r15
     c3c:	8f e3       	ldi	r24, 0x3F	; 63
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	8e 19       	sub	r24, r14
     c42:	9f 09       	sbc	r25, r15
     c44:	18 16       	cp	r1, r24
     c46:	19 06       	cpc	r1, r25
     c48:	0c f0       	brlt	.+2      	; 0xc4c <__stack+0x3ed>
     c4a:	68 c0       	rjmp	.+208    	; 0xd1c <__stack+0x4bd>
     c4c:	c7 01       	movw	r24, r14
     c4e:	cf 97       	sbiw	r24, 0x3f	; 63
     c50:	0a f0       	brmi	.+2      	; 0xc54 <__stack+0x3f5>
     c52:	64 c0       	rjmp	.+200    	; 0xd1c <__stack+0x4bd>
		// Функция
		Buffer[(int)((((-y - Yshift) / 8) * 128) + x + Xshift) + (int)((y + (float)Yshift) / 8) * 256] |= (1 << ((y + Yshift) % 8));		
     c54:	cc 24       	eor	r12, r12
     c56:	dd 24       	eor	r13, r13
     c58:	ce 18       	sub	r12, r14
     c5a:	df 08       	sbc	r13, r15
     c5c:	1a f4       	brpl	.+6      	; 0xc64 <__stack+0x405>
     c5e:	b7 e0       	ldi	r27, 0x07	; 7
     c60:	cb 0e       	add	r12, r27
     c62:	d1 1c       	adc	r13, r1
     c64:	d5 94       	asr	r13
     c66:	c7 94       	ror	r12
     c68:	d5 94       	asr	r13
     c6a:	c7 94       	ror	r12
     c6c:	d5 94       	asr	r13
     c6e:	c7 94       	ror	r12
     c70:	06 2e       	mov	r0, r22
     c72:	00 0c       	add	r0, r0
     c74:	77 0b       	sbc	r23, r23
     c76:	88 0b       	sbc	r24, r24
     c78:	99 0b       	sbc	r25, r25
     c7a:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	a9 01       	movw	r20, r18
     c84:	0e 94 82 09 	call	0x1304	; 0x1304 <__addsf3>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	5e e3       	ldi	r21, 0x3E	; 62
     c90:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
     c94:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     c98:	c3 5a       	subi	r28, 0xA3	; 163
     c9a:	db 4f       	sbci	r29, 0xFB	; 251
     c9c:	68 83       	st	Y, r22
     c9e:	cd 55       	subi	r28, 0x5D	; 93
     ca0:	d4 40       	sbci	r29, 0x04	; 4
     ca2:	c4 5a       	subi	r28, 0xA4	; 164
     ca4:	db 4f       	sbci	r29, 0xFB	; 251
     ca6:	18 82       	st	Y, r1
     ca8:	cc 55       	subi	r28, 0x5C	; 92
     caa:	d4 40       	sbci	r29, 0x04	; 4
     cac:	f6 01       	movw	r30, r12
     cae:	f6 95       	lsr	r31
     cb0:	fe 2f       	mov	r31, r30
     cb2:	ee 27       	eor	r30, r30
     cb4:	f7 95       	ror	r31
     cb6:	e7 95       	ror	r30
     cb8:	c8 5a       	subi	r28, 0xA8	; 168
     cba:	db 4f       	sbci	r29, 0xFB	; 251
     cbc:	28 81       	ld	r18, Y
     cbe:	39 81       	ldd	r19, Y+1	; 0x01
     cc0:	c8 55       	subi	r28, 0x58	; 88
     cc2:	d4 40       	sbci	r29, 0x04	; 4
     cc4:	e2 0f       	add	r30, r18
     cc6:	f3 1f       	adc	r31, r19
     cc8:	e0 0f       	add	r30, r16
     cca:	f1 1f       	adc	r31, r17
     ccc:	c4 5a       	subi	r28, 0xA4	; 164
     cce:	db 4f       	sbci	r29, 0xFB	; 251
     cd0:	48 81       	ld	r20, Y
     cd2:	59 81       	ldd	r21, Y+1	; 0x01
     cd4:	cc 55       	subi	r28, 0x5C	; 92
     cd6:	d4 40       	sbci	r29, 0x04	; 4
     cd8:	e4 0f       	add	r30, r20
     cda:	f5 1f       	adc	r31, r21
     cdc:	57 e0       	ldi	r21, 0x07	; 7
     cde:	e5 22       	and	r14, r21
     ce0:	50 e8       	ldi	r21, 0x80	; 128
     ce2:	f5 22       	and	r15, r21
     ce4:	ff 20       	and	r15, r15
     ce6:	54 f4       	brge	.+20     	; 0xcfc <__stack+0x49d>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	e8 1a       	sub	r14, r24
     cec:	f1 08       	sbc	r15, r1
     cee:	98 ef       	ldi	r25, 0xF8	; 248
     cf0:	e9 2a       	or	r14, r25
     cf2:	ff 24       	eor	r15, r15
     cf4:	fa 94       	dec	r15
     cf6:	af ef       	ldi	r26, 0xFF	; 255
     cf8:	ea 1a       	sub	r14, r26
     cfa:	fa 0a       	sbc	r15, r26
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <__stack+0x4a7>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	ea 94       	dec	r14
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <__stack+0x4a3>
     d0a:	24 e0       	ldi	r18, 0x04	; 4
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	2c 0f       	add	r18, r28
     d10:	3d 1f       	adc	r19, r29
     d12:	e2 0f       	add	r30, r18
     d14:	f3 1f       	adc	r31, r19
     d16:	90 81       	ld	r25, Z
     d18:	89 2b       	or	r24, r25
     d1a:	80 83       	st	Z, r24
	
	
	void Buffer_SetPixel(int x, int y)
	{	
		// Граничные условия экрана
		if (x >= (127 - Xshift) || x <= -(127 - Xshift) || y >= (63 - Yshift) || y <= -(63 - Yshift)){return;}
     d1c:	0a 81       	ldd	r16, Y+2	; 0x02
     d1e:	00 2e       	mov	r0, r16
     d20:	00 0c       	add	r0, r0
     d22:	11 0b       	sbc	r17, r17
     d24:	8f e7       	ldi	r24, 0x7F	; 127
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	80 1b       	sub	r24, r16
     d2a:	91 0b       	sbc	r25, r17
     d2c:	c8 5a       	subi	r28, 0xA8	; 168
     d2e:	db 4f       	sbci	r29, 0xFB	; 251
     d30:	48 81       	ld	r20, Y
     d32:	59 81       	ldd	r21, Y+1	; 0x01
     d34:	c8 55       	subi	r28, 0x58	; 88
     d36:	d4 40       	sbci	r29, 0x04	; 4
     d38:	48 17       	cp	r20, r24
     d3a:	59 07       	cpc	r21, r25
     d3c:	0c f0       	brlt	.+2      	; 0xd40 <__stack+0x4e1>
     d3e:	7a c0       	rjmp	.+244    	; 0xe34 <__stack+0x5d5>
     d40:	c8 01       	movw	r24, r16
     d42:	8f 57       	subi	r24, 0x7F	; 127
     d44:	91 09       	sbc	r25, r1
     d46:	84 17       	cp	r24, r20
     d48:	95 07       	cpc	r25, r21
     d4a:	0c f0       	brlt	.+2      	; 0xd4e <__stack+0x4ef>
     d4c:	73 c0       	rjmp	.+230    	; 0xe34 <__stack+0x5d5>
     d4e:	6b 81       	ldd	r22, Y+3	; 0x03
     d50:	e6 2e       	mov	r14, r22
     d52:	06 2e       	mov	r0, r22
     d54:	00 0c       	add	r0, r0
     d56:	ff 08       	sbc	r15, r15
     d58:	8f e3       	ldi	r24, 0x3F	; 63
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	8e 19       	sub	r24, r14
     d5e:	9f 09       	sbc	r25, r15
     d60:	02 97       	sbiw	r24, 0x02	; 2
     d62:	0c f4       	brge	.+2      	; 0xd66 <__stack+0x507>
     d64:	67 c0       	rjmp	.+206    	; 0xe34 <__stack+0x5d5>
     d66:	c7 01       	movw	r24, r14
     d68:	cf 97       	sbiw	r24, 0x3f	; 63
     d6a:	18 16       	cp	r1, r24
     d6c:	19 06       	cpc	r1, r25
     d6e:	0c f4       	brge	.+2      	; 0xd72 <__stack+0x513>
     d70:	61 c0       	rjmp	.+194    	; 0xe34 <__stack+0x5d5>
		// Функция
		Buffer[(int)((((-y - Yshift) / 8) * 128) + x + Xshift) + (int)((y + (float)Yshift) / 8) * 256] |= (1 << ((y + Yshift) % 8));		
     d72:	67 01       	movw	r12, r14
     d74:	c0 94       	com	r12
     d76:	d0 94       	com	r13
     d78:	dd 20       	and	r13, r13
     d7a:	1c f4       	brge	.+6      	; 0xd82 <__stack+0x523>
     d7c:	57 e0       	ldi	r21, 0x07	; 7
     d7e:	c5 0e       	add	r12, r21
     d80:	d1 1c       	adc	r13, r1
     d82:	d5 94       	asr	r13
     d84:	c7 94       	ror	r12
     d86:	d5 94       	asr	r13
     d88:	c7 94       	ror	r12
     d8a:	d5 94       	asr	r13
     d8c:	c7 94       	ror	r12
     d8e:	06 2e       	mov	r0, r22
     d90:	00 0c       	add	r0, r0
     d92:	77 0b       	sbc	r23, r23
     d94:	88 0b       	sbc	r24, r24
     d96:	99 0b       	sbc	r25, r25
     d98:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e8       	ldi	r20, 0x80	; 128
     da2:	5f e3       	ldi	r21, 0x3F	; 63
     da4:	0e 94 82 09 	call	0x1304	; 0x1304 <__addsf3>
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	5e e3       	ldi	r21, 0x3E	; 62
     db0:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
     db4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     db8:	c1 5a       	subi	r28, 0xA1	; 161
     dba:	db 4f       	sbci	r29, 0xFB	; 251
     dbc:	68 83       	st	Y, r22
     dbe:	cf 55       	subi	r28, 0x5F	; 95
     dc0:	d4 40       	sbci	r29, 0x04	; 4
     dc2:	c2 5a       	subi	r28, 0xA2	; 162
     dc4:	db 4f       	sbci	r29, 0xFB	; 251
     dc6:	18 82       	st	Y, r1
     dc8:	ce 55       	subi	r28, 0x5E	; 94
     dca:	d4 40       	sbci	r29, 0x04	; 4
     dcc:	f6 01       	movw	r30, r12
     dce:	f6 95       	lsr	r31
     dd0:	fe 2f       	mov	r31, r30
     dd2:	ee 27       	eor	r30, r30
     dd4:	f7 95       	ror	r31
     dd6:	e7 95       	ror	r30
     dd8:	c8 5a       	subi	r28, 0xA8	; 168
     dda:	db 4f       	sbci	r29, 0xFB	; 251
     ddc:	88 81       	ld	r24, Y
     dde:	99 81       	ldd	r25, Y+1	; 0x01
     de0:	c8 55       	subi	r28, 0x58	; 88
     de2:	d4 40       	sbci	r29, 0x04	; 4
     de4:	e8 0f       	add	r30, r24
     de6:	f9 1f       	adc	r31, r25
     de8:	e0 0f       	add	r30, r16
     dea:	f1 1f       	adc	r31, r17
     dec:	c2 5a       	subi	r28, 0xA2	; 162
     dee:	db 4f       	sbci	r29, 0xFB	; 251
     df0:	a8 81       	ld	r26, Y
     df2:	b9 81       	ldd	r27, Y+1	; 0x01
     df4:	ce 55       	subi	r28, 0x5E	; 94
     df6:	d4 40       	sbci	r29, 0x04	; 4
     df8:	ea 0f       	add	r30, r26
     dfa:	fb 1f       	adc	r31, r27
     dfc:	c7 01       	movw	r24, r14
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	87 70       	andi	r24, 0x07	; 7
     e02:	90 78       	andi	r25, 0x80	; 128
     e04:	99 23       	and	r25, r25
     e06:	24 f4       	brge	.+8      	; 0xe10 <__stack+0x5b1>
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	88 6f       	ori	r24, 0xF8	; 248
     e0c:	9f 6f       	ori	r25, 0xFF	; 255
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	21 e0       	ldi	r18, 0x01	; 1
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	a9 01       	movw	r20, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <__stack+0x5bd>
     e18:	44 0f       	add	r20, r20
     e1a:	55 1f       	adc	r21, r21
     e1c:	8a 95       	dec	r24
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <__stack+0x5b9>
     e20:	ca 01       	movw	r24, r20
     e22:	a4 e0       	ldi	r26, 0x04	; 4
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	ac 0f       	add	r26, r28
     e28:	bd 1f       	adc	r27, r29
     e2a:	ea 0f       	add	r30, r26
     e2c:	fb 1f       	adc	r31, r27
     e2e:	90 81       	ld	r25, Z
     e30:	89 2b       	or	r24, r25
     e32:	80 83       	st	Z, r24
	
	
	void Buffer_SetPixel(int x, int y)
	{	
		// Граничные условия экрана
		if (x >= (127 - Xshift) || x <= -(127 - Xshift) || y >= (63 - Yshift) || y <= -(63 - Yshift)){return;}
     e34:	0a 81       	ldd	r16, Y+2	; 0x02
     e36:	00 2e       	mov	r0, r16
     e38:	00 0c       	add	r0, r0
     e3a:	11 0b       	sbc	r17, r17
     e3c:	8f e7       	ldi	r24, 0x7F	; 127
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	80 1b       	sub	r24, r16
     e42:	91 0b       	sbc	r25, r17
     e44:	c8 5a       	subi	r28, 0xA8	; 168
     e46:	db 4f       	sbci	r29, 0xFB	; 251
     e48:	28 81       	ld	r18, Y
     e4a:	39 81       	ldd	r19, Y+1	; 0x01
     e4c:	c8 55       	subi	r28, 0x58	; 88
     e4e:	d4 40       	sbci	r29, 0x04	; 4
     e50:	28 17       	cp	r18, r24
     e52:	39 07       	cpc	r19, r25
     e54:	0c f0       	brlt	.+2      	; 0xe58 <__stack+0x5f9>
     e56:	7a c0       	rjmp	.+244    	; 0xf4c <__stack+0x6ed>
     e58:	c8 01       	movw	r24, r16
     e5a:	8f 57       	subi	r24, 0x7F	; 127
     e5c:	91 09       	sbc	r25, r1
     e5e:	82 17       	cp	r24, r18
     e60:	93 07       	cpc	r25, r19
     e62:	0c f0       	brlt	.+2      	; 0xe66 <__stack+0x607>
     e64:	73 c0       	rjmp	.+230    	; 0xf4c <__stack+0x6ed>
     e66:	6b 81       	ldd	r22, Y+3	; 0x03
     e68:	e6 2e       	mov	r14, r22
     e6a:	06 2e       	mov	r0, r22
     e6c:	00 0c       	add	r0, r0
     e6e:	ff 08       	sbc	r15, r15
     e70:	8f e3       	ldi	r24, 0x3F	; 63
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	8e 19       	sub	r24, r14
     e76:	9f 09       	sbc	r25, r15
     e78:	03 97       	sbiw	r24, 0x03	; 3
     e7a:	0c f4       	brge	.+2      	; 0xe7e <__stack+0x61f>
     e7c:	67 c0       	rjmp	.+206    	; 0xf4c <__stack+0x6ed>
     e7e:	c7 01       	movw	r24, r14
     e80:	cf 97       	sbiw	r24, 0x3f	; 63
     e82:	02 97       	sbiw	r24, 0x02	; 2
     e84:	0c f0       	brlt	.+2      	; 0xe88 <__stack+0x629>
     e86:	62 c0       	rjmp	.+196    	; 0xf4c <__stack+0x6ed>
		// Функция
		Buffer[(int)((((-y - Yshift) / 8) * 128) + x + Xshift) + (int)((y + (float)Yshift) / 8) * 256] |= (1 << ((y + Yshift) % 8));		
     e88:	8e ef       	ldi	r24, 0xFE	; 254
     e8a:	9f ef       	ldi	r25, 0xFF	; 255
     e8c:	8e 19       	sub	r24, r14
     e8e:	9f 09       	sbc	r25, r15
     e90:	6c 01       	movw	r12, r24
     e92:	1a f4       	brpl	.+6      	; 0xe9a <__stack+0x63b>
     e94:	37 e0       	ldi	r19, 0x07	; 7
     e96:	c3 0e       	add	r12, r19
     e98:	d1 1c       	adc	r13, r1
     e9a:	d5 94       	asr	r13
     e9c:	c7 94       	ror	r12
     e9e:	d5 94       	asr	r13
     ea0:	c7 94       	ror	r12
     ea2:	d5 94       	asr	r13
     ea4:	c7 94       	ror	r12
     ea6:	06 2e       	mov	r0, r22
     ea8:	00 0c       	add	r0, r0
     eaa:	77 0b       	sbc	r23, r23
     eac:	88 0b       	sbc	r24, r24
     eae:	99 0b       	sbc	r25, r25
     eb0:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	50 e4       	ldi	r21, 0x40	; 64
     ebc:	0e 94 82 09 	call	0x1304	; 0x1304 <__addsf3>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	5e e3       	ldi	r21, 0x3E	; 62
     ec8:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
     ecc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     ed0:	cf 59       	subi	r28, 0x9F	; 159
     ed2:	db 4f       	sbci	r29, 0xFB	; 251
     ed4:	68 83       	st	Y, r22
     ed6:	c1 56       	subi	r28, 0x61	; 97
     ed8:	d4 40       	sbci	r29, 0x04	; 4
     eda:	c0 5a       	subi	r28, 0xA0	; 160
     edc:	db 4f       	sbci	r29, 0xFB	; 251
     ede:	18 82       	st	Y, r1
     ee0:	c0 56       	subi	r28, 0x60	; 96
     ee2:	d4 40       	sbci	r29, 0x04	; 4
     ee4:	f6 01       	movw	r30, r12
     ee6:	f6 95       	lsr	r31
     ee8:	fe 2f       	mov	r31, r30
     eea:	ee 27       	eor	r30, r30
     eec:	f7 95       	ror	r31
     eee:	e7 95       	ror	r30
     ef0:	c8 5a       	subi	r28, 0xA8	; 168
     ef2:	db 4f       	sbci	r29, 0xFB	; 251
     ef4:	48 81       	ld	r20, Y
     ef6:	59 81       	ldd	r21, Y+1	; 0x01
     ef8:	c8 55       	subi	r28, 0x58	; 88
     efa:	d4 40       	sbci	r29, 0x04	; 4
     efc:	e4 0f       	add	r30, r20
     efe:	f5 1f       	adc	r31, r21
     f00:	e0 0f       	add	r30, r16
     f02:	f1 1f       	adc	r31, r17
     f04:	c0 5a       	subi	r28, 0xA0	; 160
     f06:	db 4f       	sbci	r29, 0xFB	; 251
     f08:	88 81       	ld	r24, Y
     f0a:	99 81       	ldd	r25, Y+1	; 0x01
     f0c:	c0 56       	subi	r28, 0x60	; 96
     f0e:	d4 40       	sbci	r29, 0x04	; 4
     f10:	e8 0f       	add	r30, r24
     f12:	f9 1f       	adc	r31, r25
     f14:	c7 01       	movw	r24, r14
     f16:	02 96       	adiw	r24, 0x02	; 2
     f18:	87 70       	andi	r24, 0x07	; 7
     f1a:	90 78       	andi	r25, 0x80	; 128
     f1c:	99 23       	and	r25, r25
     f1e:	24 f4       	brge	.+8      	; 0xf28 <__stack+0x6c9>
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	88 6f       	ori	r24, 0xF8	; 248
     f24:	9f 6f       	ori	r25, 0xFF	; 255
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	21 e0       	ldi	r18, 0x01	; 1
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	d9 01       	movw	r26, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <__stack+0x6d5>
     f30:	aa 0f       	add	r26, r26
     f32:	bb 1f       	adc	r27, r27
     f34:	8a 95       	dec	r24
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <__stack+0x6d1>
     f38:	cd 01       	movw	r24, r26
     f3a:	24 e0       	ldi	r18, 0x04	; 4
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	2c 0f       	add	r18, r28
     f40:	3d 1f       	adc	r19, r29
     f42:	e2 0f       	add	r30, r18
     f44:	f3 1f       	adc	r31, r19
     f46:	90 81       	ld	r25, Z
     f48:	89 2b       	or	r24, r25
     f4a:	80 83       	st	Z, r24
	
	
	void Buffer_SetPixel(int x, int y)
	{	
		// Граничные условия экрана
		if (x >= (127 - Xshift) || x <= -(127 - Xshift) || y >= (63 - Yshift) || y <= -(63 - Yshift)){return;}
     f4c:	0a 81       	ldd	r16, Y+2	; 0x02
     f4e:	00 2e       	mov	r0, r16
     f50:	00 0c       	add	r0, r0
     f52:	11 0b       	sbc	r17, r17
     f54:	8f e7       	ldi	r24, 0x7F	; 127
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	80 1b       	sub	r24, r16
     f5a:	91 0b       	sbc	r25, r17
     f5c:	c8 5a       	subi	r28, 0xA8	; 168
     f5e:	db 4f       	sbci	r29, 0xFB	; 251
     f60:	48 81       	ld	r20, Y
     f62:	59 81       	ldd	r21, Y+1	; 0x01
     f64:	c8 55       	subi	r28, 0x58	; 88
     f66:	d4 40       	sbci	r29, 0x04	; 4
     f68:	48 17       	cp	r20, r24
     f6a:	59 07       	cpc	r21, r25
     f6c:	0c f0       	brlt	.+2      	; 0xf70 <__stack+0x711>
     f6e:	7a c0       	rjmp	.+244    	; 0x1064 <__stack+0x805>
     f70:	c8 01       	movw	r24, r16
     f72:	8f 57       	subi	r24, 0x7F	; 127
     f74:	91 09       	sbc	r25, r1
     f76:	84 17       	cp	r24, r20
     f78:	95 07       	cpc	r25, r21
     f7a:	0c f0       	brlt	.+2      	; 0xf7e <__stack+0x71f>
     f7c:	73 c0       	rjmp	.+230    	; 0x1064 <__stack+0x805>
     f7e:	6b 81       	ldd	r22, Y+3	; 0x03
     f80:	e6 2e       	mov	r14, r22
     f82:	06 2e       	mov	r0, r22
     f84:	00 0c       	add	r0, r0
     f86:	ff 08       	sbc	r15, r15
     f88:	8f e3       	ldi	r24, 0x3F	; 63
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	8e 19       	sub	r24, r14
     f8e:	9f 09       	sbc	r25, r15
     f90:	04 97       	sbiw	r24, 0x04	; 4
     f92:	0c f4       	brge	.+2      	; 0xf96 <__stack+0x737>
     f94:	67 c0       	rjmp	.+206    	; 0x1064 <__stack+0x805>
     f96:	c7 01       	movw	r24, r14
     f98:	cf 97       	sbiw	r24, 0x3f	; 63
     f9a:	03 97       	sbiw	r24, 0x03	; 3
     f9c:	0c f0       	brlt	.+2      	; 0xfa0 <__stack+0x741>
     f9e:	62 c0       	rjmp	.+196    	; 0x1064 <__stack+0x805>
		// Функция
		Buffer[(int)((((-y - Yshift) / 8) * 128) + x + Xshift) + (int)((y + (float)Yshift) / 8) * 256] |= (1 << ((y + Yshift) % 8));		
     fa0:	8d ef       	ldi	r24, 0xFD	; 253
     fa2:	9f ef       	ldi	r25, 0xFF	; 255
     fa4:	8e 19       	sub	r24, r14
     fa6:	9f 09       	sbc	r25, r15
     fa8:	6c 01       	movw	r12, r24
     faa:	1a f4       	brpl	.+6      	; 0xfb2 <__stack+0x753>
     fac:	57 e0       	ldi	r21, 0x07	; 7
     fae:	c5 0e       	add	r12, r21
     fb0:	d1 1c       	adc	r13, r1
     fb2:	d5 94       	asr	r13
     fb4:	c7 94       	ror	r12
     fb6:	d5 94       	asr	r13
     fb8:	c7 94       	ror	r12
     fba:	d5 94       	asr	r13
     fbc:	c7 94       	ror	r12
     fbe:	06 2e       	mov	r0, r22
     fc0:	00 0c       	add	r0, r0
     fc2:	77 0b       	sbc	r23, r23
     fc4:	88 0b       	sbc	r24, r24
     fc6:	99 0b       	sbc	r25, r25
     fc8:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e4       	ldi	r20, 0x40	; 64
     fd2:	50 e4       	ldi	r21, 0x40	; 64
     fd4:	0e 94 82 09 	call	0x1304	; 0x1304 <__addsf3>
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	5e e3       	ldi	r21, 0x3E	; 62
     fe0:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
     fe4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     fe8:	cd 59       	subi	r28, 0x9D	; 157
     fea:	db 4f       	sbci	r29, 0xFB	; 251
     fec:	68 83       	st	Y, r22
     fee:	c3 56       	subi	r28, 0x63	; 99
     ff0:	d4 40       	sbci	r29, 0x04	; 4
     ff2:	ce 59       	subi	r28, 0x9E	; 158
     ff4:	db 4f       	sbci	r29, 0xFB	; 251
     ff6:	18 82       	st	Y, r1
     ff8:	c2 56       	subi	r28, 0x62	; 98
     ffa:	d4 40       	sbci	r29, 0x04	; 4
     ffc:	f6 01       	movw	r30, r12
     ffe:	f6 95       	lsr	r31
    1000:	fe 2f       	mov	r31, r30
    1002:	ee 27       	eor	r30, r30
    1004:	f7 95       	ror	r31
    1006:	e7 95       	ror	r30
    1008:	c8 5a       	subi	r28, 0xA8	; 168
    100a:	db 4f       	sbci	r29, 0xFB	; 251
    100c:	88 81       	ld	r24, Y
    100e:	99 81       	ldd	r25, Y+1	; 0x01
    1010:	c8 55       	subi	r28, 0x58	; 88
    1012:	d4 40       	sbci	r29, 0x04	; 4
    1014:	e8 0f       	add	r30, r24
    1016:	f9 1f       	adc	r31, r25
    1018:	e0 0f       	add	r30, r16
    101a:	f1 1f       	adc	r31, r17
    101c:	ce 59       	subi	r28, 0x9E	; 158
    101e:	db 4f       	sbci	r29, 0xFB	; 251
    1020:	a8 81       	ld	r26, Y
    1022:	b9 81       	ldd	r27, Y+1	; 0x01
    1024:	c2 56       	subi	r28, 0x62	; 98
    1026:	d4 40       	sbci	r29, 0x04	; 4
    1028:	ea 0f       	add	r30, r26
    102a:	fb 1f       	adc	r31, r27
    102c:	c7 01       	movw	r24, r14
    102e:	03 96       	adiw	r24, 0x03	; 3
    1030:	87 70       	andi	r24, 0x07	; 7
    1032:	90 78       	andi	r25, 0x80	; 128
    1034:	99 23       	and	r25, r25
    1036:	24 f4       	brge	.+8      	; 0x1040 <__stack+0x7e1>
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	88 6f       	ori	r24, 0xF8	; 248
    103c:	9f 6f       	ori	r25, 0xFF	; 255
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	21 e0       	ldi	r18, 0x01	; 1
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	a9 01       	movw	r20, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <__stack+0x7ed>
    1048:	44 0f       	add	r20, r20
    104a:	55 1f       	adc	r21, r21
    104c:	8a 95       	dec	r24
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <__stack+0x7e9>
    1050:	ca 01       	movw	r24, r20
    1052:	a4 e0       	ldi	r26, 0x04	; 4
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ac 0f       	add	r26, r28
    1058:	bd 1f       	adc	r27, r29
    105a:	ea 0f       	add	r30, r26
    105c:	fb 1f       	adc	r31, r27
    105e:	90 81       	ld	r25, Z
    1060:	89 2b       	or	r24, r25
    1062:	80 83       	st	Z, r24
	
	
	void Buffer_SetPixel(int x, int y)
	{	
		// Граничные условия экрана
		if (x >= (127 - Xshift) || x <= -(127 - Xshift) || y >= (63 - Yshift) || y <= -(63 - Yshift)){return;}
    1064:	0a 81       	ldd	r16, Y+2	; 0x02
    1066:	00 2e       	mov	r0, r16
    1068:	00 0c       	add	r0, r0
    106a:	11 0b       	sbc	r17, r17
    106c:	8f e7       	ldi	r24, 0x7F	; 127
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	80 1b       	sub	r24, r16
    1072:	91 0b       	sbc	r25, r17
    1074:	c8 5a       	subi	r28, 0xA8	; 168
    1076:	db 4f       	sbci	r29, 0xFB	; 251
    1078:	28 81       	ld	r18, Y
    107a:	39 81       	ldd	r19, Y+1	; 0x01
    107c:	c8 55       	subi	r28, 0x58	; 88
    107e:	d4 40       	sbci	r29, 0x04	; 4
    1080:	28 17       	cp	r18, r24
    1082:	39 07       	cpc	r19, r25
    1084:	0c f0       	brlt	.+2      	; 0x1088 <__stack+0x829>
    1086:	7a c0       	rjmp	.+244    	; 0x117c <__stack+0x91d>
    1088:	c8 01       	movw	r24, r16
    108a:	8f 57       	subi	r24, 0x7F	; 127
    108c:	91 09       	sbc	r25, r1
    108e:	82 17       	cp	r24, r18
    1090:	93 07       	cpc	r25, r19
    1092:	0c f0       	brlt	.+2      	; 0x1096 <__stack+0x837>
    1094:	73 c0       	rjmp	.+230    	; 0x117c <__stack+0x91d>
    1096:	6b 81       	ldd	r22, Y+3	; 0x03
    1098:	e6 2e       	mov	r14, r22
    109a:	06 2e       	mov	r0, r22
    109c:	00 0c       	add	r0, r0
    109e:	ff 08       	sbc	r15, r15
    10a0:	8f e3       	ldi	r24, 0x3F	; 63
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	8e 19       	sub	r24, r14
    10a6:	9f 09       	sbc	r25, r15
    10a8:	06 97       	sbiw	r24, 0x06	; 6
    10aa:	0c f4       	brge	.+2      	; 0x10ae <__stack+0x84f>
    10ac:	67 c0       	rjmp	.+206    	; 0x117c <__stack+0x91d>
    10ae:	c7 01       	movw	r24, r14
    10b0:	cf 97       	sbiw	r24, 0x3f	; 63
    10b2:	05 97       	sbiw	r24, 0x05	; 5
    10b4:	0c f0       	brlt	.+2      	; 0x10b8 <__stack+0x859>
    10b6:	62 c0       	rjmp	.+196    	; 0x117c <__stack+0x91d>
		// Функция
		Buffer[(int)((((-y - Yshift) / 8) * 128) + x + Xshift) + (int)((y + (float)Yshift) / 8) * 256] |= (1 << ((y + Yshift) % 8));		
    10b8:	8b ef       	ldi	r24, 0xFB	; 251
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	8e 19       	sub	r24, r14
    10be:	9f 09       	sbc	r25, r15
    10c0:	6c 01       	movw	r12, r24
    10c2:	1a f4       	brpl	.+6      	; 0x10ca <__stack+0x86b>
    10c4:	37 e0       	ldi	r19, 0x07	; 7
    10c6:	c3 0e       	add	r12, r19
    10c8:	d1 1c       	adc	r13, r1
    10ca:	d5 94       	asr	r13
    10cc:	c7 94       	ror	r12
    10ce:	d5 94       	asr	r13
    10d0:	c7 94       	ror	r12
    10d2:	d5 94       	asr	r13
    10d4:	c7 94       	ror	r12
    10d6:	06 2e       	mov	r0, r22
    10d8:	00 0c       	add	r0, r0
    10da:	77 0b       	sbc	r23, r23
    10dc:	88 0b       	sbc	r24, r24
    10de:	99 0b       	sbc	r25, r25
    10e0:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 ea       	ldi	r20, 0xA0	; 160
    10ea:	50 e4       	ldi	r21, 0x40	; 64
    10ec:	0e 94 82 09 	call	0x1304	; 0x1304 <__addsf3>
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	5e e3       	ldi	r21, 0x3E	; 62
    10f8:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
    10fc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
    1100:	cb 59       	subi	r28, 0x9B	; 155
    1102:	db 4f       	sbci	r29, 0xFB	; 251
    1104:	68 83       	st	Y, r22
    1106:	c5 56       	subi	r28, 0x65	; 101
    1108:	d4 40       	sbci	r29, 0x04	; 4
    110a:	cc 59       	subi	r28, 0x9C	; 156
    110c:	db 4f       	sbci	r29, 0xFB	; 251
    110e:	18 82       	st	Y, r1
    1110:	c4 56       	subi	r28, 0x64	; 100
    1112:	d4 40       	sbci	r29, 0x04	; 4
    1114:	f6 01       	movw	r30, r12
    1116:	f6 95       	lsr	r31
    1118:	fe 2f       	mov	r31, r30
    111a:	ee 27       	eor	r30, r30
    111c:	f7 95       	ror	r31
    111e:	e7 95       	ror	r30
    1120:	c8 5a       	subi	r28, 0xA8	; 168
    1122:	db 4f       	sbci	r29, 0xFB	; 251
    1124:	48 81       	ld	r20, Y
    1126:	59 81       	ldd	r21, Y+1	; 0x01
    1128:	c8 55       	subi	r28, 0x58	; 88
    112a:	d4 40       	sbci	r29, 0x04	; 4
    112c:	e4 0f       	add	r30, r20
    112e:	f5 1f       	adc	r31, r21
    1130:	e0 0f       	add	r30, r16
    1132:	f1 1f       	adc	r31, r17
    1134:	cc 59       	subi	r28, 0x9C	; 156
    1136:	db 4f       	sbci	r29, 0xFB	; 251
    1138:	88 81       	ld	r24, Y
    113a:	99 81       	ldd	r25, Y+1	; 0x01
    113c:	c4 56       	subi	r28, 0x64	; 100
    113e:	d4 40       	sbci	r29, 0x04	; 4
    1140:	e8 0f       	add	r30, r24
    1142:	f9 1f       	adc	r31, r25
    1144:	c7 01       	movw	r24, r14
    1146:	05 96       	adiw	r24, 0x05	; 5
    1148:	87 70       	andi	r24, 0x07	; 7
    114a:	90 78       	andi	r25, 0x80	; 128
    114c:	99 23       	and	r25, r25
    114e:	24 f4       	brge	.+8      	; 0x1158 <__stack+0x8f9>
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	88 6f       	ori	r24, 0xF8	; 248
    1154:	9f 6f       	ori	r25, 0xFF	; 255
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	21 e0       	ldi	r18, 0x01	; 1
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	d9 01       	movw	r26, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <__stack+0x905>
    1160:	aa 0f       	add	r26, r26
    1162:	bb 1f       	adc	r27, r27
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <__stack+0x901>
    1168:	cd 01       	movw	r24, r26
    116a:	24 e0       	ldi	r18, 0x04	; 4
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	2c 0f       	add	r18, r28
    1170:	3d 1f       	adc	r19, r29
    1172:	e2 0f       	add	r30, r18
    1174:	f3 1f       	adc	r31, r19
    1176:	90 81       	ld	r25, Z
    1178:	89 2b       	or	r24, r25
    117a:	80 83       	st	Z, r24
	
	
	void Buffer_SetPixel(int x, int y)
	{	
		// Граничные условия экрана
		if (x >= (127 - Xshift) || x <= -(127 - Xshift) || y >= (63 - Yshift) || y <= -(63 - Yshift)){return;}
    117c:	0a 81       	ldd	r16, Y+2	; 0x02
    117e:	00 2e       	mov	r0, r16
    1180:	00 0c       	add	r0, r0
    1182:	11 0b       	sbc	r17, r17
    1184:	8f e7       	ldi	r24, 0x7F	; 127
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	80 1b       	sub	r24, r16
    118a:	91 0b       	sbc	r25, r17
    118c:	c8 5a       	subi	r28, 0xA8	; 168
    118e:	db 4f       	sbci	r29, 0xFB	; 251
    1190:	48 81       	ld	r20, Y
    1192:	59 81       	ldd	r21, Y+1	; 0x01
    1194:	c8 55       	subi	r28, 0x58	; 88
    1196:	d4 40       	sbci	r29, 0x04	; 4
    1198:	48 17       	cp	r20, r24
    119a:	59 07       	cpc	r21, r25
    119c:	0c f0       	brlt	.+2      	; 0x11a0 <__stack+0x941>
    119e:	7a c0       	rjmp	.+244    	; 0x1294 <__stack+0xa35>
    11a0:	c8 01       	movw	r24, r16
    11a2:	8f 57       	subi	r24, 0x7F	; 127
    11a4:	91 09       	sbc	r25, r1
    11a6:	84 17       	cp	r24, r20
    11a8:	95 07       	cpc	r25, r21
    11aa:	0c f0       	brlt	.+2      	; 0x11ae <__stack+0x94f>
    11ac:	73 c0       	rjmp	.+230    	; 0x1294 <__stack+0xa35>
    11ae:	6b 81       	ldd	r22, Y+3	; 0x03
    11b0:	e6 2e       	mov	r14, r22
    11b2:	06 2e       	mov	r0, r22
    11b4:	00 0c       	add	r0, r0
    11b6:	ff 08       	sbc	r15, r15
    11b8:	8f e3       	ldi	r24, 0x3F	; 63
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	8e 19       	sub	r24, r14
    11be:	9f 09       	sbc	r25, r15
    11c0:	08 97       	sbiw	r24, 0x08	; 8
    11c2:	0c f4       	brge	.+2      	; 0x11c6 <__stack+0x967>
    11c4:	67 c0       	rjmp	.+206    	; 0x1294 <__stack+0xa35>
    11c6:	c7 01       	movw	r24, r14
    11c8:	cf 97       	sbiw	r24, 0x3f	; 63
    11ca:	07 97       	sbiw	r24, 0x07	; 7
    11cc:	0c f0       	brlt	.+2      	; 0x11d0 <__stack+0x971>
    11ce:	62 c0       	rjmp	.+196    	; 0x1294 <__stack+0xa35>
		// Функция
		Buffer[(int)((((-y - Yshift) / 8) * 128) + x + Xshift) + (int)((y + (float)Yshift) / 8) * 256] |= (1 << ((y + Yshift) % 8));		
    11d0:	89 ef       	ldi	r24, 0xF9	; 249
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	8e 19       	sub	r24, r14
    11d6:	9f 09       	sbc	r25, r15
    11d8:	6c 01       	movw	r12, r24
    11da:	1a f4       	brpl	.+6      	; 0x11e2 <__stack+0x983>
    11dc:	57 e0       	ldi	r21, 0x07	; 7
    11de:	c5 0e       	add	r12, r21
    11e0:	d1 1c       	adc	r13, r1
    11e2:	d5 94       	asr	r13
    11e4:	c7 94       	ror	r12
    11e6:	d5 94       	asr	r13
    11e8:	c7 94       	ror	r12
    11ea:	d5 94       	asr	r13
    11ec:	c7 94       	ror	r12
    11ee:	06 2e       	mov	r0, r22
    11f0:	00 0c       	add	r0, r0
    11f2:	77 0b       	sbc	r23, r23
    11f4:	88 0b       	sbc	r24, r24
    11f6:	99 0b       	sbc	r25, r25
    11f8:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 ee       	ldi	r20, 0xE0	; 224
    1202:	50 e4       	ldi	r21, 0x40	; 64
    1204:	0e 94 82 09 	call	0x1304	; 0x1304 <__addsf3>
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	5e e3       	ldi	r21, 0x3E	; 62
    1210:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3>
    1214:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
    1218:	c9 59       	subi	r28, 0x99	; 153
    121a:	db 4f       	sbci	r29, 0xFB	; 251
    121c:	68 83       	st	Y, r22
    121e:	c7 56       	subi	r28, 0x67	; 103
    1220:	d4 40       	sbci	r29, 0x04	; 4
    1222:	ca 59       	subi	r28, 0x9A	; 154
    1224:	db 4f       	sbci	r29, 0xFB	; 251
    1226:	18 82       	st	Y, r1
    1228:	c6 56       	subi	r28, 0x66	; 102
    122a:	d4 40       	sbci	r29, 0x04	; 4
    122c:	f6 01       	movw	r30, r12
    122e:	f6 95       	lsr	r31
    1230:	fe 2f       	mov	r31, r30
    1232:	ee 27       	eor	r30, r30
    1234:	f7 95       	ror	r31
    1236:	e7 95       	ror	r30
    1238:	c8 5a       	subi	r28, 0xA8	; 168
    123a:	db 4f       	sbci	r29, 0xFB	; 251
    123c:	88 81       	ld	r24, Y
    123e:	99 81       	ldd	r25, Y+1	; 0x01
    1240:	c8 55       	subi	r28, 0x58	; 88
    1242:	d4 40       	sbci	r29, 0x04	; 4
    1244:	e8 0f       	add	r30, r24
    1246:	f9 1f       	adc	r31, r25
    1248:	e0 0f       	add	r30, r16
    124a:	f1 1f       	adc	r31, r17
    124c:	ca 59       	subi	r28, 0x9A	; 154
    124e:	db 4f       	sbci	r29, 0xFB	; 251
    1250:	a8 81       	ld	r26, Y
    1252:	b9 81       	ldd	r27, Y+1	; 0x01
    1254:	c6 56       	subi	r28, 0x66	; 102
    1256:	d4 40       	sbci	r29, 0x04	; 4
    1258:	ea 0f       	add	r30, r26
    125a:	fb 1f       	adc	r31, r27
    125c:	c7 01       	movw	r24, r14
    125e:	07 96       	adiw	r24, 0x07	; 7
    1260:	87 70       	andi	r24, 0x07	; 7
    1262:	90 78       	andi	r25, 0x80	; 128
    1264:	99 23       	and	r25, r25
    1266:	24 f4       	brge	.+8      	; 0x1270 <__stack+0xa11>
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	88 6f       	ori	r24, 0xF8	; 248
    126c:	9f 6f       	ori	r25, 0xFF	; 255
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	21 e0       	ldi	r18, 0x01	; 1
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	a9 01       	movw	r20, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <__stack+0xa1d>
    1278:	44 0f       	add	r20, r20
    127a:	55 1f       	adc	r21, r21
    127c:	8a 95       	dec	r24
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <__stack+0xa19>
    1280:	ca 01       	movw	r24, r20
    1282:	a4 e0       	ldi	r26, 0x04	; 4
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	ac 0f       	add	r26, r28
    1288:	bd 1f       	adc	r27, r29
    128a:	ea 0f       	add	r30, r26
    128c:	fb 1f       	adc	r31, r27
    128e:	90 81       	ld	r25, Z
    1290:	89 2b       	or	r24, r25
    1292:	80 83       	st	Z, r24
		Display.Buffer_SetPixel(i, 1);
		Display.Buffer_SetPixel(i, 2);
		Display.Buffer_SetPixel(i, 3);
		Display.Buffer_SetPixel(i, 5);
		Display.Buffer_SetPixel(i, 7);
		i++;
    1294:	c8 5a       	subi	r28, 0xA8	; 168
    1296:	db 4f       	sbci	r29, 0xFB	; 251
    1298:	28 81       	ld	r18, Y
    129a:	39 81       	ldd	r19, Y+1	; 0x01
    129c:	c8 55       	subi	r28, 0x58	; 88
    129e:	d4 40       	sbci	r29, 0x04	; 4
    12a0:	2f 5f       	subi	r18, 0xFF	; 255
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
    12a4:	c8 5a       	subi	r28, 0xA8	; 168
    12a6:	db 4f       	sbci	r29, 0xFB	; 251
    12a8:	39 83       	std	Y+1, r19	; 0x01
    12aa:	28 83       	st	Y, r18
    12ac:	c8 55       	subi	r28, 0x58	; 88
    12ae:	d4 40       	sbci	r29, 0x04	; 4
		
		if(i >= 128)
    12b0:	20 38       	cpi	r18, 0x80	; 128
    12b2:	31 05       	cpc	r19, r1
    12b4:	34 f0       	brlt	.+12     	; 0x12c2 <__stack+0xa63>
		{
			i = 0;
    12b6:	c8 5a       	subi	r28, 0xA8	; 168
    12b8:	db 4f       	sbci	r29, 0xFB	; 251
    12ba:	19 82       	std	Y+1, r1	; 0x01
    12bc:	18 82       	st	Y, r1
    12be:	c8 55       	subi	r28, 0x58	; 88
    12c0:	d4 40       	sbci	r29, 0x04	; 4
		}
	}
	
	void Buffer_Send(void)
	{
		i2c_MT_init();
    12c2:	0e 94 41 00 	call	0x82	; 0x82 <_Z11i2c_MT_initv>
		i2c_MT_start();					// Задание стартового условия мастером	// 00001 = 0x08 - A START condition has been transmitted
    12c6:	0e 94 46 00 	call	0x8c	; 0x8c <_Z12i2c_MT_startv>
		i2c_MT_send(0b01111000);		// Передача адреса						// 00011 = 0x18 - SLA+W has been transmitted;		ACK has been received
    12ca:	88 e7       	ldi	r24, 0x78	; 120
    12cc:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_send(0b01000000);		// 10 - ND/Comand(setp)	// 11 - ND/DATA(nerabotaet)		// 00 - DataOnly/Comand		// 01 - DataOnly/DATA(steam)
    12d0:	80 e4       	ldi	r24, 0x40	; 64
    12d2:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
	
		for (int i = 0; i < 1024; i++)
    12d6:	00 e0       	ldi	r16, 0x00	; 0
    12d8:	10 e0       	ldi	r17, 0x00	; 0
    12da:	01 15       	cp	r16, r1
    12dc:	34 e0       	ldi	r19, 0x04	; 4
    12de:	13 07       	cpc	r17, r19
    12e0:	64 f4       	brge	.+24     	; 0x12fa <__stack+0xa9b>
		{
			i2c_MT_send(Buffer[i]);
    12e2:	e4 e0       	ldi	r30, 0x04	; 4
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	ec 0f       	add	r30, r28
    12e8:	fd 1f       	adc	r31, r29
    12ea:	e0 0f       	add	r30, r16
    12ec:	f1 1f       	adc	r31, r17
    12ee:	80 81       	ld	r24, Z
    12f0:	0e 94 4c 00 	call	0x98	; 0x98 <_Z11i2c_MT_sendc>
		i2c_MT_init();
		i2c_MT_start();					// Задание стартового условия мастером	// 00001 = 0x08 - A START condition has been transmitted
		i2c_MT_send(0b01111000);		// Передача адреса						// 00011 = 0x18 - SLA+W has been transmitted;		ACK has been received
		i2c_MT_send(0b01000000);		// 10 - ND/Comand(setp)	// 11 - ND/DATA(nerabotaet)		// 00 - DataOnly/Comand		// 01 - DataOnly/DATA(steam)
	
		for (int i = 0; i < 1024; i++)
    12f4:	0f 5f       	subi	r16, 0xFF	; 255
    12f6:	1f 4f       	sbci	r17, 0xFF	; 255
    12f8:	f0 cf       	rjmp	.-32     	; 0x12da <__stack+0xa7b>
		{
			i2c_MT_send(Buffer[i]);
		}
		i2c_MT_stop();		
    12fa:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11i2c_MT_stopv>
    12fe:	0c 94 36 01 	jmp	0x26c	; 0x26c <main+0x50>

00001302 <__subsf3>:
    1302:	50 58       	subi	r21, 0x80	; 128

00001304 <__addsf3>:
    1304:	bb 27       	eor	r27, r27
    1306:	aa 27       	eor	r26, r26
    1308:	0e 94 99 09 	call	0x1332	; 0x1332 <__addsf3x>
    130c:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__fp_round>
    1310:	0e 94 05 0b 	call	0x160a	; 0x160a <__fp_pscA>
    1314:	38 f0       	brcs	.+14     	; 0x1324 <__addsf3+0x20>
    1316:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__fp_pscB>
    131a:	20 f0       	brcs	.+8      	; 0x1324 <__addsf3+0x20>
    131c:	39 f4       	brne	.+14     	; 0x132c <__addsf3+0x28>
    131e:	9f 3f       	cpi	r25, 0xFF	; 255
    1320:	19 f4       	brne	.+6      	; 0x1328 <__addsf3+0x24>
    1322:	26 f4       	brtc	.+8      	; 0x132c <__addsf3+0x28>
    1324:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__fp_nan>
    1328:	0e f4       	brtc	.+2      	; 0x132c <__addsf3+0x28>
    132a:	e0 95       	com	r30
    132c:	e7 fb       	bst	r30, 7
    132e:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__fp_inf>

00001332 <__addsf3x>:
    1332:	e9 2f       	mov	r30, r25
    1334:	0e 94 24 0b 	call	0x1648	; 0x1648 <__fp_split3>
    1338:	58 f3       	brcs	.-42     	; 0x1310 <__addsf3+0xc>
    133a:	ba 17       	cp	r27, r26
    133c:	62 07       	cpc	r22, r18
    133e:	73 07       	cpc	r23, r19
    1340:	84 07       	cpc	r24, r20
    1342:	95 07       	cpc	r25, r21
    1344:	20 f0       	brcs	.+8      	; 0x134e <__addsf3x+0x1c>
    1346:	79 f4       	brne	.+30     	; 0x1366 <__addsf3x+0x34>
    1348:	a6 f5       	brtc	.+104    	; 0x13b2 <__addsf3x+0x80>
    134a:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_zero>
    134e:	0e f4       	brtc	.+2      	; 0x1352 <__addsf3x+0x20>
    1350:	e0 95       	com	r30
    1352:	0b 2e       	mov	r0, r27
    1354:	ba 2f       	mov	r27, r26
    1356:	a0 2d       	mov	r26, r0
    1358:	0b 01       	movw	r0, r22
    135a:	b9 01       	movw	r22, r18
    135c:	90 01       	movw	r18, r0
    135e:	0c 01       	movw	r0, r24
    1360:	ca 01       	movw	r24, r20
    1362:	a0 01       	movw	r20, r0
    1364:	11 24       	eor	r1, r1
    1366:	ff 27       	eor	r31, r31
    1368:	59 1b       	sub	r21, r25
    136a:	99 f0       	breq	.+38     	; 0x1392 <__addsf3x+0x60>
    136c:	59 3f       	cpi	r21, 0xF9	; 249
    136e:	50 f4       	brcc	.+20     	; 0x1384 <__addsf3x+0x52>
    1370:	50 3e       	cpi	r21, 0xE0	; 224
    1372:	68 f1       	brcs	.+90     	; 0x13ce <__addsf3x+0x9c>
    1374:	1a 16       	cp	r1, r26
    1376:	f0 40       	sbci	r31, 0x00	; 0
    1378:	a2 2f       	mov	r26, r18
    137a:	23 2f       	mov	r18, r19
    137c:	34 2f       	mov	r19, r20
    137e:	44 27       	eor	r20, r20
    1380:	58 5f       	subi	r21, 0xF8	; 248
    1382:	f3 cf       	rjmp	.-26     	; 0x136a <__addsf3x+0x38>
    1384:	46 95       	lsr	r20
    1386:	37 95       	ror	r19
    1388:	27 95       	ror	r18
    138a:	a7 95       	ror	r26
    138c:	f0 40       	sbci	r31, 0x00	; 0
    138e:	53 95       	inc	r21
    1390:	c9 f7       	brne	.-14     	; 0x1384 <__addsf3x+0x52>
    1392:	7e f4       	brtc	.+30     	; 0x13b2 <__addsf3x+0x80>
    1394:	1f 16       	cp	r1, r31
    1396:	ba 0b       	sbc	r27, r26
    1398:	62 0b       	sbc	r22, r18
    139a:	73 0b       	sbc	r23, r19
    139c:	84 0b       	sbc	r24, r20
    139e:	ba f0       	brmi	.+46     	; 0x13ce <__addsf3x+0x9c>
    13a0:	91 50       	subi	r25, 0x01	; 1
    13a2:	a1 f0       	breq	.+40     	; 0x13cc <__addsf3x+0x9a>
    13a4:	ff 0f       	add	r31, r31
    13a6:	bb 1f       	adc	r27, r27
    13a8:	66 1f       	adc	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	88 1f       	adc	r24, r24
    13ae:	c2 f7       	brpl	.-16     	; 0x13a0 <__addsf3x+0x6e>
    13b0:	0e c0       	rjmp	.+28     	; 0x13ce <__addsf3x+0x9c>
    13b2:	ba 0f       	add	r27, r26
    13b4:	62 1f       	adc	r22, r18
    13b6:	73 1f       	adc	r23, r19
    13b8:	84 1f       	adc	r24, r20
    13ba:	48 f4       	brcc	.+18     	; 0x13ce <__addsf3x+0x9c>
    13bc:	87 95       	ror	r24
    13be:	77 95       	ror	r23
    13c0:	67 95       	ror	r22
    13c2:	b7 95       	ror	r27
    13c4:	f7 95       	ror	r31
    13c6:	9e 3f       	cpi	r25, 0xFE	; 254
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <__addsf3x+0x9a>
    13ca:	b0 cf       	rjmp	.-160    	; 0x132c <__addsf3+0x28>
    13cc:	93 95       	inc	r25
    13ce:	88 0f       	add	r24, r24
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <__addsf3x+0xa2>
    13d2:	99 27       	eor	r25, r25
    13d4:	ee 0f       	add	r30, r30
    13d6:	97 95       	ror	r25
    13d8:	87 95       	ror	r24
    13da:	08 95       	ret

000013dc <__cmpsf2>:
    13dc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__fp_cmp>
    13e0:	08 f4       	brcc	.+2      	; 0x13e4 <__cmpsf2+0x8>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	08 95       	ret

000013e6 <__divsf3>:
    13e6:	0e 94 07 0a 	call	0x140e	; 0x140e <__divsf3x>
    13ea:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__fp_round>
    13ee:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__fp_pscB>
    13f2:	58 f0       	brcs	.+22     	; 0x140a <__divsf3+0x24>
    13f4:	0e 94 05 0b 	call	0x160a	; 0x160a <__fp_pscA>
    13f8:	40 f0       	brcs	.+16     	; 0x140a <__divsf3+0x24>
    13fa:	29 f4       	brne	.+10     	; 0x1406 <__divsf3+0x20>
    13fc:	5f 3f       	cpi	r21, 0xFF	; 255
    13fe:	29 f0       	breq	.+10     	; 0x140a <__divsf3+0x24>
    1400:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__fp_inf>
    1404:	51 11       	cpse	r21, r1
    1406:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_szero>
    140a:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__fp_nan>

0000140e <__divsf3x>:
    140e:	0e 94 24 0b 	call	0x1648	; 0x1648 <__fp_split3>
    1412:	68 f3       	brcs	.-38     	; 0x13ee <__divsf3+0x8>

00001414 <__divsf3_pse>:
    1414:	99 23       	and	r25, r25
    1416:	b1 f3       	breq	.-20     	; 0x1404 <__divsf3+0x1e>
    1418:	55 23       	and	r21, r21
    141a:	91 f3       	breq	.-28     	; 0x1400 <__divsf3+0x1a>
    141c:	95 1b       	sub	r25, r21
    141e:	55 0b       	sbc	r21, r21
    1420:	bb 27       	eor	r27, r27
    1422:	aa 27       	eor	r26, r26
    1424:	62 17       	cp	r22, r18
    1426:	73 07       	cpc	r23, r19
    1428:	84 07       	cpc	r24, r20
    142a:	38 f0       	brcs	.+14     	; 0x143a <__divsf3_pse+0x26>
    142c:	9f 5f       	subi	r25, 0xFF	; 255
    142e:	5f 4f       	sbci	r21, 0xFF	; 255
    1430:	22 0f       	add	r18, r18
    1432:	33 1f       	adc	r19, r19
    1434:	44 1f       	adc	r20, r20
    1436:	aa 1f       	adc	r26, r26
    1438:	a9 f3       	breq	.-22     	; 0x1424 <__divsf3_pse+0x10>
    143a:	35 d0       	rcall	.+106    	; 0x14a6 <__divsf3_pse+0x92>
    143c:	0e 2e       	mov	r0, r30
    143e:	3a f0       	brmi	.+14     	; 0x144e <__divsf3_pse+0x3a>
    1440:	e0 e8       	ldi	r30, 0x80	; 128
    1442:	32 d0       	rcall	.+100    	; 0x14a8 <__divsf3_pse+0x94>
    1444:	91 50       	subi	r25, 0x01	; 1
    1446:	50 40       	sbci	r21, 0x00	; 0
    1448:	e6 95       	lsr	r30
    144a:	00 1c       	adc	r0, r0
    144c:	ca f7       	brpl	.-14     	; 0x1440 <__divsf3_pse+0x2c>
    144e:	2b d0       	rcall	.+86     	; 0x14a6 <__divsf3_pse+0x92>
    1450:	fe 2f       	mov	r31, r30
    1452:	29 d0       	rcall	.+82     	; 0x14a6 <__divsf3_pse+0x92>
    1454:	66 0f       	add	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	88 1f       	adc	r24, r24
    145a:	bb 1f       	adc	r27, r27
    145c:	26 17       	cp	r18, r22
    145e:	37 07       	cpc	r19, r23
    1460:	48 07       	cpc	r20, r24
    1462:	ab 07       	cpc	r26, r27
    1464:	b0 e8       	ldi	r27, 0x80	; 128
    1466:	09 f0       	breq	.+2      	; 0x146a <__divsf3_pse+0x56>
    1468:	bb 0b       	sbc	r27, r27
    146a:	80 2d       	mov	r24, r0
    146c:	bf 01       	movw	r22, r30
    146e:	ff 27       	eor	r31, r31
    1470:	93 58       	subi	r25, 0x83	; 131
    1472:	5f 4f       	sbci	r21, 0xFF	; 255
    1474:	3a f0       	brmi	.+14     	; 0x1484 <__divsf3_pse+0x70>
    1476:	9e 3f       	cpi	r25, 0xFE	; 254
    1478:	51 05       	cpc	r21, r1
    147a:	78 f0       	brcs	.+30     	; 0x149a <__divsf3_pse+0x86>
    147c:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__fp_inf>
    1480:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_szero>
    1484:	5f 3f       	cpi	r21, 0xFF	; 255
    1486:	e4 f3       	brlt	.-8      	; 0x1480 <__divsf3_pse+0x6c>
    1488:	98 3e       	cpi	r25, 0xE8	; 232
    148a:	d4 f3       	brlt	.-12     	; 0x1480 <__divsf3_pse+0x6c>
    148c:	86 95       	lsr	r24
    148e:	77 95       	ror	r23
    1490:	67 95       	ror	r22
    1492:	b7 95       	ror	r27
    1494:	f7 95       	ror	r31
    1496:	9f 5f       	subi	r25, 0xFF	; 255
    1498:	c9 f7       	brne	.-14     	; 0x148c <__divsf3_pse+0x78>
    149a:	88 0f       	add	r24, r24
    149c:	91 1d       	adc	r25, r1
    149e:	96 95       	lsr	r25
    14a0:	87 95       	ror	r24
    14a2:	97 f9       	bld	r25, 7
    14a4:	08 95       	ret
    14a6:	e1 e0       	ldi	r30, 0x01	; 1
    14a8:	66 0f       	add	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	88 1f       	adc	r24, r24
    14ae:	bb 1f       	adc	r27, r27
    14b0:	62 17       	cp	r22, r18
    14b2:	73 07       	cpc	r23, r19
    14b4:	84 07       	cpc	r24, r20
    14b6:	ba 07       	cpc	r27, r26
    14b8:	20 f0       	brcs	.+8      	; 0x14c2 <__divsf3_pse+0xae>
    14ba:	62 1b       	sub	r22, r18
    14bc:	73 0b       	sbc	r23, r19
    14be:	84 0b       	sbc	r24, r20
    14c0:	ba 0b       	sbc	r27, r26
    14c2:	ee 1f       	adc	r30, r30
    14c4:	88 f7       	brcc	.-30     	; 0x14a8 <__divsf3_pse+0x94>
    14c6:	e0 95       	com	r30
    14c8:	08 95       	ret

000014ca <__fixsfsi>:
    14ca:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__fixunssfsi>
    14ce:	68 94       	set
    14d0:	b1 11       	cpse	r27, r1
    14d2:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_szero>
    14d6:	08 95       	ret

000014d8 <__fixunssfsi>:
    14d8:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__fp_splitA>
    14dc:	88 f0       	brcs	.+34     	; 0x1500 <__fixunssfsi+0x28>
    14de:	9f 57       	subi	r25, 0x7F	; 127
    14e0:	98 f0       	brcs	.+38     	; 0x1508 <__fixunssfsi+0x30>
    14e2:	b9 2f       	mov	r27, r25
    14e4:	99 27       	eor	r25, r25
    14e6:	b7 51       	subi	r27, 0x17	; 23
    14e8:	b0 f0       	brcs	.+44     	; 0x1516 <__fixunssfsi+0x3e>
    14ea:	e1 f0       	breq	.+56     	; 0x1524 <__fixunssfsi+0x4c>
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	88 1f       	adc	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	1a f0       	brmi	.+6      	; 0x14fc <__fixunssfsi+0x24>
    14f6:	ba 95       	dec	r27
    14f8:	c9 f7       	brne	.-14     	; 0x14ec <__fixunssfsi+0x14>
    14fa:	14 c0       	rjmp	.+40     	; 0x1524 <__fixunssfsi+0x4c>
    14fc:	b1 30       	cpi	r27, 0x01	; 1
    14fe:	91 f0       	breq	.+36     	; 0x1524 <__fixunssfsi+0x4c>
    1500:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_zero>
    1504:	b1 e0       	ldi	r27, 0x01	; 1
    1506:	08 95       	ret
    1508:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_zero>
    150c:	67 2f       	mov	r22, r23
    150e:	78 2f       	mov	r23, r24
    1510:	88 27       	eor	r24, r24
    1512:	b8 5f       	subi	r27, 0xF8	; 248
    1514:	39 f0       	breq	.+14     	; 0x1524 <__fixunssfsi+0x4c>
    1516:	b9 3f       	cpi	r27, 0xF9	; 249
    1518:	cc f3       	brlt	.-14     	; 0x150c <__fixunssfsi+0x34>
    151a:	86 95       	lsr	r24
    151c:	77 95       	ror	r23
    151e:	67 95       	ror	r22
    1520:	b3 95       	inc	r27
    1522:	d9 f7       	brne	.-10     	; 0x151a <__fixunssfsi+0x42>
    1524:	3e f4       	brtc	.+14     	; 0x1534 <__fixunssfsi+0x5c>
    1526:	90 95       	com	r25
    1528:	80 95       	com	r24
    152a:	70 95       	com	r23
    152c:	61 95       	neg	r22
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	8f 4f       	sbci	r24, 0xFF	; 255
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	08 95       	ret

00001536 <__floatunsisf>:
    1536:	e8 94       	clt
    1538:	09 c0       	rjmp	.+18     	; 0x154c <__floatsisf+0x12>

0000153a <__floatsisf>:
    153a:	97 fb       	bst	r25, 7
    153c:	3e f4       	brtc	.+14     	; 0x154c <__floatsisf+0x12>
    153e:	90 95       	com	r25
    1540:	80 95       	com	r24
    1542:	70 95       	com	r23
    1544:	61 95       	neg	r22
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	8f 4f       	sbci	r24, 0xFF	; 255
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	99 23       	and	r25, r25
    154e:	a9 f0       	breq	.+42     	; 0x157a <__floatsisf+0x40>
    1550:	f9 2f       	mov	r31, r25
    1552:	96 e9       	ldi	r25, 0x96	; 150
    1554:	bb 27       	eor	r27, r27
    1556:	93 95       	inc	r25
    1558:	f6 95       	lsr	r31
    155a:	87 95       	ror	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b7 95       	ror	r27
    1562:	f1 11       	cpse	r31, r1
    1564:	f8 cf       	rjmp	.-16     	; 0x1556 <__floatsisf+0x1c>
    1566:	fa f4       	brpl	.+62     	; 0x15a6 <__floatsisf+0x6c>
    1568:	bb 0f       	add	r27, r27
    156a:	11 f4       	brne	.+4      	; 0x1570 <__floatsisf+0x36>
    156c:	60 ff       	sbrs	r22, 0
    156e:	1b c0       	rjmp	.+54     	; 0x15a6 <__floatsisf+0x6c>
    1570:	6f 5f       	subi	r22, 0xFF	; 255
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	16 c0       	rjmp	.+44     	; 0x15a6 <__floatsisf+0x6c>
    157a:	88 23       	and	r24, r24
    157c:	11 f0       	breq	.+4      	; 0x1582 <__floatsisf+0x48>
    157e:	96 e9       	ldi	r25, 0x96	; 150
    1580:	11 c0       	rjmp	.+34     	; 0x15a4 <__floatsisf+0x6a>
    1582:	77 23       	and	r23, r23
    1584:	21 f0       	breq	.+8      	; 0x158e <__floatsisf+0x54>
    1586:	9e e8       	ldi	r25, 0x8E	; 142
    1588:	87 2f       	mov	r24, r23
    158a:	76 2f       	mov	r23, r22
    158c:	05 c0       	rjmp	.+10     	; 0x1598 <__floatsisf+0x5e>
    158e:	66 23       	and	r22, r22
    1590:	71 f0       	breq	.+28     	; 0x15ae <__floatsisf+0x74>
    1592:	96 e8       	ldi	r25, 0x86	; 134
    1594:	86 2f       	mov	r24, r22
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	2a f0       	brmi	.+10     	; 0x15a6 <__floatsisf+0x6c>
    159c:	9a 95       	dec	r25
    159e:	66 0f       	add	r22, r22
    15a0:	77 1f       	adc	r23, r23
    15a2:	88 1f       	adc	r24, r24
    15a4:	da f7       	brpl	.-10     	; 0x159c <__floatsisf+0x62>
    15a6:	88 0f       	add	r24, r24
    15a8:	96 95       	lsr	r25
    15aa:	87 95       	ror	r24
    15ac:	97 f9       	bld	r25, 7
    15ae:	08 95       	ret

000015b0 <__fp_cmp>:
    15b0:	99 0f       	add	r25, r25
    15b2:	00 08       	sbc	r0, r0
    15b4:	55 0f       	add	r21, r21
    15b6:	aa 0b       	sbc	r26, r26
    15b8:	e0 e8       	ldi	r30, 0x80	; 128
    15ba:	fe ef       	ldi	r31, 0xFE	; 254
    15bc:	16 16       	cp	r1, r22
    15be:	17 06       	cpc	r1, r23
    15c0:	e8 07       	cpc	r30, r24
    15c2:	f9 07       	cpc	r31, r25
    15c4:	c0 f0       	brcs	.+48     	; 0x15f6 <__fp_cmp+0x46>
    15c6:	12 16       	cp	r1, r18
    15c8:	13 06       	cpc	r1, r19
    15ca:	e4 07       	cpc	r30, r20
    15cc:	f5 07       	cpc	r31, r21
    15ce:	98 f0       	brcs	.+38     	; 0x15f6 <__fp_cmp+0x46>
    15d0:	62 1b       	sub	r22, r18
    15d2:	73 0b       	sbc	r23, r19
    15d4:	84 0b       	sbc	r24, r20
    15d6:	95 0b       	sbc	r25, r21
    15d8:	39 f4       	brne	.+14     	; 0x15e8 <__fp_cmp+0x38>
    15da:	0a 26       	eor	r0, r26
    15dc:	61 f0       	breq	.+24     	; 0x15f6 <__fp_cmp+0x46>
    15de:	23 2b       	or	r18, r19
    15e0:	24 2b       	or	r18, r20
    15e2:	25 2b       	or	r18, r21
    15e4:	21 f4       	brne	.+8      	; 0x15ee <__fp_cmp+0x3e>
    15e6:	08 95       	ret
    15e8:	0a 26       	eor	r0, r26
    15ea:	09 f4       	brne	.+2      	; 0x15ee <__fp_cmp+0x3e>
    15ec:	a1 40       	sbci	r26, 0x01	; 1
    15ee:	a6 95       	lsr	r26
    15f0:	8f ef       	ldi	r24, 0xFF	; 255
    15f2:	81 1d       	adc	r24, r1
    15f4:	81 1d       	adc	r24, r1
    15f6:	08 95       	ret

000015f8 <__fp_inf>:
    15f8:	97 f9       	bld	r25, 7
    15fa:	9f 67       	ori	r25, 0x7F	; 127
    15fc:	80 e8       	ldi	r24, 0x80	; 128
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	08 95       	ret

00001604 <__fp_nan>:
    1604:	9f ef       	ldi	r25, 0xFF	; 255
    1606:	80 ec       	ldi	r24, 0xC0	; 192
    1608:	08 95       	ret

0000160a <__fp_pscA>:
    160a:	00 24       	eor	r0, r0
    160c:	0a 94       	dec	r0
    160e:	16 16       	cp	r1, r22
    1610:	17 06       	cpc	r1, r23
    1612:	18 06       	cpc	r1, r24
    1614:	09 06       	cpc	r0, r25
    1616:	08 95       	ret

00001618 <__fp_pscB>:
    1618:	00 24       	eor	r0, r0
    161a:	0a 94       	dec	r0
    161c:	12 16       	cp	r1, r18
    161e:	13 06       	cpc	r1, r19
    1620:	14 06       	cpc	r1, r20
    1622:	05 06       	cpc	r0, r21
    1624:	08 95       	ret

00001626 <__fp_round>:
    1626:	09 2e       	mov	r0, r25
    1628:	03 94       	inc	r0
    162a:	00 0c       	add	r0, r0
    162c:	11 f4       	brne	.+4      	; 0x1632 <__fp_round+0xc>
    162e:	88 23       	and	r24, r24
    1630:	52 f0       	brmi	.+20     	; 0x1646 <__fp_round+0x20>
    1632:	bb 0f       	add	r27, r27
    1634:	40 f4       	brcc	.+16     	; 0x1646 <__fp_round+0x20>
    1636:	bf 2b       	or	r27, r31
    1638:	11 f4       	brne	.+4      	; 0x163e <__fp_round+0x18>
    163a:	60 ff       	sbrs	r22, 0
    163c:	04 c0       	rjmp	.+8      	; 0x1646 <__fp_round+0x20>
    163e:	6f 5f       	subi	r22, 0xFF	; 255
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	8f 4f       	sbci	r24, 0xFF	; 255
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	08 95       	ret

00001648 <__fp_split3>:
    1648:	57 fd       	sbrc	r21, 7
    164a:	90 58       	subi	r25, 0x80	; 128
    164c:	44 0f       	add	r20, r20
    164e:	55 1f       	adc	r21, r21
    1650:	59 f0       	breq	.+22     	; 0x1668 <__fp_splitA+0x10>
    1652:	5f 3f       	cpi	r21, 0xFF	; 255
    1654:	71 f0       	breq	.+28     	; 0x1672 <__fp_splitA+0x1a>
    1656:	47 95       	ror	r20

00001658 <__fp_splitA>:
    1658:	88 0f       	add	r24, r24
    165a:	97 fb       	bst	r25, 7
    165c:	99 1f       	adc	r25, r25
    165e:	61 f0       	breq	.+24     	; 0x1678 <__fp_splitA+0x20>
    1660:	9f 3f       	cpi	r25, 0xFF	; 255
    1662:	79 f0       	breq	.+30     	; 0x1682 <__fp_splitA+0x2a>
    1664:	87 95       	ror	r24
    1666:	08 95       	ret
    1668:	12 16       	cp	r1, r18
    166a:	13 06       	cpc	r1, r19
    166c:	14 06       	cpc	r1, r20
    166e:	55 1f       	adc	r21, r21
    1670:	f2 cf       	rjmp	.-28     	; 0x1656 <__fp_split3+0xe>
    1672:	46 95       	lsr	r20
    1674:	f1 df       	rcall	.-30     	; 0x1658 <__fp_splitA>
    1676:	08 c0       	rjmp	.+16     	; 0x1688 <__fp_splitA+0x30>
    1678:	16 16       	cp	r1, r22
    167a:	17 06       	cpc	r1, r23
    167c:	18 06       	cpc	r1, r24
    167e:	99 1f       	adc	r25, r25
    1680:	f1 cf       	rjmp	.-30     	; 0x1664 <__fp_splitA+0xc>
    1682:	86 95       	lsr	r24
    1684:	71 05       	cpc	r23, r1
    1686:	61 05       	cpc	r22, r1
    1688:	08 94       	sec
    168a:	08 95       	ret

0000168c <__fp_zero>:
    168c:	e8 94       	clt

0000168e <__fp_szero>:
    168e:	bb 27       	eor	r27, r27
    1690:	66 27       	eor	r22, r22
    1692:	77 27       	eor	r23, r23
    1694:	cb 01       	movw	r24, r22
    1696:	97 f9       	bld	r25, 7
    1698:	08 95       	ret

0000169a <__mulsf3>:
    169a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__mulsf3x>
    169e:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__fp_round>
    16a2:	0e 94 05 0b 	call	0x160a	; 0x160a <__fp_pscA>
    16a6:	38 f0       	brcs	.+14     	; 0x16b6 <__mulsf3+0x1c>
    16a8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__fp_pscB>
    16ac:	20 f0       	brcs	.+8      	; 0x16b6 <__mulsf3+0x1c>
    16ae:	95 23       	and	r25, r21
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <__mulsf3+0x1c>
    16b2:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__fp_inf>
    16b6:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__fp_nan>
    16ba:	11 24       	eor	r1, r1
    16bc:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_szero>

000016c0 <__mulsf3x>:
    16c0:	0e 94 24 0b 	call	0x1648	; 0x1648 <__fp_split3>
    16c4:	70 f3       	brcs	.-36     	; 0x16a2 <__mulsf3+0x8>

000016c6 <__mulsf3_pse>:
    16c6:	95 9f       	mul	r25, r21
    16c8:	c1 f3       	breq	.-16     	; 0x16ba <__mulsf3+0x20>
    16ca:	95 0f       	add	r25, r21
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	55 1f       	adc	r21, r21
    16d0:	62 9f       	mul	r22, r18
    16d2:	f0 01       	movw	r30, r0
    16d4:	72 9f       	mul	r23, r18
    16d6:	bb 27       	eor	r27, r27
    16d8:	f0 0d       	add	r31, r0
    16da:	b1 1d       	adc	r27, r1
    16dc:	63 9f       	mul	r22, r19
    16de:	aa 27       	eor	r26, r26
    16e0:	f0 0d       	add	r31, r0
    16e2:	b1 1d       	adc	r27, r1
    16e4:	aa 1f       	adc	r26, r26
    16e6:	64 9f       	mul	r22, r20
    16e8:	66 27       	eor	r22, r22
    16ea:	b0 0d       	add	r27, r0
    16ec:	a1 1d       	adc	r26, r1
    16ee:	66 1f       	adc	r22, r22
    16f0:	82 9f       	mul	r24, r18
    16f2:	22 27       	eor	r18, r18
    16f4:	b0 0d       	add	r27, r0
    16f6:	a1 1d       	adc	r26, r1
    16f8:	62 1f       	adc	r22, r18
    16fa:	73 9f       	mul	r23, r19
    16fc:	b0 0d       	add	r27, r0
    16fe:	a1 1d       	adc	r26, r1
    1700:	62 1f       	adc	r22, r18
    1702:	83 9f       	mul	r24, r19
    1704:	a0 0d       	add	r26, r0
    1706:	61 1d       	adc	r22, r1
    1708:	22 1f       	adc	r18, r18
    170a:	74 9f       	mul	r23, r20
    170c:	33 27       	eor	r19, r19
    170e:	a0 0d       	add	r26, r0
    1710:	61 1d       	adc	r22, r1
    1712:	23 1f       	adc	r18, r19
    1714:	84 9f       	mul	r24, r20
    1716:	60 0d       	add	r22, r0
    1718:	21 1d       	adc	r18, r1
    171a:	82 2f       	mov	r24, r18
    171c:	76 2f       	mov	r23, r22
    171e:	6a 2f       	mov	r22, r26
    1720:	11 24       	eor	r1, r1
    1722:	9f 57       	subi	r25, 0x7F	; 127
    1724:	50 40       	sbci	r21, 0x00	; 0
    1726:	9a f0       	brmi	.+38     	; 0x174e <__mulsf3_pse+0x88>
    1728:	f1 f0       	breq	.+60     	; 0x1766 <__mulsf3_pse+0xa0>
    172a:	88 23       	and	r24, r24
    172c:	4a f0       	brmi	.+18     	; 0x1740 <__mulsf3_pse+0x7a>
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	bb 1f       	adc	r27, r27
    1734:	66 1f       	adc	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	91 50       	subi	r25, 0x01	; 1
    173c:	50 40       	sbci	r21, 0x00	; 0
    173e:	a9 f7       	brne	.-22     	; 0x172a <__mulsf3_pse+0x64>
    1740:	9e 3f       	cpi	r25, 0xFE	; 254
    1742:	51 05       	cpc	r21, r1
    1744:	80 f0       	brcs	.+32     	; 0x1766 <__mulsf3_pse+0xa0>
    1746:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__fp_inf>
    174a:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_szero>
    174e:	5f 3f       	cpi	r21, 0xFF	; 255
    1750:	e4 f3       	brlt	.-8      	; 0x174a <__mulsf3_pse+0x84>
    1752:	98 3e       	cpi	r25, 0xE8	; 232
    1754:	d4 f3       	brlt	.-12     	; 0x174a <__mulsf3_pse+0x84>
    1756:	86 95       	lsr	r24
    1758:	77 95       	ror	r23
    175a:	67 95       	ror	r22
    175c:	b7 95       	ror	r27
    175e:	f7 95       	ror	r31
    1760:	e7 95       	ror	r30
    1762:	9f 5f       	subi	r25, 0xFF	; 255
    1764:	c1 f7       	brne	.-16     	; 0x1756 <__mulsf3_pse+0x90>
    1766:	fe 2b       	or	r31, r30
    1768:	88 0f       	add	r24, r24
    176a:	91 1d       	adc	r25, r1
    176c:	96 95       	lsr	r25
    176e:	87 95       	ror	r24
    1770:	97 f9       	bld	r25, 7
    1772:	08 95       	ret

00001774 <__divmodhi4>:
    1774:	97 fb       	bst	r25, 7
    1776:	07 2e       	mov	r0, r23
    1778:	16 f4       	brtc	.+4      	; 0x177e <__divmodhi4+0xa>
    177a:	00 94       	com	r0
    177c:	07 d0       	rcall	.+14     	; 0x178c <__divmodhi4_neg1>
    177e:	77 fd       	sbrc	r23, 7
    1780:	09 d0       	rcall	.+18     	; 0x1794 <__divmodhi4_neg2>
    1782:	0e 94 ce 0b 	call	0x179c	; 0x179c <__udivmodhi4>
    1786:	07 fc       	sbrc	r0, 7
    1788:	05 d0       	rcall	.+10     	; 0x1794 <__divmodhi4_neg2>
    178a:	3e f4       	brtc	.+14     	; 0x179a <__divmodhi4_exit>

0000178c <__divmodhi4_neg1>:
    178c:	90 95       	com	r25
    178e:	81 95       	neg	r24
    1790:	9f 4f       	sbci	r25, 0xFF	; 255
    1792:	08 95       	ret

00001794 <__divmodhi4_neg2>:
    1794:	70 95       	com	r23
    1796:	61 95       	neg	r22
    1798:	7f 4f       	sbci	r23, 0xFF	; 255

0000179a <__divmodhi4_exit>:
    179a:	08 95       	ret

0000179c <__udivmodhi4>:
    179c:	aa 1b       	sub	r26, r26
    179e:	bb 1b       	sub	r27, r27
    17a0:	51 e1       	ldi	r21, 0x11	; 17
    17a2:	07 c0       	rjmp	.+14     	; 0x17b2 <__udivmodhi4_ep>

000017a4 <__udivmodhi4_loop>:
    17a4:	aa 1f       	adc	r26, r26
    17a6:	bb 1f       	adc	r27, r27
    17a8:	a6 17       	cp	r26, r22
    17aa:	b7 07       	cpc	r27, r23
    17ac:	10 f0       	brcs	.+4      	; 0x17b2 <__udivmodhi4_ep>
    17ae:	a6 1b       	sub	r26, r22
    17b0:	b7 0b       	sbc	r27, r23

000017b2 <__udivmodhi4_ep>:
    17b2:	88 1f       	adc	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	5a 95       	dec	r21
    17b8:	a9 f7       	brne	.-22     	; 0x17a4 <__udivmodhi4_loop>
    17ba:	80 95       	com	r24
    17bc:	90 95       	com	r25
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	08 95       	ret

000017c4 <do_rand>:
    17c4:	8f 92       	push	r8
    17c6:	9f 92       	push	r9
    17c8:	af 92       	push	r10
    17ca:	bf 92       	push	r11
    17cc:	cf 92       	push	r12
    17ce:	df 92       	push	r13
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	ec 01       	movw	r28, r24
    17da:	68 81       	ld	r22, Y
    17dc:	79 81       	ldd	r23, Y+1	; 0x01
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	9b 81       	ldd	r25, Y+3	; 0x03
    17e2:	61 15       	cp	r22, r1
    17e4:	71 05       	cpc	r23, r1
    17e6:	81 05       	cpc	r24, r1
    17e8:	91 05       	cpc	r25, r1
    17ea:	21 f4       	brne	.+8      	; 0x17f4 <do_rand+0x30>
    17ec:	64 e2       	ldi	r22, 0x24	; 36
    17ee:	79 ed       	ldi	r23, 0xD9	; 217
    17f0:	8b e5       	ldi	r24, 0x5B	; 91
    17f2:	97 e0       	ldi	r25, 0x07	; 7
    17f4:	2d e1       	ldi	r18, 0x1D	; 29
    17f6:	33 ef       	ldi	r19, 0xF3	; 243
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	0e 94 3e 0c 	call	0x187c	; 0x187c <__divmodsi4>
    1800:	49 01       	movw	r8, r18
    1802:	5a 01       	movw	r10, r20
    1804:	9b 01       	movw	r18, r22
    1806:	ac 01       	movw	r20, r24
    1808:	a7 ea       	ldi	r26, 0xA7	; 167
    180a:	b1 e4       	ldi	r27, 0x41	; 65
    180c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__muluhisi3>
    1810:	6b 01       	movw	r12, r22
    1812:	7c 01       	movw	r14, r24
    1814:	ac ee       	ldi	r26, 0xEC	; 236
    1816:	b4 ef       	ldi	r27, 0xF4	; 244
    1818:	a5 01       	movw	r20, r10
    181a:	94 01       	movw	r18, r8
    181c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__mulohisi3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	8c 0d       	add	r24, r12
    1826:	9d 1d       	adc	r25, r13
    1828:	ae 1d       	adc	r26, r14
    182a:	bf 1d       	adc	r27, r15
    182c:	b7 ff       	sbrs	r27, 7
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <do_rand+0x72>
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	a1 09       	sbc	r26, r1
    1834:	b0 48       	sbci	r27, 0x80	; 128
    1836:	88 83       	st	Y, r24
    1838:	99 83       	std	Y+1, r25	; 0x01
    183a:	aa 83       	std	Y+2, r26	; 0x02
    183c:	bb 83       	std	Y+3, r27	; 0x03
    183e:	9f 77       	andi	r25, 0x7F	; 127
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	df 90       	pop	r13
    184a:	cf 90       	pop	r12
    184c:	bf 90       	pop	r11
    184e:	af 90       	pop	r10
    1850:	9f 90       	pop	r9
    1852:	8f 90       	pop	r8
    1854:	08 95       	ret

00001856 <rand_r>:
    1856:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <do_rand>
    185a:	08 95       	ret

0000185c <rand>:
    185c:	80 e6       	ldi	r24, 0x60	; 96
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <do_rand>
    1864:	08 95       	ret

00001866 <srand>:
    1866:	a0 e0       	ldi	r26, 0x00	; 0
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    186e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
    1872:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
    1876:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
    187a:	08 95       	ret

0000187c <__divmodsi4>:
    187c:	05 2e       	mov	r0, r21
    187e:	97 fb       	bst	r25, 7
    1880:	1e f4       	brtc	.+6      	; 0x1888 <__divmodsi4+0xc>
    1882:	00 94       	com	r0
    1884:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__negsi2>
    1888:	57 fd       	sbrc	r21, 7
    188a:	07 d0       	rcall	.+14     	; 0x189a <__divmodsi4_neg2>
    188c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__udivmodsi4>
    1890:	07 fc       	sbrc	r0, 7
    1892:	03 d0       	rcall	.+6      	; 0x189a <__divmodsi4_neg2>
    1894:	4e f4       	brtc	.+18     	; 0x18a8 <__divmodsi4_exit>
    1896:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__negsi2>

0000189a <__divmodsi4_neg2>:
    189a:	50 95       	com	r21
    189c:	40 95       	com	r20
    189e:	30 95       	com	r19
    18a0:	21 95       	neg	r18
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	4f 4f       	sbci	r20, 0xFF	; 255
    18a6:	5f 4f       	sbci	r21, 0xFF	; 255

000018a8 <__divmodsi4_exit>:
    18a8:	08 95       	ret

000018aa <__negsi2>:
    18aa:	90 95       	com	r25
    18ac:	80 95       	com	r24
    18ae:	70 95       	com	r23
    18b0:	61 95       	neg	r22
    18b2:	7f 4f       	sbci	r23, 0xFF	; 255
    18b4:	8f 4f       	sbci	r24, 0xFF	; 255
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	08 95       	ret

000018ba <__muluhisi3>:
    18ba:	0e 94 92 0c 	call	0x1924	; 0x1924 <__umulhisi3>
    18be:	a5 9f       	mul	r26, r21
    18c0:	90 0d       	add	r25, r0
    18c2:	b4 9f       	mul	r27, r20
    18c4:	90 0d       	add	r25, r0
    18c6:	a4 9f       	mul	r26, r20
    18c8:	80 0d       	add	r24, r0
    18ca:	91 1d       	adc	r25, r1
    18cc:	11 24       	eor	r1, r1
    18ce:	08 95       	ret

000018d0 <__mulshisi3>:
    18d0:	b7 ff       	sbrs	r27, 7
    18d2:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__muluhisi3>

000018d6 <__mulohisi3>:
    18d6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__muluhisi3>
    18da:	82 1b       	sub	r24, r18
    18dc:	93 0b       	sbc	r25, r19
    18de:	08 95       	ret

000018e0 <__udivmodsi4>:
    18e0:	a1 e2       	ldi	r26, 0x21	; 33
    18e2:	1a 2e       	mov	r1, r26
    18e4:	aa 1b       	sub	r26, r26
    18e6:	bb 1b       	sub	r27, r27
    18e8:	fd 01       	movw	r30, r26
    18ea:	0d c0       	rjmp	.+26     	; 0x1906 <__udivmodsi4_ep>

000018ec <__udivmodsi4_loop>:
    18ec:	aa 1f       	adc	r26, r26
    18ee:	bb 1f       	adc	r27, r27
    18f0:	ee 1f       	adc	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	a2 17       	cp	r26, r18
    18f6:	b3 07       	cpc	r27, r19
    18f8:	e4 07       	cpc	r30, r20
    18fa:	f5 07       	cpc	r31, r21
    18fc:	20 f0       	brcs	.+8      	; 0x1906 <__udivmodsi4_ep>
    18fe:	a2 1b       	sub	r26, r18
    1900:	b3 0b       	sbc	r27, r19
    1902:	e4 0b       	sbc	r30, r20
    1904:	f5 0b       	sbc	r31, r21

00001906 <__udivmodsi4_ep>:
    1906:	66 1f       	adc	r22, r22
    1908:	77 1f       	adc	r23, r23
    190a:	88 1f       	adc	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	1a 94       	dec	r1
    1910:	69 f7       	brne	.-38     	; 0x18ec <__udivmodsi4_loop>
    1912:	60 95       	com	r22
    1914:	70 95       	com	r23
    1916:	80 95       	com	r24
    1918:	90 95       	com	r25
    191a:	9b 01       	movw	r18, r22
    191c:	ac 01       	movw	r20, r24
    191e:	bd 01       	movw	r22, r26
    1920:	cf 01       	movw	r24, r30
    1922:	08 95       	ret

00001924 <__umulhisi3>:
    1924:	a2 9f       	mul	r26, r18
    1926:	b0 01       	movw	r22, r0
    1928:	b3 9f       	mul	r27, r19
    192a:	c0 01       	movw	r24, r0
    192c:	a3 9f       	mul	r26, r19
    192e:	70 0d       	add	r23, r0
    1930:	81 1d       	adc	r24, r1
    1932:	11 24       	eor	r1, r1
    1934:	91 1d       	adc	r25, r1
    1936:	b2 9f       	mul	r27, r18
    1938:	70 0d       	add	r23, r0
    193a:	81 1d       	adc	r24, r1
    193c:	11 24       	eor	r1, r1
    193e:	91 1d       	adc	r25, r1
    1940:	08 95       	ret

00001942 <_exit>:
    1942:	f8 94       	cli

00001944 <__stop_program>:
    1944:	ff cf       	rjmp	.-2      	; 0x1944 <__stop_program>
